<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[paramiko实现ssh跳板机]]></title>
    <url>%2F2020%2F05%2F26%2Fparamiko%E5%AE%9E%E7%8E%B0ssh%E8%B7%B3%E6%9D%BF%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[#!/usr/bin/pythonimport paramikodef jump2server( jump_server_ip, jump_server_username, jump_server_password, remote_host_ip, remote_host_username, remote_host_password, remote_ssh_port=22, jump_ssh_port=22): jump_server = paramiko.SSHClient() jump_server.set_missing_host_key_policy(paramiko.AutoAddPolicy()) # 自动接受key jump_server.connect(jump_server_ip, username=jump_server_username, password=jump_server_password) # 跳板机连接 jump_transport = jump_server.get_transport() # 创建Transport对象 # 建立隧道 jump_channel = jump_transport.open_channel(kind="direct-tcpip", dest_addr=(remote_host_ip, remote_ssh_port), src_addr=(jump_server_ip, jump_ssh_port)) remote_host = paramiko.SSHClient() remote_host.set_missing_host_key_policy(paramiko.AutoAddPolicy()) # 自动接受key # 使用密码连接（通过隧道） remote_host.connect(remote_host_ip, username=remote_host_username, password=remote_host_password, sock=jump_channel) # 使用密钥连接（通过隧道） # private_key = paramiko.RSAKey.from_private_key_file('/root/.ssh/id_rsa') # remote_host.connect(remote_host_ip, # username=remote_host_username, # pkey=private_key, # sock=jump_channel) return remote_hostif __name__ == '__main__': server = jump2server( jump_server_ip='192.168.56.1', jump_server_username='root', jump_server_password='xxxxxxxx', remote_host_ip='192.168.56.1', remote_host_username='root', remote_host_password='xxxxxxxx', ) stdin, stdout, stderr = server.exec_command("netstat -ntp | grep ssh") print(stdout.read().decode()) server.close() 输出结果tcp 0 112 192.168.56.2:22 192.168.56.1:59393 ESTABLISHED 21676/sshd: root@no]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模态框html与js代码]]></title>
    <url>%2F2020%2F05%2F20%2F%E6%A8%A1%E6%80%81%E6%A1%86html%E4%B8%8Ejs%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[模态框html与js代码HTML&lt;!--方法结果模态框--&gt;&lt;div class="modal fade" id="fun_result" tabindex="-1" role="dialog" aria-labelledby="fun_result_ModalLabel"&gt; &lt;div class="modal-dialog modal-lg" role="document"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt; &lt;h4 class="modal-title" id="fun_result_ModalLabel" align="center"&gt;查看结果&lt;/h4&gt; &lt;/div&gt; &lt;div class="modal-body"&gt; &lt;div class="modal-body"&gt; &lt;div&gt;&lt;span style="font-weight: bold"&gt;sls检查项名：&amp;nbsp&lt;/span&gt; &lt;pre id="fun_result_name"&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div&gt;&lt;span style="font-weight: bold"&gt;执行命令：&lt;/span&gt; &lt;pre id="fun_result_cmd"&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div&gt;&lt;span style="font-weight: bold"&gt;执行描述：&lt;/span&gt; &lt;pre id="fun_comment"&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div&gt;&lt;span style="font-weight: bold"&gt;错误信息：&lt;/span&gt; &lt;pre id="fun_result_err_message" style="color: #ff463f"&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div&gt;&lt;span style="font-weight: bold"&gt;返回信息：&lt;/span&gt; &lt;pre id="fun_result_message" style="color: #ff463f"&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-success" data-dismiss="modal"&gt;关闭&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; JS$('#fun_result').modal(&#123; show: true,&#125;) 模态框的详细http://www.runoob.com/bootstrap/bootstrap-modal-plugin.html]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos更换yum源]]></title>
    <url>%2F2020%2F05%2F19%2FCentos%E6%9B%B4%E6%8D%A2yum%E6%BA%90%2F</url>
    <content type="text"><![CDATA[Centos7cd /etc/yum.repos.dmkdir -p tmpmv CentOS* tmp/curl -O http://mirrors.aliyun.com/repo/Centos-7.repo# 安装EPELyum -y install epel-releasecurl -O http://mirrors.aliyun.com/repo/epel-7.repoyum clean all &amp;&amp; yum makecache Centos6cd /etc/yum.repos.dmkdir -p tmpmv CentOS* tmp/curl -O http://mirrors.aliyun.com/repo/Centos-6.repo# 安装EPELyum -y install epel-releasecurl -O http://mirrors.aliyun.com/repo/epel-6.repoyum clean all &amp;&amp; yum makecache]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nmap小用例]]></title>
    <url>%2F2020%2F05%2F06%2Fnmap%E5%B0%8F%E7%94%A8%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[nmap小用例 简介：Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)，它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核，许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息，管理服务升级计划，以及监视主机和服务的运行。 Nmap命令行接受多个主机说明，它们不必是相同类型。nmap scanme.nmap.org 192.168.0.0/8 10.0.0，1，3-7.0-255 局域网查找10.1.1.1~10.1.1.50的空闲ip（使用ARP Ping避免禁ping）nmap -v -PR 10.1.1.1-50 | grep 'host down' | awk '&#123;print $5&#125;' 查看操作系统nmap -O 10.1.1.2 只扫描特定的端口nmap -p 20 10.1.1.1-10 快速扫描nmap -F 20 10.1.1.1-10]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>nmap</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible入门使用]]></title>
    <url>%2F2020%2F04%2F27%2FLinux%2FAnsible%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[Ansible使用文档安装使用pip安装ansible：sudo pip install ansible 基本使用创建配置文件/etc/ansible/hosts加入受控端ip，这些受控ip可以使用ssh登录（public SSH key必须在这些系统的authorized_keys中）$ cat /etc/ansible/hosts10.19.200.194 为了避免在建立SSH连接时,重复输入密码你可以这么做:$ ssh-agent bash$ ssh-add ~/.ssh/id_rsa 基本用法：$ ansible &lt;pattern&gt; -m &lt;module_name&gt; -a &lt;arguments&gt; pattern用于匹配主机，以下是pattern的例子：# 全部主机all*# 一个或多个IP地址或主机名one.example.comone.example.com:two.example.com192.168.1.50192.168.1.50:192.168.1.51# 一个或多个主机组webserverswebservers:dbservers# 在webservers组但不在phoenix组:webservers:!phoenix# 交集webservers:&amp;staging# 通配符*.example.com*.com192.168.1.*# 添加排除条件或使用@来指定主机ansible-playbook site.yml --limit datacenter2ansible-playbook site.yml --limit @retry_hosts.txt 显示pattern匹配的主机$ ansible all --list-hosts hosts (1): 10.19.200.194 查看变量$ ansible all -m setup ping测试$ ansible all -m ping 执行命令$ ansible all -a "/bin/echo hello" 传输文件并设置权限$ ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan" 软件包管理# 确认一个软件包已经安装,但不去升级它:$ ansible webservers -m yum -a "name=acme state=present"# 确认一个软件包的安装版本:$ ansible webservers -m yum -a "name=acme-1.5 state=present"# 确认一个软件包还没有安装:$ ansible webservers -m yum -a "name=acme state=absent" 用户相关# 创建ansible all -m user -a "name=foo password=&lt;crypted password here&gt;"# 删除ansible all -m user -a "name=foo state=absent" 服务管理$ ansible webservers -m service -a "name=httpd state=started"$ ansible webservers -m service -a "name=httpd state=restarted"$ ansible webservers -m service -a "name=httpd state=stoped" 关闭known_hosts确认$ vim /etc/ansible/ansible.cfg[defaults]host_key_checking = False Inventory文件主机和组/etc/ansible/hosts 文件的格式与windows的ini配置文件类似，方括号[]中是组名,用于对系统进行分类,便于对不同系统进行个别的管理：mail.example.com[webservers]foo.example.combar.example.com[dbservers]one.example.comtwo.example.comthree.example.com 指定ssh端口badwolf.example.com:5309 设置别名jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50 ansible_ssh_user=mpdehaan 正则匹配[webservers]www[01:50].example.com[databases]db-[a:f].example.com 主机变量[atlanta]host1 http_port=80 maxRequestsPerChild=808host2 http_port=303 maxRequestsPerChild=909 组变量[atlanta]host1host2[atlanta:vars]ntp_server=ntp.atlanta.example.comproxy=proxy.atlanta.example.com 可用参数ansible_ssh_host 将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.ansible_ssh_port ssh端口号.如果不是默认的端口号,通过此变量设置.ansible_ssh_user 默认的 ssh 用户名ansible_ssh_pass ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)ansible_sudo_pass sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)ansible_sudo_exe (new in version 1.8) sudo 命令路径(适用于1.8及以上版本)ansible_connection 与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &apos;smart&apos;,&apos;smart&apos; 方式会根据是否支持 ControlPersist, 来判断&apos;ssh&apos; 方式是否可行.ansible_ssh_private_key_file ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.ansible_shell_type 目标系统的shell类型.默认情况下,命令的执行使用 &apos;sh&apos; 语法,可设置为 &apos;csh&apos; 或 &apos;fish&apos;.ansible_python_interpreter 目标主机的 python 路径. Playbooks Playbooks是Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案，或者一组IT程序运行的命令集合。简单理解就是一个定义哪些主机执行什么任务的配置文件。 简单例子---# 第一个play- hosts: webservers # 主机组 vars: # 定义变量 http_port: 80 max_clients: 200 remote_user: root # 远程登录的用户 tasks: # 任务列表 - name: test connection # 任务名(备注) ping: # 测试连通性 remote_user: root # 执行任务的用户 - name: ensure apache is at the latest version yum: pkg=httpd state=latest # 使httpd更新到最新版 - name: write the apache config file template: src=/srv/httpd.j2 dest=/etc/httpd.conf # 使用模版文件 notify: # 会在task结束后执行，只会被触发一次 - restart apache - name: ensure apache is running service: name=httpd state=started handlers: # 在发生改变时执行的操作 - name: restart apache service: name=httpd state=restarted# 第二个play- hosts: my_nginx remote_user: root tasks: - service: name=nginx state=started sudo: yes - name: disable selinux # 关闭selinux command: /sbin/setenforce 0 执行一个 playbookansible-playbook playbook.yml -f 10 查看playbook的主机ansible-playbook playbook.yml --list-hosts include使用include引入tasks或handlers,并且通过vars传递变量 tasks: - include: wordpress.yml vars: wp_user: timmy some_list_variable: - alpha - beta - gamma ---# wordpress.yml- name: placeholder foo command: /bin/foo- name: placeholder bar command: /bin/bar Roles使用Roles管理目录结构项目的结构如下: site.ymlwebservers.ymlfooservers.ymlroles/ common/ files/ templates/ tasks/ handlers/ vars/ defaults/ meta/ webservers/ files/ templates/ tasks/ handlers/ vars/ defaults/ meta/ playbook 如下:---- hosts: webservers roles: - common - webservers facts使用facts获取信息 Facts通过访问远程系统获取相应的信息. 一个例子就是远程主机的IP地址或者操作系统是什么. 使用以下命令可以查看哪些信息是可用的： ansible hostname -m setup facts变量用法： &#123;&#123; ansible_nodename &#125;&#125;&#123;&#123; ansible_hostname &#125;&#125;&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;&#123;&#123; ansible_devices.sda.model &#125;&#125;&#123;# 从一个服务器引用另一个服务器的变量 #&#125;&#123;&#123; hostvars[&apos;asdf.example.com&apos;][&apos;ansible_os_family&apos;] &#125;&#125; 关闭facts，加快执行速度 - hosts: all gather_facts: F Jinja2&#123;% if &apos;webserver&apos; in group_names %&#125; # some part of a configuration file that only applies to webservers&#123;% endif %&#125;&#123;# 找出该群组中的所有IP地址 #&#125;&#123;% for host in groups[&apos;app_servers&apos;] %&#125; &#123;&#123; hostvars[host][&apos;ansible_eth0&apos;][&apos;ipv4&apos;][&apos;address&apos;] &#125;&#125;&#123;% endfor %&#125; vars使用外部的变量文件，这可以保证你共享playbook源码时隔离敏感数据的风险。 ---- hosts: all remote_user: root vars: favcolor: blue vars_files: - /vars/external_vars.yml tasks: - name: this is just a placeholder command: /bin/echo foo 每个变量文件的内容是一个简单的YAML文件 ---# in the above example, this would be vars/external_vars.ymlsomevar: somevaluepassword: magic 在命令行中传递变量 ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo" 使用json文件作为变量 ansible-playbook release.yml --extra-vars "@some_file.json" 条件选择可以使用when作为task、include、roles的条件判断 tasks: - name: "shutdown Debian flavored systems" command: /sbin/shutdown -t now when: ansible_os_family == "Debian" 还可以使用过滤器作为when执行条件：tasks: - command: /bin/false register: result ignore_errors: True - command: /bin/something when: result|failed - command: /bin/something_else when: result|success - command: /bin/still/something_else when: result|skipped 使用多个条件 tasks: - shell: echo "only on Red Hat 6, derivatives, and later" when: ansible_os_family == "RedHat" and ansible_lsb.major_release|int &gt;= 6 使用define判断变量是否已经定义 tasks: - shell: echo "I've got '&#123;&#123; foo &#125;&#125;' and am not afraid to use it!" when: foo is defined - fail: msg="Bailing out. this play requires 'bar'" when: bar is not defined 变量文件与模版配置文件的模版: - name: template a file template: src=&#123;&#123; item &#125;&#125; dest=/etc/myapp/foo.conf with_first_found: - files: - &#123;&#123; ansible_distribution &#125;&#125;.conf - default.conf paths: - search_location_one/somedir/ - /opt/other_location/somedir/ 注册变量 register关键词决定了把结果存储在哪个变量中。结果参数可以用在模版中，动作条目，或者 when 语句。 - name: test play hosts: all tasks: - shell: cat /etc/motd register: motd_contents - shell: echo "motd contains the word hi" when: motd_contents.stdout.find('hi') != -1 循环使用with_items进行循环 - name: add several users user: name=&#123;&#123; item &#125;&#125; state=present groups=wheel with_items: - testuser1 - testuser2 传入字典 - name: add several users user: name=&#123;&#123; item.name &#125;&#125; state=present groups=&#123;&#123; item.groups &#125;&#125; with_items: - &#123; name: 'testuser1', groups: 'wheel' &#125; - &#123; name: 'testuser2', groups: 'root' &#125; 嵌套循环- name: give users access to multiple databases mysql_user: name=&#123;&#123; item[0] &#125;&#125; priv=&#123;&#123; item[1] &#125;&#125;.*:ALL append_privs=yes password=foo with_nested: - [ 'alice', 'bob' ] - [ 'clientdb', 'employeedb', 'providerdb' ] 随机选择- debug: msg=&#123;&#123; item &#125;&#125; with_random_choice: - "go through the door" - "drink from the goblet" - "press the red button" - "do nothing" Do-Until循环重试一个任务直到达到某个条件 - action: shell /usr/bin/foo register: result until: result.stdout.find("all systems go") != -1 retries: 5 delay: 10 递归运行shell模块,直到模块结果中的stdout输出中包含”all systems go”字符串,或者该任务按照10秒的延迟重试超过5次.”retries”和”delay”的默认值分别是3和5. 特殊特性异步操作和轮询---- hosts: all remote_user: root tasks: - name: simulate long running op (15 sec), wait for up to 45 sec, poll every 5 sec command: /bin/sleep 15 async: 45 poll: 5 如果你不需要等待任务执行完毕,你可以指定 poll 值为0而启用 “启动并忽略” ---# Requires ansible 1.8+- name: 'YUM - fire and forget task' yum: name=docker-io state=installed async: 1000 poll: 0 register: yum_sleeper- name: 'YUM - check on fire and forget task' async_status: jid=&#123;&#123; yum_sleeper.ansible_job_id &#125;&#125; register: job_result until: job_result.finished retries: 30 测试模式ansible-playbook foo.yml --check 显示不同ansible-playbook foo.yml --check --diff --limit foo.example.com 只执行一次---# ... tasks: # ... - command: /opt/application/upgrade_db.py run_once: true # ... 使用代理- hosts: all remote_user: root tasks: - apt: name=cobbler state=installed environment: http_proxy: http://proxy.example.com:8080 忽略错误- name: this will not be counted as a failure command: /bin/false ignore_errors: yes 判断错误- name: this command prints FAILED when it fails command: /usr/bin/example-command -x -y -z register: command_result failed_when: "'FAILED' in command_result.stderr" 标签tasks: - yum: name=&#123;&#123; item &#125;&#125; state=installed with_items: - httpd - memcached tags: - packages - template: src=templates/src.j2 dest=/etc/foo.conf tags: - configuration 只想运行一个非常大的 playbook 中的 “configuration” 和 “packages”,你可以这样做: ansible-playbook example.yml --tags "configuration,packages" 只想执行 playbook 中某个特定任务 之外 的所有任务,你可以这样做: ansible-playbook example.yml --skip-tags "notification" Vaultvault 可以加密任何 Ansible 使用的结构化数据文件. 灵活运行从指定的任务开始执行playbook ansible-playbook playbook.yml --start-at="install packages" 分步交互式的执行playbook ansible-playbook playbook.yml --step 模块相关列出已安装的模块 ansible-doc -l 查看模块文档 ansible-doc yumansible-doc -s yum # 简略版 常用模块命令模块 command shell文件模块 copy fetch file安装模块 yum服务模块 service挂载模块 mount定时任务 cron用户模块 group user压缩解压 unarchive基础信息 setup连通测试 ping 可以直接在远程主机上执行命令，并将结果返回本主机。注意，该命令不支持 | 管道命令 cron模块管理cron计划任务的 配置文件配置文件(按照查找顺序排列)* ansible.cfg (位于当前目录中)* ANSIBLE_CONFIG (一个环境变量)* .ansible.cfg (位于家目录中)* /etc/ansible/ansible.cfg 配置例子]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装redmine3.4]]></title>
    <url>%2F2020%2F04%2F20%2FLinux%2Fcentos7%E5%AE%89%E8%A3%85redmine3-4%2F</url>
    <content type="text"><![CDATA[centos7安装redmine3.4系统版本Linux centos7 3.10.0-1062.18.1.el7.x86_64 #1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 安装步骤systemctl stop firewalld # 关闭防火墙yum install mariadb-libs mariadb mariadb-devel mariadb-server ImageMagick-devel ImageMagick ruby rubygems ruby-devel -y # 安装所需包wget https://www.redmine.org/releases/redmine-3.4.7.tar.gz # 获取安装包tar xf redmine-3.4.7.tar.gz -C /usr/local/cd /usr/local/redmine-3.4.7/configcp configuration.yml.example configuration.ymlcp database.yml.example database.ymlvim database.yml # 配置数据库用户名密码systemctl start mariadb # 开启数据库 mysq插入数据CREATE DATABASE redmine CHARACTER SET utf8mb4;CREATE USER 'redmine'@'localhost' IDENTIFIED BY '123456';GRANT ALL PRIVILEGES ON redmine.* TO 'redmine'@'localhost'; RUBYgem source -l # 查看源gem sources -a http://mirrors.aliyun.com/rubygems/ # 添加国内源gem sources --remove https://rubygems.org/ # 删除国外源gem source -u # 更新源gem source -l # 查看源升级RUBY# Install mpapis public key (might need `gpg2` and or `sudo`)gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3# Download the installercurl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installercurl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer.asc# Verify the installer signature (might need `gpg2`), and if it validates...gpg --verify rvm-installer.asc &amp;&amp;# Run the installerbash rvm-installer stablervm -v # 查看rvm版本rvm list known # 查看Ruby版本rvm install 2.5gem install bundler #Redmine使用Bundler来管理gems依赖项，需要先安装Bundlerbundle install --without development test production #安装Redmine所需的所有gembundle exec rake generate_secret_token # 生成Rails使用的随机密钥，用于编码存储会话数据的cookie，从而防止其被篡改。生成新的机密令牌会在重新启动后使所有现有会话无效。将此秘密存储在config/secrets.yml中]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vbox下linux添加和启动网卡]]></title>
    <url>%2F2020%2F04%2F14%2FLinux%2Fvbox%E4%B8%8Blinux%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%90%AF%E5%8A%A8%E7%BD%91%E5%8D%A1%2F</url>
    <content type="text"><![CDATA[vbox下linux添加和启动网卡vbox添加新网卡 查看网卡名字ubuntu16：ls /sys/class/net centos7：ls /etc/sysconfig/network-scripts/ (ifcfg-*就是接口名称) 手动开启接口：ubuntu：ifconfig 接口名 up centos7：/etc/sysconfig/network-scripts/if-up 接口名或 ifconfig 接口名 up 编辑接口文件（开机启动接口，静态设置等）ubuntu：vim /etc/networks/interfaces centos7：vim /etc/sysconfig/network-script/接口名 重启网络ubuntu：service networking restart centos7：systemctl start network.service或 service network restart 查看接口ipipconfig 或 ip add]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>vbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWK 知识与技巧]]></title>
    <url>%2F2020%2F04%2F14%2FLinux%2FAWK-%E7%9F%A5%E8%AF%86%E4%B8%8E%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[AWK 知识与技巧使用match匹配关键字并且输出匹配内容 命令 cat wget-list-USTC.row | grep -v '^$' | awk '&#123;match($0,/&lt;a href="(.+)"&gt;/,a); print "http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/"a[1]&#125;' &gt; wget-list 实际例子 cat wget-list-USTC.row | head&lt;a href=&quot;Python-3.8.1.tar.xz&quot;&gt;Python-3.8.1.tar.xz&lt;/a&gt; 18-Dec-2019 21:30 17828408&lt;a href=&quot;XML-Parser-2.46.tar.gz&quot;&gt;XML-Parser-2.46.tar.gz&lt;/a&gt; 24-Sep-2019 05:29 254763&lt;a href=&quot;acl-2.2.53.tar.gz&quot;&gt;acl-2.2.53.tar.gz&lt;/a&gt; 16-Aug-2018 16:36 524300&lt;a href=&quot;attr-2.4.48.tar.gz&quot;&gt;attr-2.4.48.tar.gz&lt;/a&gt; 16-Aug-2018 16:36 467840&lt;a href=&quot;autoconf-2.69.tar.xz&quot;&gt;autoconf-2.69.tar.xz&lt;/a&gt; 16-Aug-2018 16:36 1214744&lt;a href=&quot;automake-1.16.1.tar.xz&quot;&gt;automake-1.16.1.tar.xz&lt;/a&gt; 16-Aug-2018 16:36 1534936&lt;a href=&quot;bash-5.0-upstream_fixes-1.patch&quot;&gt;bash-5.0-upstream_fixes-1.patch&lt;/a&gt; 01-Dec-2019 16:25 21672&lt;a href=&quot;bash-5.0.tar.gz&quot;&gt;bash-5.0.tar.gz&lt;/a&gt; 07-Jan-2019 14:13 10135110&lt;a href=&quot;bc-2.5.3.tar.gz&quot;&gt;bc-2.5.3.tar.gz&lt;/a&gt; 01-Feb-2020 16:02 252149&lt;a href=&quot;binutils-2.34.tar.xz&quot;&gt;binutils-2.34.tar.xz&lt;/a&gt; 01-Feb-2020 12:24 21637796cat wget-list-USTC.row | grep -v &apos;^$&apos; | awk &apos;&#123;match($0,/&lt;a href=&quot;(.+)&quot;&gt;/,a); print &quot;http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/&quot;a[1]&#125;&apos; &gt; wget-listcat wget-list | headhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/Python-3.8.1.tar.xzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/XML-Parser-2.46.tar.gzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/acl-2.2.53.tar.gzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/attr-2.4.48.tar.gzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/autoconf-2.69.tar.xzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/automake-1.16.1.tar.xzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bash-5.0-upstream_fixes-1.patchhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bash-5.0.tar.gzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bc-2.5.3.tar.gzhttp://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/binutils-2.34.tar.xz 解析 match($0,/&lt;a href=&quot;(.+)&quot;&gt;/,a) match函数接收3个参数，第一个为输入，$0表示整行数据。第二个参数为正则匹配，参数内括号匹配到的内容按顺序保存到第三个参数命名的列表中，该例子为a，使用a[1]调用第一个括号匹配的内容，a[2]第二个括号内容，以此类推。]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LFS 搭建笔记]]></title>
    <url>%2F2020%2F04%2F14%2FLinux%2FLFS-%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[LFS 搭建笔记 版本：SVN-20200401文档链接：http://www.linuxfromscratch.org/lfs/view/development/index.html 软件镜像源：http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/ 简介本书共4部分，分为9章节，以下为每一章节的介绍。 第1章为本书的介绍和说明部分。 第2章介绍了如何创建新的Linux本机分区和文件系统。在这里将编译和安装新的LFS系统。 第3章介绍了构建LFS系统需要下载哪些软件包和修补程序以及如何将它们存储在新文件系统中。 第4章讨论了合适的工作环境的设置，以及如何搭建工作环境。 第5章说明了许多软件包的安装，这些软件包将构成第6章中用于构建实际系统的基本开发套件（或工具链）。 第6章构建了完整的LFS系统。在chroot环境（改变root）程序用来进入一个虚拟环境，并开始一个新的shell，其根目录被设置为LFS分区。 第7章为设置基本的系统配置。 第8章为设置内核和引导加载程序。 第9章包含有关在本书之外继续LFS经验的信息。实施本书中的步骤之后，计算机将准备好重新启动进入新的LFS系统。 核心第二部分的总体目标 是创建一个临时区域，其中包含可以与主机系统隔离的一组已知良好的工具。通过使用 chroot，其余各章中的命令将包含在该环境中，从而确保目标LFS系统的构建干净无误。包括的工具链有：Binutils-2.34 # Binutils程序包包含一个链接器，一个汇编器和其他用于处理目标文件的工具。GCC-9.3.0 # GCC软件包包含GNU编译器集合，其中包括C和C ++编译器。Linux-5.5.9 API Headers # 内核的API，供Glibc使用。Glibc-2.31 # Glibc软件包包含主要的C库。该库提供了用于分配内存，搜索目录，打开和关闭文件，读取和写入文件，字符串处理，模式匹配，算术等等的基本例程。Libstdc++ # 标准的C++库Tcl-8.6.10 # 工具命令语言，强大的通用脚本语言。Expect-5.45.4 # 自动化工具，通过脚本对话框，交互式应用，如远程登录， FTP，passwd，fsck的，远程登录并提示。DejaGnu依赖ExpectDejaGNU-1.6.2 # GNU工具的运行测试套件的框架M4-1.4.18 # 宏处理器Ncurses-6.2 # 终端独立处理字符屏幕的库Bash-5.0 # Bourne-Again SHellBison-3.5.3 # 解析器生成器Bzip2-1.0.8 # 压缩和解压缩文件的程序Coreutils-8.32 # 显示和设置基本系统特征的实用程序Diffutils-3.7 # 显示文件或目录之间差异的程序File-5.38 # 查看文件或多个文件类型的实用程序Findutils-4.7.0 # 查找文件的程序Gawk-5.0.1 # 处理文本文件的程序Gettext-0.20.1 # 国际化和本地化的实用程序Grep-3.4 # 搜索、过滤文件的程序Gzip-1.10 # 压缩和解压缩文件Make-4.3 # 编译软件包的程序Patch-2.7.6 # 通常由diff程序创建的“补丁程序”文件 来修改或创建文件Perl-5.30.2 # 实用的提取和报告语言Python-3.8.2 # Python开发环境Sed-4.8 # 流编辑器Tar-1.32 # 归档程序Texinfo-6.7 # 用于读取，写入和转换信息页面的程序Xz-5.2.5 # 压缩和解压缩文件的程序 第三部分为使用第二部分建立的与主机系统隔离的工具来建立LFS系统，安装基本系统软件与系统配置文件介绍。包括的工具链有：Linux-5.5.9 API HeadersMan-pages-5.05 # 帮助手册Glibc-2.31 # Glibc软件包包含主要的C库。该库提供了用于分配内存，搜索目录，打开和关闭文件，读取和写入文件，字符串处理，模式匹配，算术等等的基本例程。Zlib-1.2.11 # 程序使用的压缩和解压缩库Bzip2-1.0.8 # # 程序使用的压缩和解压缩库Xz-5.2.5 # # 程序使用的压缩和解压缩库File-5.38 # 查看文件或多个文件类型的实用程序Readline-8.0 # 提供命令行编辑和历史记录功能的库。M4-1.4.18 # 宏处理器Bc-2.6.0 # 算数运算Binutils-2.34 # Binutils程序包包含一个链接器，一个汇编器和其他用于处理目标文件的工具。GMP-6.2.0 # 精密数学函数MPFR-4.0.2 # 多精度数学的函数MPC-1.1.0 # 复数算术运算Attr-2.4.48 # 管理文件系统对象上的扩展属性Acl-2.2.53 # 为文件和目录定义更细粒度的自由访问权限Shadow-4.8.1 # 以安全方式处理密码的程序GCC-9.3.0 # GCC软件包包含GNU编译器集合，其中包括C和C ++编译器Pkg-config-0.29.2 # 用于在配置和执行文件期间传递包含路径和/或库路径以构建工具Ncurses-6.2 # 用于终端独立处理字符屏幕的库Libcap-2.33 # 将所有强大的root特权划分为一组不同的特权Sed-4.8 # 流编辑器Psmisc-23.3 # 显示有关正在运行的进程的信息的程序Iana-Etc-2.30 # 为网络服务和协议提供数据Bison-3.5.3 # 解析器生成器Flex-2.6.4 # 生成识别文本模式的程序Grep-3.4 # 搜索、过滤文件的程序Bash-5.0 # Bourne-Again SHellLibtool-2.4.6 # GNU通用库支持脚本GDBM-1.18.1 # GNU数据库管理器Gperf-3.1 # 从密钥集生成哈希函数Expat-2.2.9 # 面向流的C库，用于解析XMLInetutils-1.9.4 # 基本联网的程序Perl-5.30.2 # 提取和报告语言XML::Parser-2.46 # James Clark的XML解析器Expat的Perl接口Intltool-0.51.0 # 一种国际化工具，用于从源文件中提取可翻译字符串Autoconf-2.69 # 用于生成可自动配置源代码的Shell脚本的程序Automake-1.16.2 # 用于生成与Autoconf一起使用的Makefile的程序Kmod-27 # 用于加载内核模块的库和实用程序Gettext-0.20.1 # 用于国际化和本地化的实用程序Libelf from Elfutils-0.179 # 用于处理ELF（可执行和可链接格式）文件的库Libffi-3.3 # 为各种调用约定提供了一个可移植的高级编程接口。这允许程序员在运行时调用由调用接口描述指定的任何函数OpenSSL-1.1.1f # 与加密有关的管理工具和库Python-3.8.2 # Python开发环境Ninja-1.10.0 # 注重速度的小型构建系统Meson-0.54.0 # 高生产率的构建系统Coreutils-8.32 # 显示和设置基本系统特征的实用程序Check-0.14.0 # C的单元测试框架Diffutils-3.7 # 显示文件或目录之间差异的程序Gawk-5.0.1 # 处理文本文件的程序Findutils-4.7.0 # 查找文件的程序Groff-1.22.4 # 处理和格式化文本的程序GRUB-2.04 # GRand Unified BootloaderLess-551 # 文本文件查看器Gzip-1.10 # 压缩和解压缩文件的程序Zstd-1.4.4 # 实时压缩算法，可提供高压缩率。IPRoute2-5.5.0 # 基本和高级基于IPV4的网络的程序Kbd-2.2.0 # 键表文件，控制台字体和键盘实用程序Libpipeline-1.5.2 # 用于以灵活方便的方式操纵子流程的管道Make-4.3 # 编译软件包的程序Patch-2.7.6 # 通常由diff程序创建的“补丁程序”文件 来修改或创建文件Man-DB-2.9.1 # 手册数据库Tar-1.32 # 归档程序Texinfo-6.7 # 用于读取，写入和转换信息页面的程序Vim-8.2.0486 # 文本编辑器Procps-ng-3.3.16 # 用于监视过程的程序Util-linux-2.35.1 # 其他实用程序。其中包括用于处理文件系统，控制台，分区和消息的实用程序Eudev-3.2.9 # 动态创建设备节点的程序E2fsprogs-1.45.6 # 处理ext2文件系统的实用程序 。它还支持ext3和ext4日志文件系统Sysklogd-1.5.1 # 记录系统消息的程序Sysvinit-2.96 # 控制系统的启动，运行和关闭的程序 系统配置文件：/etc/sysconfig/ifconfig.eth0 # 网络接口配置/etc/resolv.conf # 域名解析配置/etc/hostname # 主机名配置/etc/hosts # 主机名ip映射配置/etc/inittab # 内核初始化文件/etc/rc.d/ # 启动级别配置/etc/sysconfig/clock # 系统时钟配置/etc/sysconfig/console # 控制台样式配置/etc/profile # profile配置~/.bash_profile # bash配置/etc/inputrc # 键盘输入映射配置/etc/shells # 登录Shell列表/etc/fstab # 启动挂载配置 随笔交叉编译是在一个平台上生成另一个平台上的可执行代码。同一个体系结构可以运行不同的操作系统；同样，同一个操作系统也可以在不同的体系结构上运行。 LSB（Linux Standard Base）有五个独立的标准：内核、C++、桌面、运行时语言和输出。 一般来说，交换分区的推荐大小为物理内存的两倍左右，实际上并无此必要。对于 LFS 或者是 Gentoo 总是编译源代码的发行版来说，swap 分区是极其有必要的。在编译过程中，编译系统会将那些不总是变化的文件寄存在 swap 分区中，而为软件编译过程提供更多的内存空间。 ext2适用于那些分区容量不是太大，更新也不频繁的情况，例如 /boot 分区。 ext3是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复。它通常被用作通用的文件系统。 ext4是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、以及速度的提升。 strip简单的说就是给文件脱掉外衣，具体就是从特定文件中剥掉一些符号信息和调试信息，使文件变小。其实， strip不仅仅可以针对可执行文件， 还能针对目标文件和动态库等. 在实际的开发中， 经常需要对动态库.so进行strip操作， 减少占地空间。 而在调试的时候（比如用addr2line）， 就需要符号了。 因此， 通常的做法是： strip前的库用来调试， strip后的库用来实际发布， 他们两者有对应关系。 一旦发布的strip后的库出了问题， 就可以找对应的未strip的库来定位。 使用多个CPU核心来加速编译速度对于具有多个处理器（或内核）的许多现代系统，可以通过设置环境变量或告知make 程序有多少个处理器来执行“并行make”来减少程序包的编译时间。例如，Core2Duo可以同时支持两个进程： export MAKEFLAGS=’-j 2’或仅通过以下方式进行构建： make -j2 构建此最小系统需要两个步骤。第一步是构建一个新的且独立于主机的工具链（编译器，汇编器，链接器，库和一些有用的实用程序）。第二步使用此工具链构建其他基本工具。 动态链接库查找顺序和路径ld --verbose | grep SEARCHSEARCH_DIR("=/usr/x86_64-redhat-linux/lib64"); SEARCH_DIR("=/usr/lib64"); SEARCH_DIR("=/usr/local/lib64"); SEARCH_DIR("=/lib64"); SEARCH_DIR("=/usr/x86_64-redhat-linux/lib"); SEARCH_DIR("=/usr/local/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib"); 静态库和动态库静态库和动态库从字面意思来看，区别就是静态和动态。而这里的静态和动态指的是库的链接阶段。可以看如下的编译过程。 静态库：在链接阶段库将会与目标汇编后的目标文件.o一起打包生成可执行文件。成为可执行文件的一部分，后续此库就可以消失了。也就是说在编译的最后一步（链接阶段），如果程序需要使用静态库，在这一步都会一起打包到可执行文件中。动态库：而动态库在编译阶段都不会有什么动作，只有在程序运行时才被加载，也就是动态库的链接是发生在程序运行时期的，它和可执行文件是分开的，只是可执行文件在运行的某个时期调用了它。 sys和proc文件系统1、sys文件系统本质上和proc文件系统是一样的，都是虚拟文件系统。都在根目录下有个目录（一个是/proc目录，另一个是/sys目录），因此都不是硬盘中的文件，都是内核中的数据结构的可视化接口。 2、不同的是/proc中的文件只能读，但是/sys中的文件可以读写。读/sys中的文件就是获取内核中数据结构的值，而写入/sys中的文件就是设置内核中的数据结构的元素的值。 3、历史上刚开始先有/proc文件系统，后来人们希望通过这种技术来调试内核。实际做出来的时候确实是很有用，所以很多内核开发者都去内核添加代码向/proc目录中写文件，而且刚开始的时候内核管理者对proc目录的使用也没有什么经验也没有什么统一规划，后来导致的结果就是proc里边的内容又多又杂乱。 4、后来觉得proc中的内容太多太乱缺乏统一规划，于是乎又添加了sys目录。sys文件系统一开始就做了很好的规划和约定，所以后来使用sys目录时有了规矩。 临时文件/var/log/wtmp文件记录所有登录和注销。该/var/log/lastlog文件记录每个用户上次登录的时间。该/var/log/faillog文件记录失败的登录尝试。该/var/log/btmp文件记录错误的登录尝试。 编译动态链接库 ld指定动态库链接，除了修改/etc/ld.so.conf文件还要使用ldconfig刷新/etc/ld.so.cache缓存才能生效。动态链接库查找顺序和路径：ld –verbose | grep SEARCH 理解LFS 从零开始学Linux，目标是以一个linux环境为基础，从零开始构建一个可用的Linux系统，这个Linux系统并不是最小的系统，而是包含了许多常用的软件，以及基本的开发、编译环境，可以从这个系统按需求繁衍出更为复杂的系统。 通过搭建LFS可以让我对Linux的基本组件有更深刻的认识，包括它们的依赖关系、伴生关系、配置目录位置等，超过100个常用软件和库的编译让我更加熟悉系统的软件编译安装，各种配置参数的作用。从零开始构建让我了解了Linux的每一个细微的构成，每一个配置文件的作用以及目录位置，GRUB引导Linux的启动过程，]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WSGI、uwsgi和uWSGI]]></title>
    <url>%2F2019%2F10%2F29%2FPython%2FWSGI%E3%80%81uwsgi%E5%92%8CuWSGI%2F</url>
    <content type="text"><![CDATA[WSGI：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。server和application的规范在PEP 3333中有具体描述。要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 WSGI协议主要包括server和application两部分： WSGI server负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端； WSGI application接收由server转发的request，处理请求，并将处理结果返回给server。 WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。 例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。 uWSGI：是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等。 uwsgi：与WSGI一样是一种通信协议，是uWSGI服务器的独占协议，用于定义传输信息的类型(type of information)，每一个uwsgi packet前4byte为传输信息类型的描述，与WSGI协议是两种东西，据说该协议是fcgi协议的10倍快。 参考链接：https://www.jianshu.com/p/679dee0a4193]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建Turn服务器(coturn)]]></title>
    <url>%2F2019%2F09%2F16%2FLinux%2F%E6%90%AD%E5%BB%BATurn%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Centos7搭建Turn服务器(coturn)官方安装文档]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python_attr模块]]></title>
    <url>%2F2019%2F09%2F06%2FPython%2FPython_attr%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[Python attr 模块demo代码import attrfrom attr.validators import instance_ofdef check_str_len(instance, attribute, value): if not 10 &gt; len(value) &gt; 1: print(value) raise ValueError("wrong str len!")@attr.s(auto_attribs=True, slots=True)class Book(object): name: str # 设置了auto_attribs会自动生成参数 page: int book_type: list author: str = attr.ib(validator=[instance_of(str), check_str_len]) # 检查合法性，可以是多个条件 price: float = attr.ib(converter=float) # 类型转换为float secret: str = attr.ib(repr=False) # 排除不输出 comment: str = attr.ib(default='123')a = Book('python test', 100, ['计算机', '编程'], '匿名', 30, 'yqgadfgwsrtqaavssdfa', '一本好书')print(a) # 不输出repr=False的项print(a.__slots__) # 开启slots=Trueprint(attr.asdict(a)) # 转换属性为dict输出'''console输出内容：Book(name='python test', page=100, book_type=['计算机', '编程'], author='匿名', price=30.0, comment='一本好书')('name', 'page', 'book_type', 'author', 'price', 'secret', 'comment', '__weakref__')&#123;'name': 'python test', 'page': 100, 'book_type': ['计算机', '编程'], 'author': '匿名', 'price': 30.0, 'secret': 'yqgadfgwsrtqaavssdfa', 'comment': '一本好书'&#125;''' 参考文章： https://www.jianshu.com/p/2140b519028d https://www.attrs.org/en/stable/examples.html https://glyph.twistedmatrix.com/2016/08/attrs.html]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell启动脚本]]></title>
    <url>%2F2019%2F08%2F02%2FLinux%2FShell%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[#!/bin/bash# 启动脚本echo "当前用户：" $&#123;USER&#125;echo "当前目录：" $&#123;HOME&#125;echo "----------------------------"function start() &#123; # 服务启动需要做的步骤&#125;function stop() &#123; # 服务停止需要做的步骤&#125;function restart() &#123; # 重启服务需要做的步骤 stop sleep 3 start status&#125;function status() &#123; # 查看状态需要做的步骤&#125;# 判断用户输入命令case $1 in start) # 服务启动需要做的步骤 start ;; stop) # 服务停止需要做的步骤 stop ;; restart) # 重启服务需要做的步骤 restart ;； status) # 查看状态需要做的步骤 status ;; *) echo "Usage: $0 &#123;start|stop|restart|status&#125;" exit 4 ;;esac]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Socket编程]]></title>
    <url>%2F2019%2F06%2F14%2FPython%2FSocket%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Python Socket 编程服务端#!/usr/bin/python# -*- coding: UTF-8 -*-import sysreload(sys)sys.setdefaultencoding('utf8')import socket# 建立一个服务端server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)server.bind(('localhost',9090)) # 绑定要监听的端口server.listen(5) # 开始监听 表示可以使用五个链接排队while True:# conn就是客户端链接过来而在服务端为期生成的一个链接实例 conn,addr = server.accept() # 等待链接,多个链接的时候就会出现问题,其实返回了两个值 print(conn,addr) while True: data = conn.recv(1024) # 接收数据 print('recive:',data.decode()) # 打印接收到的数据 conn.send(data.upper()) # 然后再发送数据 conn.close() 客户端#!/usr/bin/python# -*- coding: UTF-8 -*-import sysreload(sys)sys.setdefaultencoding('utf8')import socket # 客户端 发送一个数据，再接收一个数据client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) # 声明socket类型，同时生成链接对象client.connect(('localhost',9090)) #建立一个链接，连接到本地的6969端口while True: # addr = client.accept() # print '连接地址：', addr msg = '欢迎访问菜鸟教程！' # strip默认取出字符串的头尾空格 client.send(msg.encode('utf-8')) # 发送一条信息 python3 只接收btye流 data = client.recv(1024) # 接收一个信息，并指定接收的大小 为1024字节 print('recv:',data.decode()) # 输出我接收的信息client.close() # 关闭这个链接]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux排错命令]]></title>
    <url>%2F2019%2F05%2F10%2FLinux%2FLinux%E6%8E%92%E9%94%99%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux排错命令 记录一些排错命令和常用软件的日志位置，排错方法。 系统 uname -a # 查看内核/操作系统/CPU信息，可以查看主机名、内核版本、系统平台等 head -n 1 /etc/issue # 查看操作系统版本 cat /proc/cpuinfo # 查看CPU信息 processor 逻辑处理器的id。 physical id 物理封装的处理器的id。 core id 每个核心的id。 cpu cores 位于相同物理封装的处理器中的内核数量。 siblings 位于相同物理封装的处理器中的逻辑处理器的数量。 hostname # 查看计算机名 lspci -tv # 列出所有PCI设备 lsusb -tv # 列出所有USB设备 lsmod # 列出加载的内核模块 env # 查看环境变量 sysctl -a # 查看所有系统内核参数 ，如net.ipv4.ip_forward ifstat # 查看接口流量 查看发行版 lsb_release -a # 查看发行版详细信息 （有些发行版需要安装软件） cat /etc/os-release cat /etc/centos-release 资源 free -m # 查看内存使用量和交换区使用量 df -h # 查看各分区使用情况 du -sh &lt;目录名&gt; # 查看指定目录的大小 grep MemTotal /proc/meminfo # 查看内存总量 grep MemFree /proc/meminfo # 查看空闲内存量 uptime # 查看系统运行时间、用户数、负载 cat /proc/loadavg # 查看系统负载 磁盘和分区 mount | column -t # 查看挂接的分区状态 fdisk -l # 查看所有分区 swapon -s # 查看所有交换分区 hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) dmesg | grep IDE # 查看启动时IDE设备检测状况 df -T # 查看文件系统 df -i # 查看inode数量 网络 ifconfig # 查看所有网络接口的属性 iptables -L # 查看防火墙设置 route -n # 查看路由表 netstat -lntp # 查看所有监听端口 netstat -antp # 查看所有已经建立的连接 netstat -s # 查看网络统计信息 ip 进程 ps -ef # 查看所有进程 top # 实时显示进程状态 lsof -u FreezeJ # 查看用户进程 strace # 可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。 fuser -v FILENAME # 显示出当前哪个程序在使用磁盘上的某个文件 用户 w # 查看活动用户 id &lt;用户名&gt; # 查看指定用户信息 last # 查看用户登录日志 cut -d: -f1 /etc/passwd # 查看系统所有用户 cut -d: -f1 /etc/group # 查看系统所有组 crontab -l # 查看当前用户的计划任务cak 服务 chkconfig –list # 列出所有系统服务 chkconfig –list | grep on # 列出所有启动的系统服务 日志 journalctl -u kubelet # Centos6中没有该命令 程序 rpm -qa # 查看所有安装的软件包 yum provides glib-compile-resources # 列出提供对应模块的程序 yum list # 显示所有已经安装和可以安装的程序包 yum grouplist # 批量安装的软件列表 yum info package1 显示安装包信息package1 yum clean packages 清除缓存目录下的软件包 yum deplist package1 查看程序package1依赖情况 SSH ssh -T # 检测ssh连接的连通性 ssh -vv # 查看错误详情 tail -f /var/log/secure # 查看错误信息 vim /etc/ssh/sshd_config # ssh 后台服务配置文件 vim /etc/ssh/ssh_config # ssh客户端配置文件 Crontabtail -f /var/log/cron # 查看crontab执行日志 脚本 使用set指令能设置所使用shell的执行方式，可依照不同的需求来做设置 -a 标示已修改的变量，以供输出至环境变量。 -b 使被中止的后台程序立刻回报执行状态。 -C 所产生的文件无法覆盖已存在的文件。 -d Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。 -e 若指令传回值不等于0，则立即退出shell。 -o pipefail 管道失败也跳出 -f 取消使用通配符。 -m 使用监视模式。 -t 执行完随后的指令，即退出shell。 -u 当执行时使用到未定义过的变量，则显示错误信息。 -v 显示shell所读取的输入值。 -x 执行指令后，会先显示该指令及所下的参数。 +&lt;参数&gt; 取消某个set曾启动的参数。 也可以通过bash传入set参数，如bash -euxo pipefail script.sh]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VIM实用技巧]]></title>
    <url>%2F2019%2F05%2F09%2FLinux%2FVIM%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[VIM实用技巧I：在当前光标所在行的行首，转换为输入模式 可以用于快速添加注释 A：在当前光标所在行的行尾，转换为输入模式 可以用于快速添加新内容 D：可以删除当前位置到行末的内容，C：可以删除当前位置到行末的内容并修改 c: 用法同d命令 删除行并编辑该行 #：向上查找光标所在的单词 *：向下查找光标所在的单词 %：查找闭合标点 e: 跳至当前或下一个单词的词尾 撤消最近一次撤消操作：Ctrl+r U：撤销一整行的修改 .(点号)重复前一次编辑操作 在窗口间切换光标：Ctrl+w, ARROW 方便记忆：w——window 与SHELL交互:! COMMAND q：可以录制宏 :w !sudo tee % 没有sudo情况下调用sudo保存 https://www.ibm.com/developerworks/cn/linux/l-cn-vimcolumn/ VIM纵向编辑技巧 ctrl-v 进入纵向编辑模式选择要编辑的地方 r(当前) I（向前）A（向后）修改 ESC退出才会应用 V：按矩形选取 选择整行 ， 可以用于方便缩进操作 Ctrl + O 跳转到光标前一次位置 Ctrl + I 跳转到光标后一次位置]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VIM基础练习]]></title>
    <url>%2F2019%2F05%2F09%2FLinux%2FVIM%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[VIM基础练习在学习vim的过程中，找了一些关于如何学习vim的文章来看，个人感觉 跟我一起学习VIM - The Life Changing Editor 写得非常好，给了我很多的帮助，文中提到的vim大冒险 是一个通过娱乐的方式学习vim使用的页面游戏，非常有意思，可惜的是现在只有前3关是免费的，并且后面的关卡收费略高。 vim-adventures（VIM大冒险）的截图 当然，土豪可以买来玩玩，还是很不错的（虽然我只是玩过免费的前3关）。反正我觉得还是使用linux自带的vimtutor比较经济实惠，毕竟是免费的，直接在CLI输入vimtutor就可以了。 这个自带的教程对于vim入门学习很不错，但是全是英文的，英文不好的看起来多多少少会有点吃力（毕竟现在是学vim，不是学英文，英文不好的就量力而行了。），但是莫慌，网上也有vimtutor的中文版：VimTutor中文版。 为了便于练习，我在VimTutor中文版的基础上，我进行了一些修改，把多余的解释性话语删掉，添加了一点点新的内容，自己编写了一些小练习，提高练习的效率。当然，修改的过程也是完全在vim中进行的，同时也锻炼了自己对vim的使用。 下面是我修改后的vim练习，如果有需要就自行复制到vim中。这里只是vim最最常用的部分指令，多练习几遍就可以较为熟悉了。（注意，这只是vim部分常用指令的练习，解释、介绍性的语句已经被我删除，请学习了基本的命令，再进行练习。） 第一讲第一节∶移动光标00000000000000000000000000000000000000000000000000000000000000000*000*000000*0000*0000000 0000*00*00000 00000*00000* 0000 000 0 00 0000000 0000 00 00000 000000000000 0000 000000 0 000 000 00000000 00000 000000 0* 0 0 000000000000 000 00000000 00 000000000000 00000 0000 0 0 00* 00 00 0 0 00 000000000 00000 00000 0 0 000000000 00 00 0 000000 00 000000000 00000 00000 00000 0 00 00* 00 00 0 0 00 0* 00 *0 00000 00 00000 00 00000 000 000000000 000000000000 00 0000000000 00000 000 00 000 000 000000000 000000000000 00 00000 000 000000 000 00000000 0000*000000000 000 0000000 00000 000 0* 00 000 0000 000 0000 000000000 000 00 00 00000 000 000 00 000 0000 000 0000000 00000000 000 00 0 00 000 000 00 0000 000000 00000 0000 00*0 000000000000 000 00000000000 000 00000 000000 000000000 0000 000000000000 000 00000000000 000 0000000 000000000 0000000 000 000000 00000000000000000 000000000000 00000000 000000000 000000000 000 *0000000 0000 0000000000000000000000000000 0000 0000* 0 000 00 0000 00000000000000000000000 0000 0000000 0 000 0000000000 000000000 000000000000000000000000000 start 0000000000000000000000000000000000000000000000000000000000*00000000000000000000000000000000---&gt;迷宫小游戏：把光标移动到---&gt;处，向上搜索*号(?*),此时迷宫中的*应该会被着色，如果没有，请按输入:set hlsearch 高亮搜索结果然后从start下面的*开始，使用hjkl在空格中移动，把迷宫中所有的*替换(r)成空格。（输入:set nohlsearch可以关闭搜索高亮）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第一讲第二节∶VIM的进入和退出 末行模式关闭文件 :q 退出 :wq 保存并退出 :q! 不保存并退出 :w 保存 :w! 强行保存 :wq 相当于 :x 编辑模式下退出 ZZ: 保存并退出~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第一讲第三节∶文本编辑之删除 ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。**参照下面的句子修改上面的句子，使上下一致：(配合w、e、0、$、b、B等移动指令来移动光标，提高速度)Great miinds haave purrpose, oothers havee wisshes.Great minds have purpose, others have wishes.If you fiind aa path wiith noo obsttaclles, it prrobabbly dooesn’t leead annywhere.If you find a path with no obstacles, it probably doesn’t lead anywhere.Sommmetimes yoour pllans don’t wwwork out bbecause God haas betterr ones.Sometimes your plans don’t work out because God has better ones.You caan’t have aa better tomorrow if yyou doon’t sttop thinking aboout yesteerday.You can’t have a better tomorrow if you don’t stop thinking about yesterday. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第一讲第四节∶文本编辑之插入 ** 在正常(Normal)模式下，可以按下 i 键来在光标所在位置插入字符。**参照下面的句子修改上面的句子，使上下一致：((配合w、e、0、$、b、B等移动指令来移动光标，提高速度)Gat mi have pu, others h whes.Great minds have purpose, others have wishes.If y find a p wi no obsta, it pro doesn’t le an.If you find a path with no obstacles, it probably doesn’t lead anywhere.Som your pl don’t work out be God has be ones.Sometimes your plans don’t work out because God has better ones.You can’t h a b tom if you don’t stop thin ab yest.You can’t have a better tomorrow if you don’t stop thinking about yesterday.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第二讲第一节∶删除类命令 ** 输入 dw 可以从光标处删除至一个单字/单词的末尾。** 练习：搜索并删除下列句子中的“”HAHA“”（不区分大小写）Great minds have HAHa purpose, others hAHA have wishes.If you find a path with no HaHA obstacles, it probably HAHA doesn’t lead anywhere.Sometimes HAaA your plans don’t work out because HAHA God has better ones.You can’t have a better HaHA tomorrow if you don’t stop thinking HAhA about yesterday. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第二讲第二节∶其他删除类命令 ** 输入 d$ 从当前光标删除到行末,d^从当前光标到行首** 练习：删除每行中第一个，后的内容，删除后通过撤销恢复原状，然后删除每一行第一个，前的内容。 Somebody typed the end of this line twice, end of this line twice. Great minds have purpose, others have wishes. If you find a path with no obstacles, it probably doesn’t lead anywhere.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第二讲第三节∶关于命令和对象 删除命令 d 的格式如下∶ [number] d object 或者 d [number] object 一个简短的对象列表∶ w - 从当前光标当前位置直到单字/单词末尾，包括空格。 e - 从当前光标当前位置直到单字/单词末尾，但是 *不* 包括空格。 $ - 从当前光标当前位置直到当前行末。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第二讲第四节∶对象命令的特殊情况 ** 输入 dd 可以删除整一个当前行。 ** 1. 请将光标移动到本节中下面的短句段落中的第二行。 2. 输入 dd 删除该行。 3. 然后移动到第四行。 4. 接着输入 2dd 删除两行。 1) Roses are red, 2) Mud is fun, 3) Violets are blue, 4) I have a car, 5) Clocks tell time, 6) Sugar is sweet 7) And so are you.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第二讲第五节∶撤消类命令 ** 输入 u 来撤消最后执行的命令，输入 U 来修正整行,CTRL-R撤销掉撤销动作** 练习：修正句子中的错误，修正好后使用U来恢复一整行。---&gt; Fiix the errors oon thhis line and reeplace them witth undo.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第三讲第一节∶置入类命令 ** 输入 p 将最后一次删除的内容置入光标之后 ** 将所有的行依序放置到正确的位置上。 d) Can you learn too? b) Violets are blue, c) Intelligence is learned, a) Roses are red,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第三讲第二节∶替换类命令 请练习第一讲第一节 r:替换单字符 R:进入替换模式 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第三讲第三节∶更改类命令 ** 要改变一个单字/单词的部分或者全部，请输入 cw ** 练习：修正下列错误---&gt; This lubw has a few wptfd that mrrf changing usf the change command.---&gt; This line has a few words that need changing using the change command. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第三讲第四节∶使用c指令的其他更改类命令 ** 更改类指令可以使用同删除类命令所使用的对象参数。** cc剪切一行并进入编辑模式 练习：使用 c$ 使得该行剩下的部分更正得同第二行一样。---&gt; The end of this line needs some help to make it like the second.---&gt; The end of this line needs to be corrected using the c$ command.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第四讲第一节∶定位及文件状态 vim +# :打开文件，并定位于第#行 vim + :打开文件，定位至最后一行 vim +/PATTERN :打开文件，定位至第一次被PATTERN匹配到的行的行首 #G:跳转至第#行 G:最后一行 gg:第一行 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第四讲第二节∶搜索类命令 ** 输入 / 以及尾随的字符串可以用以在当前文件中查找该字符串。 输入？向上查找** 练习：找出errroor，并改为error。---&gt; When the search reaches the end of the file it will continue at the start. "errroor" is not the way to spell error; errroor is an error. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第四讲第三节∶配对括号的查找 ** 按 % 可以查找配对的括号 )、]、&#125;。**---&gt; This ( is a test line with ('s, ['s ] and &#123;'s &#125; in it. ))~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第四讲第四节∶修正错误的方法之一 ** 输入 :s/old/new/g 可以替换 old 为 new。** 练习：把thee替换为HEHE---&gt; the best time to see thee flowers is in thee spring. 要替换两行之间出现的每个匹配串，请输入 :#,#s/old/new/g (#,#代表的是 两行的行号)。输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第五讲第一节∶在 VIM 内执行外部命令的方法 ** 输入 :! 然后紧随著输入一个外部命令可以执行该外部命令。** 练习： :!dir :!ls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第五讲第二节∶关于保存文件的更多信息 ** 要将对文件的改动保存到文件中，请输入 :w FILENAME 。** 练习：把当前文件另存为VIMTEST到家目录。并通过在VIM内执行外部命令删除它。 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第五讲第三节∶一个具有选择性的保存命令 ** 要保存文件的部分内容，请输入 :#,# w FILENAME ** 练习：把当前文件的40-50行保存到家目录的VIMTEST，并且通过在VIM内执行外部部命令cat该文件。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第五讲第四节∶提取和合并文件 ** 要向当前文件中插入另外的文件的内容，请输入 :r FILENAME ** 练习：把第五讲第三节的VIMTEST文件插入到该行的下一行,并删除VIMTEST。 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第六讲第一节∶打开类命令 ** 输入 o 将在光标的下方打开新的一行并进入插入模式。** 练习：在下面的句子上/下一行前面插入“”Hello World！“” Open up a line above this by typing Shift-O while the cursor is on this line. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第六讲第二节∶光标后插入类命令 ** 输入 a 将可在光标之后插入文本。 **---&gt; This line will allow you to practice---&gt; This line will allow you to practice appending text to the end of a line. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 第六讲第三节∶另外一个置换类命令的版本 ** 输入大写的 R 可连续替换多个字符。**---&gt; To make the first line the same as the last on this page use the keys.---&gt; To make the first line the same as the second, type R and the new text.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 翻页操作 Ctrl+f: 向下翻一屏 Ctrl+b: 向上翻一屏 Ctrl+d: 向下翻半屏 Ctrl+u: 向上翻半屏 练习：通过翻页操作，把第100行、200行、300行复制到该行下面。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql基础练习]]></title>
    <url>%2F2019%2F05%2F09%2FMysql%2FMysql%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[#登录和退出数据库mysql -u root -p #输入密码 -P指定端口，-D指定数据库 ，--prompt 修改提示符exit #quit，\qmysql -u root -pSELECT VERSION();SELECT NOW();SHOW ENGINES;SHOW VARIABLES LIKE 'have%'; #查看存储引擎信息SHOW VARIABLES LIKE 'storage_engine'; #查看默认存储引擎SHOW WARNINGS \G;#数据库创建，删除，进入数据库SHOW DATABASES;DROP DATABASE IF EXISTS `testdatabase`;CREATE DATABASE IF NOT EXISTS `testdatabase` DEFAULT CHARACTER SET = 'utf8';ALTER DATABASE testdatabase CHARACTER SET = 'utf8';SHOW CREATE DATABASE `testdatabase`;USE testdatabase; #这里不应该使用 `XX` 括住名称SELECT USER();SELECT DATABASE();SHOW TABLES; #注释符号help 'SELECT';help 'INT';help '+';#表的创建和删除，创建表同时设置属性CREATE TABLE IF NOT EXISTS testestable(id INT ZEROFILL PRIMARY KEY AUTO_INCREMENT,name VARCHAR(20) UNIQUE, #检索效率 CHAR&gt;VARCHAR&gt;TEXT age TINYINT UNSIGNED NOT NULL,brithday DATE, #1000-01-01~9999-12-31 3个字节 sex TINYINT(1) DEFAULT 0 COMMENT '0代表男,1代表女',address TINYTEXT,married ENUM('是','否','保密'), #最多65535个值 fav_food SET('apple','orange','fish','meat','cake') DEFAULT NULL, #最多64个成员 score DECIMAL(2,2),CHECK(score &gt; 0) ) ENGINE = 'InnoDB' CHARACTER SET = 'utf8';# InnoDB(支持事务、崩溃修复、并发控制，适合频繁更新删除)# MyISAM(适合对数据的存储和读取，空间使用比较低)、# MEMORY(速度快、安全性差)SHOW CREATE TABLE testestable \G;DESC testestable;SHOW FULL COLUMNS FROM testestable \G;SHOW TABLES;DROP TABLE testestable;#key键： #主键：唯一标识一条记录，不能有重复的，不允许为空,用来保证数据完整性CREATE TABLE IF NOT EXISTS test1(username CHAR(20),password CHAR(20),PRIMARY KEY(username));#外键：外键是另一表的主键, 一个表可以有多个外键, 可以是空值,用来和其他表建立联系用的 #外键连接必须连接的是主表的主键，如果连接主表主键的一部分，必须连接主键的第一个字段 #外键关联的主从表字段数据类型必须完全一样CREATE TABLE IF NOT EXISTS test2(id INT PRIMARY KEY AUTO_INCREMENT,username CHAR(20),level TINYINT UNSIGNED #CONSTRAINT uname FOREIGN KEY(username) REFERENCES test1(username));#修改表： #修改表名ALTER TABLE test1 RENAME temp;SHOW TABLES;DESC temp;ALTER TABLE temp RENAME TO test1;#修改表属性数据类型DESC test1;ALTER TABLE test1 MODIFY password VARCHAR(50);DESC test1;INSERT test1 VALUES('FreezeJ','123456');SELECT * FROM test1;#ALTER TABLE test1 MODIFY username int; #有值的情况下转换字段类型失败，因为字符串类型无法自动转型为整数类型SHOW WARNINGS LIMIT 1; #查看第一条错误DELETE FROM test1; #删除表中所有元素SELECT * FROM test1;ALTER TABLE test1 MODIFY username int;DESC test1;ALTER TABLE test1 MODIFY username CHAR(10);#修改表属性ALTER TABLE test1 CHANGE password passwd CHAR(20);#增加字段DESC test1;ALTER TABLE test1 ADD sex TINYINT(1) NOT NULL after passwd;#删除字段ALTER TABLE test1 DROP sex; #删除字段会直接删除，不管有没有内容，也不会要求确认 #修改属性排列顺序ALTER TABLE test1 MODIFY username CHAR(10) AFTER passwd; #会修改username的类型ALTER TABLE test1 MODIFY username CHAR(10) FIRST;#索引： #创建带索引的数据库表CREATE TABLE IF NOT EXISTS test3(id INTEGER PRIMARY KEY AUTO_INCREMENT,name VARCHAR(10) NOT NULL,age TINYINT UNSIGNED DEFAULT 18,UNIQUE INDEX index_id(id)); #唯一索引，唯一索引指的是被索引的字段值唯一SHOW CREATE TABLE test3 \G;#在已存在表上添加索引#create [unique|fulltext|spatial] index indexname on tablename (columnname [(length)] [ASC|DESC]); #Alter语句添加索引 #Alter table tablename add [unique|fulltext|spatial] index indexname (columename [(length)] [ASC|DESC]);CREATE INDEX index_username ON test1(username);ALTER TABLE test1 ADD INDEX index_passwd(passwd);#查看索引SHOW INDEX FROM test1 \G;#删除索引DROP INDEX index_username ON test1;ALTER TABLE test1 DROP INDEX index_passwd;CREATE TABLE student(id INTEGER UNSIGNED PRIMARY KEY AUTO_INCREMENT,name CHAR(20) NOT NULL,num INTEGER UNSIGNED UNIQUE NOT NULL,age TINYINT UNSIGNED NOT NULL,sex TINYINT(1) DEFAULT 0,address CHAR(50),room CHAR(5),class TINYINT);CREATE TABLE teacher(id INTEGER UNSIGNED PRIMARY KEY AUTO_INCREMENT,name CHAR(20) NOT NULL,sex TINYINT(1) DEFAULT 1 COMMENT '1代表女',teach_class TINYINT DEFAULT NULL);#插入INSERT INTO student VALUES(1,'DRJ', 11, 21, 0, 'AAAA', '6-208', 1);INSERT INTO student VALUES(2,'LYC', 10, 20, 0, 'AAAA', '6-210', 2);INSERT INTO student VALUES(3,'LZY', 25, 23, 0, 'BBBB', '6-208', 3);INSERT INTO student VALUES(4,'WJX', 5, 21, 0, 'CCCC', '6-207', 1);INSERT INTO student VALUES(5,'YJH', 29, 21, 0, 'DDDD', '6-208', 1);INSERT INTO student VALUES(6,'WL', 33, 21, 0, 'CCCC', '6-208', 5);INSERT INTO teacher VALUES(1,'YYY', 1, 2);INSERT INTO teacher VALUES(2,'QQQ', 2, 3);INSERT INTO teacher VALUES(3,'WWW', 1, 1);INSERT INTO teacher VALUES(4,'EEE', 2, 3);INSERT INTO teacher VALUES(5,'RRR', 1, 4);#更改属性ALTER TABLE student MODIFY sex TINYINT(1) COMMENT '0代表男';#更新属性UPDATE student SET name = 'ZXB', num = 27 WHERE id = 4;#删除属性DELETE FROM student WHERE name = 'WL';INSERT INTO student VALUES(6,'WL', 33, 21, 0, 'CCCC', '6-208', 5);#常用查询语句SELECT name, address FROM student WHERE room LIKE '__208' ORDER BY age DESC;SELECT name, room FROM student GROUP BY room;SELECT name FROM student WHERE age = (SELECT age FROM student ORDER BY age DESC LIMIT 1);SELECT name AS '宿舍成员' FROM student GROUP BY room;SELECT DISTINCT age AS '年龄分布' FROM student ORDER BY age;SELECT student.name AS '学生名字',student.class AS '班级', teacher.name AS '老师姓名'FROM student JOIN teacherON student.class = teacher.teach_class;SELECT name FROM studentUNION #UNION自动去重复，UNION ALL可以不去重复SELECT name FROM teacher;#聚集函数#AVG() - 返回平均值#COUNT() - 返回行数#FIRST() - 返回第一个记录的值#LAST() - 返回最后一个记录的值#MAX() - 返回最大值#MIN() - 返回最小值#SUM() - 返回总和SELECT count(*) AS '总人数' FROM student;CREATE VIEW view_room ASSELECT name, roomFROM studentWHERE room = '6-208';SHOW TABLES;SELECT * FROM view_room;INSERT INTO student VALUES (7,'WJZ', 17, 21, 0, 'GGGG', '6-208', 5);SELECT * FROM view_room;]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PEP8整理以及注意点]]></title>
    <url>%2F2019%2F05%2F09%2FOther%2FPEP8%E6%95%B4%E7%90%86%E4%BB%A5%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9%2F</url>
    <content type="text"><![CDATA[PEP8整理以及注意点 使用PEP8要求代码风格，使代码更加统一整洁。 基本要求变量常量大写加下划线： USER_CONSTANT PI START_TIME 私有变量小写和一个前导下划线： _private_value _money _rate 内置变量小写，两个前导下划线和两个后置下划线： __class__ __name__ __doc__ 方法私有方法小写和一个前导下划线： def _secrete(self): def _print_name(self): def _save_time(self): 特殊方法小写和两个前置下划线，两个后置下划线： def __add__(self): def __init__(self): def __del__(self): 函数参数小写和下划线，缺省值等号两边没有空格: def connect(self, user=None): def save_time(self, time_now=0) ——&gt;（注意，尽量不要把可变值设置为默认参数，即time_now=time.time()或者start_list=[]） 类类总是使用大驼峰命名格式，常见的一个方法是使用表示其类型或者特性的后缀 基类可以使用一个Base或Abstract前缀： BaseCookie(object) AbstractCookie(object) 模块不带下划线的小写字母，若是实现协议的模块，通常使用lib后缀 import os import sys import time 参数 不要使用断言来实现静态类型检测 不要滥用*args和**kwargs 使用has或is前缀命名布尔元素 is_connect = True has_member = False 使用复数形式命名序列 members = [‘user_1’,’user_2’] 避免通用名称和现有名称 如：list、dict、sequence、element 还有os、sys、time等 代码长度一个函数不要超过30行代码 一个类不要超过200行代码，不要超过10个方法 一个模块不要超过500行代码 辅助工具验证脚本是否符合pep8： 可以安装一个 pep8 脚本用于验证你的代码风格是否符合 PEP8。 >&gt;easy_install pep8 >&gt;pep8 -r –ignoire E501 Test.py 这个命令行的意思是，重复打出错误，并且忽略 501 错误(代码超过 79 行)。 yapf自动规范Python代码的脚本 pylint Python代码规范化分析工具]]></content>
      <tags>
        <tag>Other</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[YAML语法]]></title>
    <url>%2F2019%2F05%2F09%2FOther%2FYAML%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[YAML语法 很多地方都会使用YAML作为配置文件，如filebeat配置、Ansible、Salt等，本文整理了YAML的部分语法，作为参考，方便查阅。 转自http://www.ruanyifeng.com/blog/2016/07/yaml.html，略有补充和修改。 YAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 YAML 还有一个小的怪癖. 所有的 YAML 文件(无论和 Ansible 有没有关系)开始行都应该是 —. 这是 YAML 格式的一部分, 表明一个文件的开始. 基本语法 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 # 表示注释，从这个字符一直到行尾，都会被解析器忽略。 数据结构YAML 支持的数据结构有三种: 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） 纯量（scalars）：单个的、不可再分的值 对象注意对象后面没有引号，有引号为字符串 animal : pets Yaml 也允许另一种写法，将所有键值对写成一个行内对象。 hash: { name: Steve, foo: bar } 字典也可以使用缩进形式来表示, 如果你喜欢这样的话: # 一位职工的记录 {name: Example Developer, job: Developer, skill: Elite} 数组一组连词线开头的行，构成一个数组。 - Cat - Dog - Goldfish 数组也可以采用行内表示法。 animal: [Cat, Dog] 复合结构languages: - Ruby - Perl - Python websites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org 对应： &#123; languages: [ 'Ruby', 'Perl', 'Python' ], websites: &#123; YAML: 'yaml.org', Ruby: 'ruby-lang.org', Python: 'python.org', Perl: 'use.perl.org' &#125;&#125; 注意：左对齐的都是同一层级的，不是单独的。 纯量纯量是最基本的、不可再分的值。 纯量包括： 字符串 布尔值 isSet: true 整数 number: 12 浮点数 number: 12.30 Null null用~表示：parent: ~ 时间 时间采用 ISO8601 格式：iso8601: 2001-12-14t21:59:43.10-05:00 日期 日期采用复合 iso8601 格式的年、月、日表示：date: 1976-07-31 YAML 允许使用两个感叹号，强制转换数据类型。 e: !!str 123 f: !!str true 字符串单引号之中如果还有单引号，必须连续使用两个单引号转义。 str: ‘labor’’s day’ 多行字符串可以使用 | 保留换行符，也可以使用 &gt; 折叠换行。 this: | Foo Barthat: &gt; Foo Bar 结果： { this: &#39;Foo\nBar\n&#39;, that: &#39;Foo Bar\n&#39; } +表示保留文字块末尾的换行，-表示删除字符串末尾的换行。 s1: | Foos2: |+ Foos3: |- Foo 结果： { s1: ‘Foo\n’, s2: ‘Foo\n\n\n’, s3: ‘Foo’ } &amp;用来建立锚点（defaults），&lt;&lt;表示合并到当前数据，*用来引用锚点。 defaults: &amp;defaults adapter: postgres host: localhostdevelopment: database: myapp_development &lt;&lt;: *defaultstest: database: myapp_test &lt;&lt;: *defaults 等同于： defaults: adapter: postgres host: localhostdevelopment: database: myapp_development adapter: postgres # 这里使用default替换并插入 host: localhosttest: database: myapp_test adapter: postgres # 这里使用default替换并插入 host: localhost]]></content>
      <tags>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell语法整理]]></title>
    <url>%2F2019%2F05%2F09%2FLinux%2FShell%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[shell语法整理 Shell语法有很多技巧和不同的使用方法，本文对常用的一些语法、技巧进行整理，便于查阅。 语法整理路径操作 dirname：获取目录 basename：获取文件名 realpath：获取完整路径（对于不同系统，不一定有这个命令） “”和’’与 `` 在shell变量中的区别（双引、单引、反引）: 双引：允许通过$符引用其他变量 单引：禁止引用其他变量符，视为普通字符 反引：将命令执行的结果输出给变量 条件测试类型 整数测试 字符测试 文件测试 条件测试的表达式 [ expression ] 空格不能省略 命令测试法（一个中括号是bash的命令），有时候不好使。 [[ expression ]] 关键字测试法（两个中括号是bash的关键字），推荐使用这种表达式。 test expression 整数比较 -eq: 测试两个整数是否相等；比如 $A -eq $B -ne: 测试两个整数是否不等；不等，为真；相等，为假； not equal -gt: 测试一个数是否大于另一个数；大于，为真；否则，为假； -lt: 测试一个数是否小于另一个数；小于，为真；否则，为假； -ge: 大于或等于 -le：小于或等于 字符测试 ==：测试是否相等，相等为真，不等为假 !=: 测试是否不等，不等为真，等为假 =~: 测试包含关系，包含为真 > （在ASCII码表中的先后顺序，从左至右逐字比较）使用[[，在[中使用不靠谱 &lt; -n string: 测试指定字符串是否为空，空则真，不空则假 -z string: 测试指定字符串是否不空，不空为真，空则为假 文件测试 -e FILE：测试文件是否存在 -f FILE: 测试文件是否为普通文件 -d FILE: 测试指定路径是否为目录 -r FILE: 测试当前用户对指定文件是否有读取权限； -w 是否可写 -x 是否可执行 [ -e /etc/inittab ] # 判断/etc/inittab是否存在[ -x /etc/rc.d/rc.sysinit ] # 判断/etc/rc.d/rc.sysinit是否有执行权限[ ! -e /etc/inittab ] # 取反 组合调试条件 -a：与 -o：或 ！：非 如：if [ $# -gt 1 -a $# -le 3 ] # 参数个数大于1小于等于3或者if [ $# -gt 1 ] &amp;&amp; [ $# -le 3 ] 命令的间逻辑关系：短路与或短路与： &amp;&amp; 第一个条件为假时，第二条件不用再判断，最终结果已经有； 第一个条件为真时，第二条件必须得判断； 短路或： || 逻辑是从左到右全部判断 短路是能判断结果就停止 算术运算A=3B=6 let 算术运算表达式let C=$A+$B $[算术运算表达式]C=$[$A+$B] $((算术运算表达式))C=$(($A+$B)) expr 算术运算表达式，表达式中各操作数及运算符之间要有空格，而且要使用命令引用C=`expr \$A + \$B` 圆整：丢弃小数点后的内容，不是四舍五入 bash变量的类型 本地变量(局部变量) 环境变量 位置变量: $0：脚本名 $1, $2, ... shift 踢掉第一个参数，第二个变成第一个，第三个变成第二个，以此类推 shift x 表示踢掉几个 特殊变量：$?：退出状态码 $#：参数的个数 $*：参数列表(如果使用引号括起来，对于&quot;$*&quot;来说，参数会合并到一起形成一份数据) $@：参数列表 if判断语句if condition; then statementselif condition; then statementselse statementsfi case判断语句case $var in pattern1) command ;; pattern2) command ;; *) command ;;esac # 每个分支使用两个分号结束，结尾以esac结束 循环语句while循环和for循环属于“当型循环”，而until属于“直到型循环”。 # for循环a=(a b c d e f) # a为一个数组for x in $a; do echo $xdonefor x in &#123;1..9&#125;;do echo $xdonefor x in `seq 10`; do echo $x; done# 创建选择菜单，无限循环select a in 1 2 3 4 5 6 7; do echo you choice $adone# while循环while true; do 语句done# until循环i=0 until [[ "$i" -gt 5 ]] #直到大于5 do let "square=i*i" echo "$i * $i = $square" let "i++" done 文件操作f=/home/config.iniwhile read -r b; do echo $b+'dada'; done &lt; "$f" #一行一行读取文件while read b; do echo $b+'dada'; done &lt; $fwhile read b; do echo "your input is $b"; done #读入键入的内容cat 1.txt |while read line; do echo $line; done #读取文件for x in `cat 1.txt`; do echo $x; done #按空格和回车读取文件yes | rm -i * # 自动回答y或者其他 比如yes good，自动回答good 函数# 定义一个函数的两种方式：function FUNCNAME &#123; command&#125;FUNCNAME() &#123; command&#125;# 调用方式：FUNCNAME# 自定义执行状态返回值：return x # x的范围为0-255# 接受参数的函数：./a.sh m n $1: m$2: n$#: 2 字符串操作 参考https://www.cnblogs.com/gaochsh/p/6901809.html 技巧整理执行一个命令，但不保存在命令历史记录中 &lt;space&gt;command 使用空格开头不会记录历史 hash 查看命令缓存 centos6还可以查看命令命中次数 sh -v install.sh #查看执行的代码 sh -n install.sh #语法检查，没有错误不显示内容]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2019%2F05%2F01%2FLinux%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux常用命令 转自博客http://www.cnblogs.com/bindong/p/5789502.html，并做了部分补充、修改和整理，侵删。 序言Linux提供了大量的命令，利用它可以有效地完成大量的工作，如磁盘操作、文件存取、目录操作、进程管理、文件权限设定等。所以，在Linux系统上工作离不开使用系统提供的命令。要想真正理解Linux系统，就必须从Linux命令学起，通过基础的命令学习可以进一步理解Linux系统。 不同Linux发行版的命令数量不一样，但Linux发行版本最少的命令也有200多个。这里笔者把比较重要和使用频率最多的命令，按照它们在系统中的作用分成下面六个部分一一介绍。 安装和登录命令：login、shutdown、halt、reboot、install、mount、umount、chsh、exit、last； 文件处理命令：file、mkdir、grep、dd、find、mv、ls、diff、cat、ln； 系统管理相关命令：df、top、free、at、lp、adduser、groupadd、kill、crontab； 网络操作命令：ifconfig、ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、 nslookup； 系统安全相关命令：passwd、su、umask、chgrp、chmod、chown、chattr、sudo ps、who； 其它命令：tar、unzip、gunzip、unarj、mtools、man、unendcode、uudecode。 本文以Mandrake Linux 9.1(Kenrel 2.4.21)为例，介绍Linux下的安装和登录命令。 安装与登陆命令login1.作用 login的作用是登录系统，它的使用权限是所有用户。 2.格式 login [name][－p ][－h 主机名称] 3.主要参数 －p:通知login保持现在的环境参数。 －h:用来向远程登录的之间传输用户名。 如果选择用命令行模式登录Linux的话，那么看到的第一个Linux命令就是login：。 一般界面是这样的： Manddrake Linux release 9.1(Bamboo) for i586 renrel 2.4.21－0.13mdk on i686 / tty1 localhost login:root password: 上面代码中，第一行是Linux发行版本号，第二行是内核版本号和登录的虚拟控制台，我们在第三行输入登录名，按“Enter”键在Password后输入账户密码，即可登录系统。出于安全考虑，输入账户密码时字符不会在屏幕上回显，光标也不移动。 登录后会看到下面这个界面（以超级用户为例）： [root@localhost root]# last login:Tue ,Nov 18 10:00:55 on vc/1 上面显示的是登录星期、月、日、时间和使用的虚拟控制台。 4.应用技巧 Linux是一个真正的多用户操作系统，可以同时接受多个用户登录，还允许一个用户进行多次登录。这是因为Linux和许多版本的Unix一样，提供了虚拟控制台的访问方式，允许用户在同一时间从控制台（系统的控制台是与系统直接相连的监视器和键盘）进行多次登录。每个虚拟控制台可以看作是一个独立的工作站，工作台之间可以切换。虚拟控制台的切换可以通过按下Alt键和一个功能键来实现，通常使用F1-F6 。 例如，用户登录后，按一下“Alt+F2”键，用户就可以看到上面出现的“login:”提示符，说明用户看到了第二个虚拟控制台。然后只需按“Alt+F1”键，就可以回到第一个虚拟控制台。一个新安装的Linux系统允许用户使用“Alt+F1”到“Alt+F6”键来访问前六个虚拟控制台。虚拟控制台最有用的是，当一个程序出错造成系统死锁时，可以切换到其它虚拟控制台工作，关闭这个程序。 shutdown1.作用 shutdown命令的作用是关闭计算机，它的使用权限是超级用户。 2.格式 shutdown [－h][－i][－k][－m][－t] 3.重要参数 －t：在改变到其它运行级别之前，告诉init程序多久以后关机。 －k：并不真正关机，只是送警告信号给每位登录者。 －h：关机后关闭电源。 －c：cancel current process取消目前正在执行的关机程序。所以这个选项当然没有时间参数，但是可以输入一个用来解释的讯息，而这信息将会送到每位使用者。 －F：在重启计算机时强迫fsck。 －time：设定关机前的时间。 －m: 将系统改为单用户模式。 －i：关机时显示系统信息。 4.命令说明 shutdown 命令可以安全地将系统关机。有些用户会使用直接断掉电源的方式来关闭Linux系统，这是十分危险的。因为Linux与Windows不同，其后台运行着许多进程，所以强制关机可能会导致进程的数据丢失，使系统处于不稳定的状态，甚至在有的系统中会损坏硬件设备（硬盘）。在系统关机前使用shutdown命令，系统管理员会通知所有登录的用户系统将要关闭，并且login指令会被冻结，即新的用户不能再登录。 halt1.作用 halt命令的作用是关闭系统，它的使用权限是超级用户。 2.格式 halt [－n] [－w] [－d] [－f] [－i] [－p] 3.主要参数说明 －n：防止sync系统调用，它用在用fsck修补根分区之后，以阻止内核用老版本的超级块覆盖修补过的超级块。 －w：并不是真正的重启或关机,只是写wtmp（/var/log/wtmp）纪录。 －f：强迫关机，不呼叫shutdown这个指令。没有调用shutdown，而强制关机或重启。 －i：关机（或重启）前，关掉所有的网络接口。 －p: 当关机的时候顺便做关闭电源的动作。 －d：关闭系统，但不留下纪录。 4.命令说明 halt就是调用shutdown－h。halt执行时，杀死应用进程，执行sync(将存于buffer中的资料强制写入硬盘中)系统调用，文件系统写操作完成后就会停止内核。若系统的运行级别为0或6，则关闭系统；否则以shutdown指令（加上－h参数）来取代。 reboot1.作用 reboot命令的作用是重新启动计算机，它的使用权限是系统管理者。 2.格式 reboot [－n] [－w] [－d] [－f] [－i] 3.主要参数 －n: 在重开机前不做将记忆体资料写回硬盘的动作。 －w: 并不会真的重开机，只是把记录写到/var/log/wtmp文件里。(/var/log/wtmp是一个二进制文件，记录每个用户的登录次数和持续时间等信息，可以用last命令查看) －d: 不把记录写到/var/log/wtmp文件里（－n这个参数包含了－d）。 －i: 在重开机之前先把所有与网络相关的装置停止。 install1.作用 install命令的作用是安装或升级软件或备份数据，它的使用权限是所有用户。与cp命令类似，均可以将文件或目录拷贝到指定的路径；但是install命令可以控制目标文件的属性。 2.格式 (1)install [选项]… 来源 目的地 (2)install [选项]… 来源… 目录 (3)install －d [选项]… 目录… 在前两种格式中，会将复制至或将多个文件复制至已存在的，同时设定权限模式及所有者/所属组。在第三种格式中，会创建所有指定的目录及它们的主目录。长选项必须用的参数在使用短选项时也是必须的。 3.主要参数 –backup[=CONTROL]：为每个已存在的目的地文件进行备份。 －b：类似 –backup，但不接受任何参数。 －c：(此选项不作处理)。 －d，–directory：所有参数都作为目录处理，而且会创建指定目录的所有主目录。 －D：创建前的所有主目录，然后将复制至 ；在第一种使用格式中有用。 －g，–group=组：自行设定所属组，而不是进程目前的所属组。 －m，–mode=模式：自行设定权限模式 (像chmod)，而不是rwxr－xr－x。 －o，–owner=所有者：自行设定所有者 (只适用于超级用户)。 －p，–preserve－timestamps：以文件的访问/修改时间作为相应的目的地文件的时间属性。 －s，–strip：用strip命令删除symbol table，只适用于第一及第二种使用格式。 －S，–suffix=后缀：自行指定备份文件的。 －v，–verbose：处理每个文件/目录时印出名称。 –help：显示此帮助信息并离开。 –version：显示版本信息并离开。 mount1.作用 mount命令的作用是加载文件系统，它的用权限是超级用户或/etc/fstab中允许的使用者。 2.格式 mount －a [－fv] [－t vfstype] [－n] [－rw] [－F] device dir 3.主要参数 －h：显示辅助信息。 －v：显示信息，通常和－f用来除错。 －a：将/etc/fstab中定义的所有文件系统挂上。 －F：这个命令通常和－a一起使用，它会为每一个mount的动作产生一个行程负责执行。在系统需要挂上大量NFS文件系统时可以加快加载的速度。 －f：通常用于除错。它会使mount不执行实际挂上的动作，而是模拟整个挂上的过程，通常会和－v一起使用。 －t vfstype：显示被加载文件系统的类型。 －n：一般而言，mount挂上后会在/etc/mtab中写入一笔资料，在系统中没有可写入文件系统的情况下，可以用这个选项取消这个动作。 4.应用技巧 在Linux和Unix系统上，所有文件都是作为一个大型树（以/为根）的一部分访问的。要访问CD-ROM上的文件，需要将CD-ROM设备挂装在文件树中的某个挂载点。如果发行版安装了自动挂装包，那么这个步骤可自动进行。在Linux中，如果要使用硬盘、光驱等储存设备，就得先将它加载，当储存设备挂上了之后，就可以把它当成一个目录来访问。挂上一个设备使用mount命令。在使用mount这个指令时，至少要先知道下列三种信息：要加载对象的文件系统类型、要加载对象的设备名称及要将设备加载到哪个目录下。 （1）Linux可以识别的文件系统 Windows 95/98常用的FAT 32文件系统：vfat ； Win NT/2000 的文件系统：ntfs ； OS/2用的文件系统：hpfs； Linux用的文件系统：ext2、ext3； CD-ROM光盘用的文件系统：iso9660。 虽然vfat是指FAT 32系统，但事实上它也兼容FAT 16的文件系统类型。 （2）确定设备的名称 在Linux中，设备名称通常都存在/dev里。这些设备名称的命名都是有规则的，可以用“推理”的方式把设备名称找出来。例如，/dev/hda1这个IDE设备，hd是Hard Disk(硬盘)的，sd是SCSI Device，fd是Floppy Device(或是FloppyDisk?)。a代表第一个设备，通常IDE接口可以接上4个IDE设备(比如4块硬盘)。所以要识别IDE硬盘的方法分别就是hda、hdb、hdc、hdd。hda1中的“1”代表hda的第一个硬盘分区(partition)，hda2代表hda的第二主分区，第一个逻辑分区从hda5开始，依此类推。此外，可以直接检查/var/log/messages文件，在该文件中可以找到计算机开机后系统已辨认出来的设备代号。 （3）查找挂接点 在决定将设备挂接之前，先要查看一下计算机是不是有个/mnt的空目录，该目录就是专门用来当作挂载点(Mount Point)的目录。建议在/mnt里建几个/mnt/cdrom、/mnt/floppy、/mnt/mo等目录，当作目录的专用挂载点。举例而言，如要挂载下列5个设备，其执行指令可能如下 (假设都是Linux的ext2系统，如果是Windows XX请将ext2改成vfat)： 软盘 ===&gt;mount －t ext2 /dev/fd0 /mnt/floppy cdrom ===&gt;mount －t iso9660 /dev/hdc /mnt/cdrom SCSI cdrom ===&gt;mount －t iso9660 /dev/sdb /mnt/scdrom SCSI cdr ===&gt;mount －t iso9660 /dev/sdc /mnt/scdr 不过目前大多数较新的Linux发行版本（包括红旗 Linux、中软Linux、Mandrake Linux等）都可以自动挂装文件系统，但Red Hat Linux除外。 umount1.作用 umount命令的作用是卸载一个文件系统，它的使用权限是超级用户或/etc/fstab中允许的使用者。 2.格式 unmount －a [－fFnrsvw] [－t vfstype] [－n] [－rw] [－F] device dir 3.使用说明 umount 命令是mount命令的逆操作，它的参数和使用方法和mount命令是一样的。Linux挂装CD-ROM后，会锁定CD—ROM，这样就不能用CD-ROM面板上的Eject按钮弹出它。但是，当不再需要光盘时，如果已将/cdrom作为符号链接，请使用umount/cdrom来卸装它。仅当无用户正在使用光盘时，该命令才会成功。该命令包括了将带有当前工作目录当作该光盘中的目录的终端窗口。 chsh1.作用 chsh命令的作用是更改使用者shell设定，它的使用权限是所有使用者。 2.格式 chsh [ －s ] [ －list] [ –help ] [ －v ] [ username ] 3.主要参数 －l：显示系统所有Shell类型。 －v：显示Shell版本号。 4.应用技巧 前面介绍了Linux下有多种Shell，一般缺省的是Bash，如果想更换Shell类型可以使用chsh命令。先输入账户密码，然后输入新Shell类型，如果操作正确系统会显示“Shell change”。其界面一般如下： Changing fihanging shell for cao Password: New shell [/bin/bash]: /bin/tcsh 上面代码中，[ ]内是目前使用的Shell。普通用户只能修改自己的Shell，超级用户可以修改全体用户的Shell。要想查询系统提供哪些Shell，可以使用chsh -l 命令。 exit1.作用 exit命令的作用是退出系统，它的使用权限是所有用户。 2.格式 exit 3.参数 exit命令没有参数，运行后退出系统进入登录界面。 last1.作用 last命令的作用是显示近期用户或终端的登录情况，它的使用权限是所有用户。通过last命令查看该程序的log，管理员可以获知谁曾经或企图连接系统。 2.格式 last [-n] [－f file] [－t tty] [-h 节点] [－i IP][-1][－y][ID] 3.主要参数 －n：指定输出记录的条数。 －f file：指定用文件file作为查询用的log文件。 －t tty：只显示指定的虚拟控制台上登录情况。 －h 节点：只显示指定的节点上的登录情况。 －i IP：只显示指定的IP上登录的情况。 －1：用IP来显示远端地址。 －y：显示记录的年、月、日。 －ID：知道查询的用户名。 －x:显示系统关闭、用户登录和退出的历史。 动手练习 上面介绍了Linux安装和登录命令，下面介绍几个实例，动手练习一下刚才讲过的命令。 1.一次运行多个命令 在一个命令行中可以执行多个命令，用分号将各个命令隔开即可，例如： ＃last －x；halt 上面代码表示在显示系统关闭、用户登录和退出的历史后关闭计算机。 2.利用mount挂装文件系统访问Windows系统 许多Linux发行版本现在都可以自动加载Vfat分区来访问Windows系统，而Red Hat各个版本都没有自动加载Vfat分区，因此还需要进行手工操作。 mount可以将Windows分区作为Linux的一个“文件”挂接到Linux的一个空文件夹下，从而将Windows的分区和/mnt这个目录联系起来。因此，只要访问这个文件夹就相当于访问该分区了。首先要在/mnt下建立winc文件夹，在命令提示符下输入下面命令： ＃mount -t vfat /dev/hda1 /mnt/winc 即表示将Windows的C分区挂到Liunx的/mnt/winc目录下。这时，在/mnt/winc目录下就可以看到Windows中C盘的内容了。使用类似的方法可以访问Windows系统的D、E盘。在Linux系统显示Windows的分区一般顺序这样的：hda1为C盘、hda5为D盘、hda6为E盘……以此类推。上述方法可以查看Windows系统有一个很大的问题，就是Windows中的所有中文文件名或文件夹名全部显示为问号“？”，而英文却可以正常显示。我们可以通过加入一些参数让它显示中文。还以上面的操作为例，此时输入命令： ＃mount -t vfat -o iocharset=cp936 /dev/hda1 /mnt/winc 现在它就可以正常显示中文了。 3.使用mount加挂闪盘上的文件系统 在Linux下使用闪盘非常简单。Linux对USB设备有很好的支持，当插入闪盘后，闪盘被识别为一个SCSI盘，通常输入以下命令： ＃ mount /dev/sda1 /usb 就能够加挂闪盘上的文件系统。 小知识Linux命令与Shell 所谓Shell，就是命令解释程序，它提供了程序设计接口，可以使用程序来编程。学习Shell对于Linux初学者理解Linux系统是非常重要的。 Linux系统的Shell作为操作系统的外壳，为用户提供了使用操作系统的接口。Shell是命令语言、命令解释程序及程序设计语言的统称，是用户和Linux内核之间的接口程序。如果把Linux内核想象成一个球体的中心，Shell就是围绕内核的外层。当从Shell或其它程序向Linux传递命令时，内核会做出相应的反应。Shell在Linux系统的作用和MS DOS下的COMMAND.COM和Windows 95/98 的explorer.exe相似。Shell虽然不是系统核心的一部分，只是系统核心的一个外延，但它能够调用系统内核的大部分功能。因此，可以说Shell是Unux/Linux最重要的实用程序。 Linux中的Shell有多种类型，其中最常用的是Bourne Shell(sh)、C Shell(csh)和Korn Shell(ksh)。大多数Linux发行版本缺省的Shell是Bourne Again Shell，它是Bourne Shell的扩展，简称bash，与Bourne Shell完全向后兼容，并且在Bourne Shell的基础上增加了很多特性。bash放在/bin/bash中，可以提供如命令补全、命令编辑和命令历史表等功能。它还包含了很多C Shell和Korn Shell中的优点，有灵活和强大的编程接口，同时又有很友好的用户界面。Linux系统中200多个命令中有40个是bash的内部命令，主要包括exit、less、lp、kill、 cd、pwd、fc、fg等。 文件处理命令Linux系统信息存放在文件里，文件与普通的公务文件类似。每个文件都有自己的名字、内容、存放地址及其它一些管理信息，如文件的用户、文件的大小等。文件可以是一封信、一个通讯录，或者是程序的源语句、程序的数据，甚至可以包括可执行的程序和其它非正文内容。 Linux文件系统具有良好的结构，系统提供了很多文件处理程序。这里主要介绍常用的文件处理命令。 file1.作用 file通过探测文件内容判断文件类型，使用权限是所有用户。 2.格式 file [options] 文件名 3.[options]主要参数 -v：在标准输出后显示版本信息，并且退出。 -z：探测压缩过的文件类型。 -L：允许符合连接。 -f name：从文件namefile中读取要分析的文件名列表。 4.简单说明 使用file命令可以知道某个文件究竟是二进制（ELF格式）的可执行文件, 还是Shell Script文件，或者是其它的什么格式。file能识别的文件类型有目录、Shell脚本、英文文本、二进制可执行文件、C语言源文件、文本文件、DOS的可执行文件。 5.应用实例 如果我们看到一个没有后缀的文件grap，可以使用下面命令： $ file grap grap： English text 此时系统显示这是一个英文文本文件。需要说明的是，file命令不能探测包括图形、音频、视频等多媒体文件类型。 mkdir1.作用 mkdir命令的作用是建立名称为dirname的子目录，与MS DOS下的md命令类似，它的使用权限是所有用户。 2.格式 mkdir [options] 目录名 3.[options]主要参数 －m, –mode=模式：设定权限，与chmod类似。 －p, –parents：需要时创建上层目录；如果目录早已存在，则不当作错误。 －v, –verbose：每次创建新目录都显示信息。 －-version：显示版本信息后离开。 4.应用实例 在进行目录创建时可以设置目录的权限，此时使用的参数是“－m”。假设要创建的目录名是“tsk”，让所有用户都有rwx(即读、写、执行的权限)，那么可以使用以下命令： $ mkdir －m 777 tsk grep1.作用 grep命令可以指定文件中搜索特定的内容，并将含有这些内容的行标准输出。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。 2.格式 grep [options] 3.主要参数 [options]主要参数： －c：只输出匹配行的计数。 －i：不区分大小写（只适用于单字符）。 －h：查询多文件时不显示文件名。 －l：查询多文件时只输出包含匹配字符的文件名。 －n：显示匹配行及行号。 －s：不显示不存在或无匹配文本的错误信息。 －v：显示不包含匹配文本的所有行。 pattern正则表达式主要参数： /：忽略正则表达式中特殊字符的原有含义。 ^：匹配正则表达式的开始行。 $: 匹配正则表达式的结束行。 /：到匹配正则表达式的行结束。 [ ]：单个字符，如[A]即A符合要求 。 [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。 。：所有的单个字符。 * ：有字符，长度可以为0。 正则表达式是Linux/Unix系统中非常重要的概念。正则表达式（也称为“regex”或“regexp”）是一个可以描述一类字符串的模式（Pattern）。如果一个字符串可以用某个正则表达式来描述，我们就说这个字符和该正则表达式匹配（Match）。这和DOS中用户可以使用通配符“*”代表任意字符类似。在Linux系统上，正则表达式通常被用来查找文本的模式，以及对文本执行“搜索－替换”操作和其它功能。 4.应用实例 查询DNS服务是日常工作之一，这意味着要维护覆盖不同网络的大量IP地址。有时IP地址会超过2000个。如果要查看nnn.nnn网络地址，但是却忘了第二部分中的其余部分，只知到有两个句点，例如nnn nn..。要抽取其中所有nnn.nnn IP地址，使用[0－9 ]/{3/}/.[0－0/{3/}/。含义是任意数字出现3次，后跟句点，接着是任意数字出现3次，后跟句点。 $grep ‘[0－9 ]/{3 /}/.[0－0/{3/}/‘ ipfile 补充说明，grep家族还包括fgrep和egrep。fgrep是fix grep，允许查找字符串而不是一个模式；egrep是扩展grep，支持基本及扩展的正则表达式，但不支持/q模式范围的应用及与之相对应的一些更加规范的模式。 dd1.作用 dd命令用来复制文件，并根据参数将数据转换和格式化。 2.格式 dd [options] 3.[opitions]主要参数 bs=字节：强迫 ibs=及obs=。 cbs=字节：每次转换指定的。 conv=关键字：根据以逗号分隔的关键字表示的方式来转换文件。 count=块数目：只复制指定的输入数据。 ibs=字节：每次读取指定的。 if=文件：读取内容，而非标准输入的数据。 obs=字节：每次写入指定的。 of=文件：将数据写入，而不在标准输出显示。 seek=块数目：先略过以obs为单位的指定的输出数据。 skip=块数目：先略过以ibs为单位的指定的输入数据。 4.应用实例 dd命令常常用来制作Linux启动盘。先找一个可引导内核，令它的根设备指向正确的根分区，然后使用dd命令将其写入软盘： $ rdev vmlinuz /dev/hda $dd if＝vmlinuz of＝/dev/fd0 上面代码说明，使用rdev命令将可引导内核vmlinuz中的根设备指向/dev/hda，请把“hda”换成自己的根分区，接下来用dd命令将该内核写入软盘。 find1.作用 find命令的作用是在目录中搜索文件，它的使用权限是所有用户。 2.格式 find [path][options][expression] path指定目录路径，系统从这里开始沿着目录树向下查找文件。它是一个路径列表，相互用空格分离，如果不写path，那么默认为当前目录。 3.主要参数 [options]参数： －depth：使用深度级别的查找过程方式，在某层指定目录中优先查找文件内容。 －maxdepth levels：表示至多查找到开始目录的第level层子目录。level是一个非负数，如果level是0的话表示仅在当前目录中查找。 －mindepth levels：表示至少查找到开始目录的第level层子目录。 －mount：不在其它文件系统（如Msdos、Vfat等）的目录和文件中查找。 －version：打印版本。 [expression]是匹配表达式，是find命令接受的表达式，find命令的所有操作都是针对表达式的。它的参数非常多，这里只介绍一些常用的参数。 –name：支持统配符*和?。 －atime n：搜索在过去n天读取过的文件。 －ctime n：搜索在过去n天修改过的文件。 －group grpoupname：搜索所有组为grpoupname的文件。 －user 用户名：搜索所有文件属主为用户名（ID或名称）的文件。 －size n：搜索文件大小是n个block的文件。 －print：输出搜索结果，并且打印。 4.应用技巧 find命令查找文件的几种方法： （1）根据文件名查找 例如，我们想要查找一个文件名是lilo.conf的文件，可以使用如下命令： find / －name lilo.conf find命令后的“/”表示搜索整个硬盘。 （2）快速查找文件 根据文件名查找文件会遇到一个实际问题，就是要花费相当长的一段时间，特别是大型Linux文件系统和大容量硬盘文件放在很深的子目录中时。如果我们知道了这个文件存放在某个目录中，那么只要在这个目录中往下寻找就能节省很多时间。比如smb.conf文件，从它的文件后缀“.conf”可以判断这是一个配 置文件，那么它应该在/etc目录内，此时可以使用下面命令： find /etc －name smb.conf 这样，使用“快速查找文件”方式可以缩短时间。 （3）根据部分文件名查找方法 有时我们知道只某个文件包含有abvd这4个字，那么要查找系统中所有包含有这4个字符的文件可以输入下面命令： find / －name ‘*abvd*‘ 输入这个命令以后，Linux系统会将在/目录中查找所有的包含有abvd这4个字符的文件（其中*是通配符），比如abvdrmyz等符合条件的文件都能显示出来。 (4) 使用混合查找方式查找文件 find命令可以使用混合查找的方法，例如，我们想在/etc目录中查找大于500000字节，并且在24小时内修改的某个文件，则可以使用-and (与)把两个查找参数链接起来组合成一个混合的查找方式。 find /etc -size +500000c -and -mtime +1 mv1.作用 mv命令用来为文件或目录改名，或者将文件由一个目录移入另一个目录中，它的使用权限是所有用户。该命令如同DOS命令中的ren和move的组合。 2.格式 mv[options] 源文件或目录 目标文件或目录 3.[options]主要参数 －i：交互方式操作。如果mv操作将导致对已存在的目标文件的覆盖，此时系统询问是否重写，要求用户回答“y”或“n”，这样可以避免误覆盖文件。 －f：禁止交互操作。mv操作要覆盖某个已有的目标文件时不给任何指示，指定此参数后i参数将不再起作用。 4.应用实例 （1）将/usr/cbu中的所有文件移到当前目录（用“.”表示）中： $ mv /usr/cbu/* . （2）将文件cjh.txt重命名为wjz.txt： $ mv cjh.txt wjz.txt ls1.作用 ls命令用于显示目录内容，类似DOS下的dir命令，它的使用权限是所有用户。 2.格式 ls [options][filename] 3.options主要参数 －a, –all：不隐藏任何以“.” 字符开始的项目。 －A, –almost－all：列出除了“ . ”及 “.. ”以外的任何项目。 –author：印出每个文件著作者。 －b, –escape：以八进制溢出序列表示不可打印的字符。 –block－size=大小：块以指定的字节为单位。 －B, –ignore－backups：不列出任何以 ~ 字符结束的项目。 －f：不进行排序，－aU参数生效，－lst参数失效。 －F, –classify：加上文件类型的指示符号 (*/=@| 其中一个)。 －g：like －l, but do not list owner。 －G, –no－group：inhibit display of group information。 －i, –inode：列出每个文件的inode号。 －I, –ignore=样式：不印出任何符合Shell万用字符的项目。 －k：即–block－size=1K。 －l：使用较长格式列出信息。 －L, –dereference：当显示符号链接的文件信息时，显示符号链接所指示的对象，而并非符号链接本身的信息。 －m：所有项目以逗号分隔，并填满整行行宽。 －n, –numeric－uid－gid：类似－l，但列出UID及GID号。 －N, –literal：列出未经处理的项目名称，例如不特别处理控制字符。 －p, –file－type：加上文件类型的指示符号 (/=@| 其中一个)。 －Q, –quote－name：将项目名称括上双引号。 －r, –reverse：依相反次序排列。 －R, –recursive：同时列出所有子目录层。 －s, –size：以块大小为序。 - h, –human-readable: 设置大小可读性 4.应用举例 ls 命令是Linux系统使用频率最多的命令，它的参数也是Linux命令中最多的。使用ls命令时会有几种不同的颜色，其中蓝色表示是目录，绿色表示是可执行文件，红色表示是压缩文件，浅蓝色表示是链接文件，加粗的黑色表示符号链接，灰色表示是其它格式文件。ls最常使用的是ls- l，文件类型开头是由10个字符构成的字符串。其中第一个字符表示文件类型，它可以是下述类型之一：－（普通文件）、d（目录）、l（符号链接）、b（块设备文件）、c（字符设备文件）。后面的9个字符表示文件的访问权限，分为3组，每组3位。第一组表示文件属主的权限，第二组表示同组用户的权限，第三组表示其他用户的权限。每一组的三个字符分别表示对文件的读（r）、写（w）和执行权限（x）。对于目录，表示进入权限。s表示当文件被执行时，把该文件的UID或GID赋予执行进程的UID（用户ID）或GID（组ID）。t表示设置标志位（留在内存，不被换出）。如果该文件是目录，那么在该目录中的文件只能被超级用户、目录拥有者或文件属主删除。如果它是可执行文件，那么在该文件执行后，指向其正文段的指针仍留在内存。这样再次执行它时，系统就能更快地装入该文件。接着显示的是文件大小、生成时间、文件或命令名称。 diff1.作用 diff命令用于两个文件之间的比较，并指出两者的不同，它的使用权限是所有用户。 2.格式 diff [options] 源文件 目标文件 3.[options]主要参数 -a：将所有文件当作文本文件来处理。 -b：忽略空格造成的不同。 -B：忽略空行造成的不同。 -c：使用纲要输出格式。 -H：利用试探法加速对大文件的搜索。 -I：忽略大小写的变化。 -n –rcs：输出RCS格式。 cmp1.作用 cmp（“compare”的缩写）命令用来简要指出两个文件是否存在差异，它的使用权限是所有用户。 2.格式 cmp[options] 文件名 3.[options]主要参数 -l: 将字节以十进制的方式输出，并方便将两个文件中不同的以八进制的方式输出。 cat1.作用 cat（“concatenate”的缩写）命令用于连接并显示指定的一个和多个文件的有关信息，它的使用权限是所有用户。 2.格式 cat [options] 文件1 文件2…… 3.[options]主要参数 －n：由第一行开始对所有输出的行数编号。 －b：和－n相似，只不过对于空白行不编号。 －s：当遇到有连续两行以上的空白行时，就代换为一行的空白行。 4.应用举例 （1）cat命令一个最简单的用处是显示文本文件的内容。例如，我们想在命令行看一下README文件的内容，可以使用命令： $ cat README （2）有时需要将几个文件处理成一个文件，并将这种处理的结果保存到一个单独的输出文件。cat命令在其输入上接受一个或多个文件，并将它们作为一个单独的文件打印到它的输出。例如，把README和INSTALL的文件内容加上行号（空白行不加）之后，将内容附加到一个新文本文件File1 中： $ cat README INSTALL File1 （3）cat还有一个重要的功能就是可以对行进行编号，见图2所示。这种功能对于程序文档的编制，以及法律和科学文档的编制很方便，打印在左边的行号使得参考文档的某一部分变得容易，这些在编程、科学研究、业务报告甚至是立法工作中都是非常重要的。 对行进行编号功能有-b（只能对非空白行进行编号）和-n（可以对所有行进行编号）两个参数： $ cat -b /etc/named.conf ln1.作用 ln命令用来在文件之间创建链接，它的使用权限是所有用户。 2.格式 ln [options] 源文件 [链接名] 3.参数 －f：链结时先将源文件删除。 －d：允许系统管理者硬链结自己的目录。 －s：进行软链结(Symbolic Link)。 －b：将在链结时会被覆盖或删除的文件进行备份。 链接有两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。硬连接指通过索引节点来进行的连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件才会被真正删除。与硬连接相对应，Lnux系统中还存在另一种连接，称为符号连接（Symbilc Link），也叫软连接。软链接文件有点类似于Windows的快捷方式。它实际上是特殊文件的一种。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。 动手练习 上面我们介绍了Linux文件处理命令，下面介绍几个实例，大家可以动手练习一下刚才讲过的命令。 1.利用符号链接快速访问关键目录 符号链接是一个非常实用的功能。假设有一些目录或文件需要频繁使用，但由于Linux的文件和目录结构等原因，这个文件或目录在很深的子目录中。比如，Apache Web服务器文档位于系统的/usr/local/httpd/htdocs中，并且不想每次都要从主目录进入这样一个长的路径之中(实际上，这个路径也非常不容易记忆)。 为了能方便地进入Web服务器(/usr/local/httpd/htdocs)文档所在的目录，在主目录下可以使用以下命令： $ ln -s /usr/local/httpd/htdocs gg 这样每次进入gg目录就可访问Web服务器的文档，以后如果不再访问Web服务器的文档时，删除gg即可，而真正的Web服务器的文档并没有删除。 2.使用dd命令将init.rd格式的root.ram内容导入内存 dd if=/dev/fd0 of=floppy.fd dd if=root.ram of=/dev/ram0 # 3.grep命令系统调用 grep是Linux/Unix中使用最广泛的命令之一，许多Linux系统内部都可以调用它。 (1)如果要查询目录列表中的目录，方法如下： $ ls -l | grep ‘∧d’ (2)如果在一个目录中查询不包含目录的所有文件，方法如下： $ ls -l | grep ‘∧[∧d]’ (3)用find命令调用grep，如所有C源代码中的“Chinput”，方法如下： $find /ZhXwin -name *.c -exec grep -q -s Chinput {} /;-print 系统管理命令Linux必学的系统管理命令 对于Linux系统来说，无论是中央处理器、内存、磁盘驱动器、键盘、鼠标，还是用户等都是文件，Linux系统管理的命令是它正常运行的核心。熟悉了Linux常用的文件处理命令以后，这一讲介绍对系统和用户进行管理的命令。 df1.作用 df命令用来检查文件系统的磁盘空间占用情况，使用权限是所有用户。 2.格式 df [options] 3.主要参数 －s：对每个Names参数只给出占用的数据块总数。 －a：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定－s，也不指定－a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。 －k：以1024字节为单位列出磁盘空间使用情况。 －x：跳过在不同文件系统上的目录不予统计。 －l：计算所有的文件大小，对硬链接文件则计算多次。 －i：显示inode信息而非块使用量。 －h：以容易理解的格式印出文件系统大小，例如136KB、254MB、21GB。 －P：使用POSIX输出格式。 －T：显示文件系统类型。 4.说明 df命令被广泛地用来生成文件系统的使用统计数据，它能显示系统中所有的文件系统的信息，包括总容量、可用的空闲空间、目前的安装点等。 超级权限用户使用df命令时会发现这样的情况：某个分区的容量超过了100％。这是因为Linux系统为超级用户保留了10％的空间，由其单独支配。也就是说，对于超级用户而言，他所见到的硬盘容量将是110％。这样的安排对于系统管理而言是有好处的，当硬盘被使用的容量接近100％时系统管理员还可以正常工作。 5.应用实例 Linux支持的文件系统非常多，包括JFS、ReiserFS、ext、ext2、ext3、ISO9660、XFS、Minx、vfat、MSDOS等。使用df -T命令查看磁盘空间时还可以得到文件系统的信息： ＃df －T 文件系统 类型 容量 已用 可用 已用% 挂载点 /dev/hda7 reiserfs 5.2G 1.6G 3.7G 30% / /dev/hda1 vfat 2.4G 1.6G 827M 66% /windows/C /dev/hda5 vfat 3.0G 1.7G 1.3G 57% /windows/D /dev/hda9 vfat 3.0G 2.4G 566M 82% /windows/E /dev/hda10 NTFS 3.2G 573M 2.6G 18% /windows/F /dev/hda11 vfat 1.6G 1.5G 23M 99% /windows/G 从上面除了可以看到磁盘空间的容量、使用情况外，分区的文件系统类型、挂载点等信息也一览无遗。 top1.作用 top命令用来显示执行中的程序进程，使用权限是所有用户。 2.格式 top [－] [d delay] [q] [c] [S] [s] [n] 3.主要参数 d：指定更新的间隔，以秒计算。 q：没有任何延迟的更新。如果使用者有超级用户，则top命令将会以最高的优先序执行。 c：显示进程完整的路径与名称。 S：累积模式，会将己完成或消失的子行程的CPU时间累积起来。 s：安全模式。 i：不显示任何闲置(Idle)或无用(Zombie)的行程。 n：显示更新的次数，完成后将会退出top。 4.说明 top命令是Linux系统管理的一个主要命令，通过它可以获得许多信息。第一行表示的项目依次为当前时间、系统启动时间、当前系统登录用户数目、平均负载。第二行显示的是所有启动的进程、目前运行的、挂起(Sleeping)的和无用(Zombie)的进程。第三行显示的是目前CPU的使用情况，包括系统占用的比例、用户使用比例、闲置(Idle)比例。第四行显示物理内存的使用情况，包括总的可以使用的内存、已用内存、空闲内存、缓冲区占用的内存。第五行显示交换分区使用情况，包括总的交换分区、使用的、空闲的和用于高速缓存的大小。第六行显示的项目最多，下面列出了详细解释。 PID（Process ID）：进程标示号。 USER：进程所有者的用户名。 PR：进程的优先级别。 NI：进程的优先级别数值。 VIRT：进程占用的虚拟内存值。 RES：进程占用的物理内存值。 SHR：进程使用的共享内存值。 S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数。 %CPU：该进程占用的CPU使用率。 %MEM：该进程占用的物理内存和总内存的百分比。 TIME＋：该进程启动后占用的总的CPU时间。 Command：进程启动的启动命令名称，如果这一行显示不下，进程会有一个完整的命令行。 top命令使用过程中，还可以使用一些交互的命令来完成其它参数的功能。这些命令是通过快捷键启动的。 ：立刻刷新。 P：根据CPU使用大小进行排序。 T：根据时间、累计时间排序。 q：退出top命令。 m：切换显示内存信息。 t：切换显示进程和CPU状态信息。 c：切换显示命令名称和完整命令行。 M：根据使用内存大小进行排序。 W：将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。 可以看到，top命令是一个功能十分强大的监控系统的工具，对于系统管理员而言尤其重要。但是，它的缺点是会消耗很多系统资源。 5.应用实例 使用top命令可以监视指定用户，缺省情况是监视所有用户的进程。如果想查看指定用户的情况，在终端中按“U”键，然后输入用户名，系统就会切换为指定用户的进程运行界面。 free1.作用 free命令用来显示内存的使用情况，使用权限是所有用户。 2.格式 free [－b|－k|－m] [－o] [－s delay] [－t] [－V] 3.主要参数 －b －k －m：分别以字节（KB、MB）为单位显示内存使用情况。 －s delay：显示每隔多少秒数来显示一次内存使用情况。 －t：显示内存总和列。 －o：不显示缓冲区调节列。 4.应用实例 free命令是用来查看内存使用情况的主要命令。和top命令相比，它的优点是使用简单，并且只占用很少的系统资源。通过－S参数可以使用free命令不间断地监视有多少内存在使用，这样可以把它当作一个方便实时监控器。 ＃free －b －s5 使用这个命令后终端会连续不断地报告内存使用情况（以字节为单位），每5秒更新一次。 at1.作用 at命令用来在指定时刻执行指定的命令序列。 2.格式 at [－V] [－q x] [－f file] [－m] time 3.主要参数 －V：显示标准错误输出。 －q：许多队列输出。 －f：从文件中读取作业。 －m：执行完作业后发送电子邮件到用户。 time：设定作业执行的时间。time格式有严格的要求，由小时、分钟、日期和时间的偏移量组成，其中日期的格式为MM.DD.YY，MM是分钟，DD是日期，YY是指年份。偏移量的格式为时间＋偏移量，单位是minutes、hours和days。 4.应用实例 ＃at －f data 15:30 +2 days 上面命令表示让系统在两天后的17：30执行文件data中指明的作业。 lp1.作用 lp是打印文件的命令，使用权限是所有用户。 2.格式 lp [－c][－d][－m][－number][－title][-p] 3.主要参数 －c：先拷贝文件再打印。 －d：打印队列文件。 －m：打印结束后发送电子邮件到用户。 －number：打印份数。 －title：打印标题。 －p：设定打印的优先级别，最高为100。 4.应用实例 （1）使用lp命令打印多个文件 ＃lp 2 3 4 request id is 11 (3 file(s)) 其中2、3、4分别是文件名；“request id is 11 (3 file(s)) ”表示这是第11个打印命令，依次打印这三个文件。 （2）设定打印优先级别 ＃lp lp -d LaserJet -p 90 /etc/aliases 通过添加“-p 90”，规定了打印作业的优先级为90。它将在优先级低于90的打印作业之前打印，包括没有设置优先级的作业，缺省优先级是50 useradd1.作用 useradd命令用来建立用户帐号和创建用户的起始目录，使用权限是超级用户。 2.格式 useradd [－d home] [－s shell] [－c comment] [－m [－k template]] [－f inactive] [－e expire ] [－p passwd] [－r] name 3.主要参数 －c：加上备注文字，备注文字保存在passwd的备注栏中。 －d：指定用户登入时的启始目录。 －D：变更预设值。 －e：指定账号的有效期限，缺省表示永久有效。 －f：指定在密码过期后多少天即关闭该账号。 －g：指定用户所属的群组。 －G：指定用户所属的附加群组。 －m：自动建立用户的登入目录。 －M：不要自动建立用户的登入目录。 －n：取消建立以用户名称为名的群组。 －r：建立系统账号。 －s：指定用户登入后所使用的shell。 －u：指定用户ID号。 4.说明 useradd可用来建立用户账号，它和adduser命令是相同的。账号建好之后，再用passwd设定账号的密码。使用useradd命令所建立的账号，实际上是保存在/etc/passwd文本文件中。 5.应用实例 建立一个新用户账户，并设置ID： ＃useradd caojh －u 544 需要说明的是，设定ID值时尽量要大于500，以免冲突。因为Linux安装后会建立一些特殊用户，一般0到499之间的值留给bin、mail这样的系统账号。 groupadd1.作用 groupadd命令用于将新组加入系统。 2.格式 groupadd [－g gid] [－o]] [－r] [－f] groupname 3.主要参数 －g gid：指定组ID号。 －o：允许组ID号，不必惟一。 －r：加入组ID号，低于499系统账号。 －f：加入已经有的组时，发展程序退出。 4.应用实例 建立一个新组，并设置组ID加入系统： ＃groupadd －g 344 cjh 此时在/etc/passwd文件中产生一个组ID（GID）是344的项目。 kill1.作用 kill命令用来中止一个进程。 2.格式 kill [ －s signal | －p ] [ －a ] pid … kill －l [ signal ] 3.参数 －s：指定发送的信号。 －p：模拟发送信号。 －l：指定信号的名称列表。 pid：要中止进程的ID号。 Signal：表示信号。 4.说明 进程是Linux系统中一个非常重要的概念。Linux是一个多任务的操作系统，系统上经常同时运行着多个进程。我们不关心这些进程究竟是如何分配的，或者是内核如何管理分配时间片的，所关心的是如何去控制这些进程，让它们能够很好地为用户服务。 Linux操作系统包括三种不同类型的进程，每种进程都有自己的特点和属性。交互进程是由一个Shell启动的进程。交互进程既可以在前台运行，也可以在后台运行。 批处理进程和终端没有联系，是一个进程序列。监控进程（也称系统守护进程）时Linux系统启动时启动的进程，并在后台运行。例如，httpd是著名的Apache服务器的监控进程。 kill命令的工作原理是，向Linux系统的内核发送一个系统操作信号 和某个程序的进程标识号，然后系统内核就可以对进程标识号指定的进程进行操作。比如在top命令中，我们看到系统运行许多进程，有时就需要使用kill中止某些进程来提高系统资源。在讲解安装和登陆命令时，曾提到系统多个虚拟控制台的作用是当一个程序出错造成系统死锁时，可以切换到其它虚拟控制台工作关闭这个程序。此时使用的命令就是kill，因为kill是大多数Shell内部命令可以直接调用的。 5.应用实例 （1）强行中止（经常使用杀掉）一个进程标识号为324的进程： ＃kill －9 324 （2）解除Linux系统的死锁 在Linux中有时会发生这样一种情况：一个程序崩溃，并且处于死锁的状态。此时一般不用重新启动计算机，只需要中止(或者说是关闭)这个有问题的程序即可。当kill处于X-Window界面时，主要的程序(除了崩溃的程序之外)一般都已经正常启动了。此时打开一个终端，在那里中止有问题的程序。比如，如果Mozilla浏览器程序出现了锁死的情况，可以使用kill命令来中止所有包含有Mozolla浏览器的程序。首先用top命令查处该程序的PID，然后使用kill命令停止这个程序： ＃kill －SIGKILL XXX 其中，XXX是包含有Mozolla浏览器的程序的进程标识号。 （3）使用命令回收内存 我们知道内存对于系统是非常重要的，回收内存可以提高系统资源。kill命令可以及时地中止一些“越轨”的程序或很长时间没有响应的程序。例如，使用top命令发现一个无用 (Zombie) 的进程，此时可以使用下面命令： ＃kill －9 XXX 其中，XXX是无用的进程标识号。 然后使用下面命令： ＃free 此时会发现可用内存容量增加了。 （4）killall命令 Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号，例如： ＃ killall -HUP inetd crontab1.作用 使用crontab命令可以修改crontab配置文件，然后该配置由cron公用程序在适当的时间执行，该命令使用权限是所有用户。 2.格式 crontab [ －u user ] 文件 crontab [ －u user ] { －l | －r | －e } 3.主要参数 －e：执行文字编辑器来设定时程表，内定的文字编辑器是vi。 －r：删除目前的时程表。 －l：列出目前的时程表。 crontab文件的格式为“M H D m d cmd”。其中，M代表分钟（0～59），H代表小时（0～23），D代表天（1～31），m代表月（1～12），d代表一星期内的天（0～6，0为星期天）。cmd表示要运行的程序，它被送入sh执行，这个Shell只有USER、HOME、SHELL三个环境变量，所以指令需要使用绝对路径。查看crontab执行日志可以查看/var/log/cron文件。 4.说明 和at命令相比，crontab命令适合完成固定周期的任务。 5.应用实例 设置一个定时、定期的系统提示： [cao @www cao]#crontab －e 此时系统会打开一个vi编辑器。 如果输入以下内容：35 17 5 wall “Tomorrow is Saturday I will go CS”，然后存盘退出。这时在/var/spool/cron/目录下会生产一个cao的文件，内容如下： # DO NOT EDIT THIS FILE － edit the master and reinstall. # (/tmp/crontab.2707 installed on Thu Jan 1 22:01:51 2004) # (Cron version – $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $) 35 17 5 wall “Tomorrow is Saturday I will play CS “ 这样每个星期五17：35系统就会弹出一个终端，提醒星期六可以打打CS了！ 动手练习 1.联合使用kill和top命令观察系统性能的变化 首先启动一个终端运行top命令，然后再启动一个终端使用kill命令。 这时利用上面介绍的kill命令来中止一些程序： ＃kill SIGKILL XXX 然后再看top命令终端的变化，包括内存容量、CPU使用率、系统负载等。注意，有些进程是不能中止的，不过学习Linux命令时可以试试，看看系统有什么反应。 2.使用at和halt命令定时关机 首先设定关机时间是17:35，输入下面代码： ＃at 17:35 warning: commands will be executed using (in order) a) $SHELL b) login shell c) /bin/sh at&gt;halt `-i －p at&gt; job 6 at 2004－01－01 17:35 此时实际上就已经进入Linux系统的Shell，并且编写一个最简单程序：halt －i－p。上面Shell中的文本结束符号表示按“Ctrl＋D”组合键关闭命令，提交任务退出Shell。“Job 6 at 2004－01－01 17:35”表示系统接受第6个at命令，在“2004－01－01 17:35”时执行命令：先把所有网络相关的装置停止，关闭系统后关闭电源。 3.用crontab命令实现每天定时的病毒扫描 前面已经介绍了一个简单的crontab命令操作，这里看一些更重要的操作。 （1）建立一个文件，文件名称自己设定，假设为caoproject： ＃crontab －e （2）文件内容如下： 05 09 * antivir 用vi编辑后存盘退出。antivir是一个查杀Linux病毒的软件，当然需要时先安装在系统中。 （3）使用crontab命令添加到任务列表中： ＃crontab caoproject 这样系统内所有用户在每天的9点05分会自动进行病毒扫描。 4.用kill使修改的配置文件马上生效 Windows用户一般都知道，重要配置文件修改后往往都要重新启动计算机才能使修改生效。而Linux由于采用了模块化设计，可以自己根据需要实时设定服务。这里以网络服务inetd为例介绍一些操作技巧。 inetd是一个监听守护进程，监听与提供互联网服务进程（如rlogin、telnet、ftp、rsh）进行连接的要求，并扩展所需的服务进程。默认情况下， inetd监听的这些daemon均列于/etc /inetd.conf文件中。编辑/etc/inetd.conf文件，可以改变inetd启动服务器守护进程的选项，然后驱使inetd以 SIGHUP（signal 1）向当前的inetd进程发送信号，使inetd重读该文件。这一过程由kill命令来实现。 用vi或其它编辑器修改inetd.conf后，首先使用下面命令： ＃ps -ef |grep inetd 上面代码表明查询inetd.conf的进程号(PID)，这里假设是1426，然后使用下面命令： ＃ kill -1426 inetd 这样配置文件就生效了。 这一讲介绍的系统管理命令都是比较重要的，特别是crontab命令和quota命令使用起来会有一定难度，需要多做一些练习。另外，使用kill命令要注意“－9“这个参数，练习时最好不要运行一些重要的程序。 网络操作命令因为Linux系统是在Internet上起源和发展的，它与生俱来拥有强大的网络功能和丰富的网络应用软件，尤其是TCP/IP网络协议的实现尤为成熟。 Linux的网络命令比较多，其中一些命令像ping、ftp、telnet、route、netstat等在其它操作系统上也能看到，但也有一些Unix/Linux系统独有的命令，如ifconfig、finger、mail等。Linux网络操作命令的一个特点是，命令参数选项和功能很多，一个命令往往还可以实现其它命令的功能。 ifconfig1.作用 ifconfig用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。 2.格式 ifconfig -interface [options] address 3.主要参数 -interface：指定的网络接口名，如eth0和eth1。 up：激活指定的网络接口卡。 down：关闭指定的网络接口。 broadcast address：设置接口的广播地址。 pointopoint：启用点对点方式。 address：设置指定接口设备的IP地址。 netmask address：设置接口的子网掩码。 4.应用说明 ifconfig是用来设置和配置网卡的命令行工具。为了手工配置网络，这是一个必须掌握的命令。使用该命令的好处是无须重新启动机器。要赋给eth0接口IP地址207.164.186.2，并且马上激活它，使用下面命令： #ifconfig eth0 210.34.6.89 netmask 255.255.255.128 broadcast 210.34.6.127 该命令的作用是设置网卡eth0的IP地址、网络掩码和网络的本地广播地址。若运行不带任何参数的ifconfig命令，这个命令将显示机器所有激活接口的 信息。带有“-a”参数的命令则显示所有接口的信息，包括没有激活的接口。注意，用ifconfig命令配置的网络设备参数，机器重新启动以后将会丢失。 如果要暂停某个网络接口的工作，可以使用down参数： #ifconfig eth0 down ip1.作用 ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户。几乎所有的Linux发行版本都支持该命令。 2.格式 ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]] 3.主要参数 OPTIONS是修改ip行为或改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。目前，ip支持如表1所示选项。 OBJECT是要管理者获取信息的对象。目前ip认识的对象见表2所示。 表1 ip支持的选项 -V,-Version 打印ip的版本并退出。 -s,-stats,-statistics 输出更为详尽的信息。如果这个选项出现两次或多次，则输出的信息将更为详尽。 -f,-family 这个选项后面接协议种类，包括inet、inet6或link，强调使用的协议种类。如果没有足够的信息告诉ip使用的协议种类，ip就会使用默认值inet或any。link比较特殊，它表示不涉及任何网络协议。 -4 是-family inet的简写。 -6 是-family inet6的简写。 -0 是-family link的简写。 -o,-oneline 对每行记录都使用单行输出，回行用字符代替。如果需要使用wc、grep等工具处理ip的输出，则会用到这个选项。 -r,-resolve 查询域名解析系统，用获得的主机名代替主机IP地址 COMMAND 设置针对指定对象执行的操作，它和对象的类型有关。一般情况下，ip支持对象的增加(add)、删除(delete)和展示(show或list)。有些对象不支持这些操作，或者有其它的一些命令。对于所有的对象，用户可以使用help命令获得帮助。这个命令会列出这个对象支持的命令和参数的语法。如果没有指定对象的操作命令，ip会使用默认的命令。一般情况下，默认命令是list，如果对象不能列出，就会执行help命令。 ARGUMENTS 是命令的一些参数，它们倚赖于对象和命令。ip支持两种类型的参数：flag和parameter。flag由一个关键词组成；parameter由一个关键词加一个数值组成。为了方便，每个命令都有一个可以忽略的默认参数。例如，参数dev是ip link命令的默认参数，因此ip link ls eth0等于ip link ls dev eth0。我们将在后面的详细介绍每个命令的使用，命令的默认参数将使用default标出。 4.应用实例 添加IP地址192.168.2.2/24到eth0网卡上： #ip addr add 192.168.1.1/24 dev eth0 丢弃源地址属于192.168.2.0/24网络的所有数据报： #ip rule add from 192.168.2.0/24 prio 32777 reject ping1.作用 ping检测主机网络接口状态，使用权限是所有用户。 2.格式 ping [-dfnqrRv][-c][-i][-I][-l][-p][-s][-t] IP地址 3.主要参数 -d：使用Socket的SO_DEBUG功能。 -c：设置完成要求回应的次数。 -f：极限检测。 -i：指定收发信息的间隔秒数。 -I：网络界面使用指定的网络界面送出数据包。 -l：前置载入，设置在送出要求信息之前，先行发出的数据包。 -n：只输出数值。 -p：设置填满数据包的范本样式。 -q：不显示指令执行过程，开头和结尾的相关信息除外。 -r：忽略普通的Routing Table，直接将数据包送到远端主机上。 -R：记录路由过程。 -s：设置数据包的大小。 -t：设置存活数值TTL的大小。 -v：详细显示指令的执行过程。 ping命令是使用最多的网络指令，通常我们使用它检测网络是否连通，它使用ICMP协议。但是有时会有这样的情况，我们可以浏览器查看一个网页，但是却无法ping通，这是因为一些网站处于安全考虑安装了防火墙。另外，也可以在自己计算机上试一试，通过下面的方法使系统对ping没有反应： # echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all netstat1.作用 检查整个Linux网络状态。 2.格式 netstat [-acCeFghilMnNoprstuvVwx][-A][–ip] 3.主要参数 -a–all：显示所有连线中的Socket。 -A：列出该网络类型连线中的IP相关地址和网络类型。 -c–continuous：持续列出网络状态。 -C–cache：显示路由器配置的快取信息。 -e–extend：显示网络其它相关信息。 -F–fib：显示FIB。 -g–groups：显示多重广播功能群组组员名单。 -h–help：在线帮助。 -i–interfaces：显示网络界面信息表单。 -l–listening：显示监控中的服务器的Socket。 -M–masquerade：显示伪装的网络连线。 -n–numeric：直接使用IP地址，而不通过域名服务器。 -N–netlink–symbolic：显示网络硬件外围设备的符号连接名称。 -o–timers：显示计时器。 -p–programs：显示正在使用Socket的程序识别码和程序名称。 -r–route：显示Routing Table。 -s–statistice：显示网络工作信息统计表。 -t–tcp：显示TCP传输协议的连线状况。 -u–udp：显示UDP传输协议的连线状况。 -v–verbose：显示指令执行过程。 -V–version：显示版本信息。 -w–raw：显示RAW传输协议的连线状况。 -x–unix：和指定“-A unix”参数相同。 –ip–inet：和指定“-A inet”参数相同。 4.应用实例 netstat主要用于Linux察看自身的网络状况，如开启的端口、在为哪些用户服务，以及服务的状态等。此外，它还显示系统路由表、网络接口状态等。可以说，它是一个综合性的网络状态的察看工具。在默认情况下，netstat只显示已建立连接的端口。如果要显示处于监听状态的所有端口，使用-a参数即可： #netstat -a Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 :32768 :* LISTEN tcp 0 0 :32769 :* LISTEN tcp 0 0 :nfs :* LISTEN tcp 0 0 :32770 :* LISTEN tcp 0 0 :868 :* LISTEN tcp 0 0 :617 :* LISTEN tcp 0 0 :mysql :* LISTEN tcp 0 0 :netbios-ssn :* LISTEN tcp 0 0 :sunrpc :* LISTEN tcp 0 0 :10000 :* LISTEN tcp 0 0 :http :* LISTEN …… 上面显示出，这台主机同时提供HTTP、FTP、NFS、MySQL等服务。 telnet1.作用 telnet表示开启终端机阶段作业，并登入远端主机。telnet是一个Linux命令，同时也是一个协议（远程登陆协议）。 2.格式 telnet [-8acdEfFKLrx][-b][-e][-k][-l][-n][-S][-X][主机名称IP地址] 3.主要参数 -8：允许使用8位字符资料，包括输入与输出。 -a：尝试自动登入远端系统。 -b：使用别名指定远端主机名称。 -c：不读取用户专属目录里的.telnetrc文件。 -d：启动排错模式。 -e：设置脱离字符。 -E：滤除脱离字符。 -f：此参数的效果和指定“-F”参数相同。 -F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。 -k：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。 -K：不自动登入远端主机。 -l：指定要登入远端主机的用户名称。 -L：允许输出8位字符资料。 -n：指定文件记录相关信息。 -r：使用类似rlogin指令的用户界面。 -S：服务类型，设置telnet连线所需的IP TOS信息。 -x：假设主机有支持数据加密的功能，就使用它。 -X：关闭指定的认证形态。 4.应用说明 用户使用telnet命令可以进行远程登录，并在远程计算机之间进行通信。用户通过网络在远程计算机上登录，就像登录到本地机上执行命令一样。为了通过telnet登录到远程计算机上，必须知道远程机上的合法用户名和口令。虽然有些系统确实为远程用户提供登录功能，但出于对安全的考虑，要限制来宾的操作权限，因此，这种情况下能使用的功能是很少的。 telnet只为普通终端提供终端仿真，而不支持X-Window等图形环境。当允许远程用户登录时，系统通常把这些用户放在一个受限制的Shell中，以防系统被怀有恶意的或不小心的用户破坏。用户还可以使用telnet从远程站点登录到自己的计算机上，检查电子邮件、编辑文件和运行程序，就像在本地登录一样。 ftp1.作用 ftp命令进行远程文件传输。FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身，所以ftp既是协议又是一个命令。 2.格式 ftp [-dignv][主机名称IP地址] 3.主要参数 -d：详细显示指令执行过程，便于排错分析程序执行的情形。 -i：关闭互动模式，不询问任何问题。 -g：关闭本地主机文件名称支持特殊字符的扩充特性。 -n：不使用自动登陆。 -v：显示指令执行过程。 4.应用说明 ftp命令是标准的文件传输协议的用户接口，是在TCP/IP网络计算机之间传输文件简单有效的方法，它允许用户传输ASCⅡ文件和二进制文件。为了使用ftp来传输文件，用户必须知道远程计算机上的合法用户名和口令。这个用户名/口令的组合用来确认ftp会话，并用来确定用户对要传输的文件进行什么样的访问。 另外，用户需要知道对其进行ftp会话的计算机名字的IP地址。用户可以通过使用ftp客户程序，连接到另一台计算机上；可以在目录中上下移动、列出目录内容；可以把文件从远程计算机机拷贝到本地机上；还可以把文件从本地机传输到远程系统中。ftp内部命令有72个，下面列出主要几个内部命令： ls：列出远程机的当前目录。 cd：在远程机上改变工作目录。 lcd：在本地机上改变工作目录。 close：终止当前的ftp会话。 hash：每次传输完数据缓冲区中的数据后就显示一个#号。 get（mget）：从远程机传送指定文件到本地机。 put（mput）：从本地机传送指定文件到远程机。 quit：断开与远程机的连接，并退出ftp。 route1.作用 route表示手工产生、修改和查看路由表。 2.格式 # route [-add][-net|-host] targetaddress [-netmask Nm][dev]If] # route [－delete][-net|-host] targetaddress [gw Gw] [-netmask Nm] [dev]If] 3.主要参数 -add：增加路由。 -delete：删除路由。 -net：路由到达的是一个网络，而不是一台主机。 -host：路由到达的是一台主机。 -netmask Nm：指定路由的子网掩码。 gw：指定路由的网关。 [dev]If：强迫路由链指定接口。 4.应用实例 route命令是用来查看和设置Linux系统的路由信息，以实现与其它网络的通信。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。 在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。使用下面命令可以增加一个默认路由： route add 0.0.0.0 192.168.1.1 rlogin1.作用 rlogin用来进行远程注册。 2.格式 rlogin [ -8EKLdx ] [ -e char ] [-k realm ] [ - l username ] host 3.主要参数 -8：此选项始终允许8位输入数据通道。该选项允许发送格式化的ANSI字符和其它的特殊代码。如果不用这个选项，除非远端的不是终止和启动字符，否则就去掉奇偶校验位。 -E：停止把任何字符当作转义字符。当和-8选项一起使用时，它提供一个完全的透明连接。 -K：关闭所有的Kerberos确认。只有与使用Kerberos 确认协议的主机连接时才使用这个选项。 -L：允许rlogin会话在litout模式中运行。要了解更多信息，请查阅tty联机帮助。 -d：打开与远程主机进行通信的TCP sockets的socket调试。要了解更多信息，请查阅setsockopt的联机帮助。 -e：为rlogin会话设置转义字符，默认的转义字符是“～”。 -k：请求rlogin获得在指定区域内远程主机的Kerberos许可，而不是获得由krb_realmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。 -x：为所有通过rlogin会话传送的数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。 4.使用说明 如果在网络中的不同系统上都有账号，或者可以访问别人在另一个系统上的账号，那么要访问别的系统中的账号，首先就要注册到系统中，接着通过网络远程注册到账号所在的系统中。rlogin可以远程注册到别的系统中，它的参数应是一个系统名。 rcp1.作用 rcp代表远程文件拷贝，用于计算机之间文件拷贝，使用权限是所有用户。 2.格式 rcp [-px] [-k realm] file1 file2 rcp [-px] [-r] [-k realm] file 3.主要参数 -r：递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录。 -p：试图保留源文件的修改时间和模式，忽略umask。 -k：请求rcp获得在指定区域内的远程主机的Kerberos许可，而不是获得由krb_relmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。 -x：为传送的所有数据打开DES加密。 finger1.作用 finger用来查询一台主机上的登录账号的信息，通常会显示用户名、主目录、停滞时间、登录时间、登录Shell等信息，使用权限为所有用户。 2.格式 finger [选项] [使用者] [用户@主机] 3.主要参数 -s：显示用户注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。 -l：除了用-s选项显示的信息外，还显示用户主目录、登录Shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。 -p：除了不显示.plan文件和.project文件以外，与-l选项相同。 4.应用实例 在计算机上使用finger： [root@localhost root]# Finger Login Name Tty Idle Login Time Office Office Phone root root tty1 2 Dec 15 11 root root pts/0 1 Dec 15 11 root root *pts/1 Dec 15 11 5.应用说明 如果要查询远程机上的用户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网络主机需要运行finger守护进程的支持。 mail1.作用 mail作用是发送电子邮件，使用权限是所有用户。此外，mail还是一个电子邮件程序。 2.格式 mail [-s subject] [-c address] [-b address] mail -f [mailbox]mail [-u user] 3.主要参数 -b address：表示输出信息的匿名收信人地址清单。 -c address：表示输出信息的抄送（）收信人地址清单。 -f [mailbox]：从收件箱者指定邮箱读取邮件。 -s subject：指定输出信息的主体行。 [-u user]：端口指定优化的收件箱读取邮件。 nslookup1.作用 nslookup命令的功能是查询一台机器的IP地址和其对应的域名。使用权限所有用户。它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的IP地址对应的域名。 2.格式 nslookup ［IP地址/域名］ 3.应用实例 （1）在本地计算机上使用nslookup命令 $ nslookup Default Server: name.cao.com.cn Address: 192.168.1.9 > 在符号“&gt;”后面输入要查询的IP地址域名，并回车即可。如果要退出该命令，输入“exit”，并回车即可。 （2）使用nslookup命令测试named 输入下面命令： nslookup 然后就进入交换式nslookup环境。如果named正常启动，则nslookup会显示当前DNS服务器的地址和域名，否则表示named没能正常启动。 下面简单介绍一些基本的DNS诊断。 检查正向DNS解析，在nslookup提示符下输入带域名的主机名，如hp712.my.com，nslookup应能显示该主机名对应的IP地址。如果只输入hp712，nslookup会根据/etc/resolv.conf的定义，自动添加my.com域名，并回答对应的IP地址。 检查反向DNS解析，在nslookup提示符下输入某个IP地址，如192.22.33.20，nslookup应能回答该IP地址所对应的主机名。 检查MX邮件地址记录在nslookup提示符下输入： set q=mx 然后输入某个域名，输入my.com和mail.my.com，nslookup应能够回答对应的邮件服务器地址，即support.my.com和support2.my.com。 动手练习 1.危险的网络命令 互联网的发展使安全成为一个不能忽视的问题，finger、ftp、rcp和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，嗅探器可以非常容易地截获这些口令和数据。而且，这些服务程序的安全验证方式也是有弱点的，很容易受到“中间服务器”方式的攻击。这里笔者把一些不安全的命令根据危险等级列出，见表3所示。 现在ftp、telnet可以被SSH命令代替绑定在端口22上，其连接采用协商方式，使用RSA加密。身份鉴别完成之后，后面的所有流量都使用IDEA进行加密。SSH（Secure Shell）程序可以通过网络登录到远程主机，并执行命令。rcp、rlogin等远程调用命令也逐渐被VNC软件代替。 2.在一张网卡上绑定多个IP地址 在Linux下，可以使用ifconfig方便地绑定多个IP地址到一张网卡。例如，eth0接口的原有IP地址为192.168.0 .254，可以执行下面命令： ifconfig eth0:0 192.168.0.253 netmask 255.255.255.0 ifconfig eth0:1 192.168.0.252 netmask 255.255.255.0 …… 3.修改网卡MAC地址 首先必须关闭网卡设备，命令如下： /sbin/ifconfig eth0 down 修改MAC地址，命令如下： /sbin/ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE 重新启用网卡： /sbin/ifconfig eht0 up 这样网卡的MAC地址就更改完成了。每张网卡的MAC地址是惟一，但不是不能修改的，只要保证在网络中的MAC地址的惟一性就可以了。 4.初步部署IPv6 IPv4技术在网络发展中起到了巨大的作用，不过随着时间的流逝它无论在网络地址的提供、服务质量、安全性等方面都越来越力不从心，IPv6呼之欲出。Linux是所有操作系统中最先支持IPv6的，一般Linux基于2.4内核的Linux发行版本都可以直接使用IPv6，不过主要发行版本没有加载IPv6模块，可以使用命令手工加载，需要超级用户的权限。 (1)加载IPv6模块 使用命令检测，其中inet6 addr: fe80::5054:abff:fe34:5b09/64，就是eth0网卡的IPv6地址。 # modprobe IPv6 ＃ifconfig eth0 Link encap:Ethernet HWaddr 52:54:AB:34:5B:09 inet addr:192.168.1.2 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::5054:abff:fe34:5b09/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:21 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:100 RX bytes:0 (0.0 b) TX bytes:1360 (1.3 Kb) Interrupt:5 Base address:0xec00 (2)使用ping命令检测网卡的IPv6地址是否有效 #ping6 -I eth0 -c 2 fe80::200:e8ff:fea0:2586 和IPv4不一样，使用ping6命令时必须指定一个网卡界面，否则系统不知道将数据包发送到哪个网络设备。I表示Interface、eth0是第一个网卡，－c表示回路，2表示ping6操作两次。结果见图1所示。 图1 IPv6网络下的ping6命令 (3)使用ip命令在IPv6下为eth0增加一个IP地址 #ip -6 addr add 3ffe:ffff:0:f101::1/64 dev eth0 使用ifconfig命令，查看网卡是否出现第二个IPv6地址。 Linux网络的主要优点是能够实现资源和信息的共享，并且用户可以远程访问信息。Linux提供了一组强有力的网络命令来为用户服务，这些工具能够帮助用户进行网络设定、检查网络状况、登录到远程计算机上、传输文件和执行远程命令等。 上面介绍了Linux中比较重要的网络命令，其实Linux还有许多命令需要学习。Linux网络操作命令的一个特点就是命令参数选项很多，并不要求全部记住，关键在于理解命令的主要用途和学会使用帮助信息。 网络安全命令虽然Linux和Windows NT/2000系统一样是一个多用户的系统，但是它们之间有不少重要的差别。对于很多习惯了Windows系统的管理员来讲，如何保证Linux操作系统安全、可靠将会面临许多新的挑战。本文将重点介绍Linux系统安全的命令。 passwd1.作用 passwd命令原来修改账户的登陆密码，使用权限是所有用户。 2.格式 passwd [选项] 账户名称 3.主要参数 -l：锁定已经命名的账户名称，只有具备超级用户权限的使用者方可使用。 -u：解开账户锁定状态，只有具备超级用户权限的使用者方可使用。 -x, –maximum=DAYS：最大密码使用时间（天），只有具备超级用户权限的使用者方可使用。 -n, –minimum=DAYS：最小密码使用时间（天），只有具备超级用户权限的使用者方可使用。 -d：删除使用者的密码, 只有具备超级用户权限的使用者方可使用。 -S：检查指定使用者的密码认证种类, 只有具备超级用户权限的使用者方可使用。 4.应用实例 $ passwd Changing password for user cao. Changing password for cao (current) UNIX password: New UNIX password: Retype new UNIX password: passwd: all authentication tokens updated successfully. 从上面可以看到，使用passwd命令需要输入旧的密码，然后再输入两次新密码。 su1.作用 su的作用是变更为其它使用者的身份，超级用户除外，需要键入该使用者的密码。 2.格式 su [选项]… [-] [USER [ARG]…] 3.主要参数 -f ， –fast：不必读启动文件（如 csh.cshrc 等），仅用于csh或tcsh两种Shell。 -l ， –login：加了这个参数之后，就好像是重新登陆为该使用者一样，大部分环境变量（例如HOME、SHELL和USER等）都是以该使用者（USER）为主，并且工作目录也会改变。如果没有指定USER，缺省情况是root。 -m， -p ，–preserve-environment：执行su时不改变环境变数。 -c command：变更账号为USER的使用者，并执行指令（command）后再变回原来使用者。 USER：欲变更的使用者账号，ARG传入新的Shell参数。 4.应用实例 变更账号为超级用户，并在执行df命令后还原使用者。 su -c df root umask1.作用 umask设置用户文件和目录的文件创建缺省屏蔽值，若将此命令放入profile文件，就可控制该用户后续所建文件的存取许可。它告诉系统在创建文件时不给谁存取许可。使用权限是所有用户。 2.格式 umask [-p] [-S] [mode] 3.参数 －S：确定当前的umask设置。 －p：修改umask 设置。 [mode]：修改数值。 4.说明 传统Unix的umask值是022，这样就可以防止同属于该组的其它用户及别的组的用户修改该用户的文件。既然每个用户都拥有并属于一个自己的私有组，那么这种“组保护模式”就不在需要了。严密的权限设定构成了Linux安全的基础，在权限上犯错误是致命的。需要注意的是，umask命令用来设置进程所创建的文件的读写权限，最保险的值是0077，即关闭创建文件的进程以外的所有进程的读写权限，表示为-rw——-。在～/.bash_profile中，加上一行命令umask 0077可以保证每次启动Shell后, 进程的umask权限都可以被正确设定。 5.应用实例 umask -S u=rwx,g=rx,o=rx umask -p 177 umask -S u=rw,g=,o= 上述5行命令，首先显示当前状态，然后把umask值改为177，结果只有文件所有者具有读写文件的权限，其它用户不能访问该文件。这显然是一种非常安全的设置。 chgrp1.作用 chgrp表示修改一个或多个文件或目录所属的组。使用权限是超级用户。 2.格式 chgrp [选项]… 组 文件… 或 chgrp [选项]… –reference=参考文件 文件… 将每个的所属组设定为。 3.参数 -c, –changes ：像 –verbose，但只在有更改时才显示结果。 –dereference：会影响符号链接所指示的对象，而非符号链接本身。 -h, –no-dereference：会影响符号链接本身，而非符号链接所指示的目的地(当系统支持更改符号链接的所有者，此选项才有效)。 -f, –silent, –quiet：去除大部分的错误信息。 –reference=参考文件：使用的所属组，而非指定的。 -R, –recursive：递归处理所有的文件及子目录。 -v, –verbose：处理任何文件都会显示信息。 4.应用说明 该命令改变指定指定文件所属的用户组。其中group可以是用户组ID，也可以是/etc/group文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。 5.应用实例 改变/opt/local /book/及其子目录下的所有文件的属组为book，命令如下： $ chgrp - R book /opt/local /book chmod1.作用 chmod命令是非常重要的，用于改变文件或目录的访问权限，用户可以用它控制文件或目录的访问权限，使用权限是超级用户。 2.格式 chmod命令有两种用法。一种是包含字母和操作符表达式的字符设定法（相对权限设定）；另一种是包含数字的数字设定法（绝对权限设定）。 （1）字符设定法 chmod [who] [+ | - | =] [mode] 文件名 操作对象who可以是下述字母中的任一个或它们的组合 u：表示用户，即文件或目录的所有者。 g：表示同组用户，即与文件属主有相同组ID的所有用户。 o：表示其它用户。 a：表示所有用户，它是系统默认值。 操作符号 +：添加某个权限。 -：取消某个权限。 =：赋予给定权限，并取消其它所有权限（如果有的话）。 设置mode的权限可用下述字母的任意组合 r：可读。 w：可写。 x：可执行。 X：只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x属性。 s：文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。 t：保存程序的文本到交换设备上。 u：与文件属主拥有一样的权限。 g：与和文件属主同组的用户拥有一样的权限。 o：与其它用户拥有一样的权限。 文件名：以空格分开的要改变权限的文件列表，支持通配符。 一个命令行中可以给出多个权限方式，其间用逗号隔开。 （2） 数字设定法 数字设定法的一般形式为： chmod [mode] 文件名 数字属性的格式应为3个0到7的八进制数，其顺序是(u)(g)(o)文件名，以空格分开的要改变权限的文件列表，支持通配符。数字表示的权限的含义如下：0001为所有者的执行权限；0002为所有者的写权限；0004为所有者的读权限；0010为组的执行权限；0020为组的写权限；0040为组的读权限；0100为其他人的执行权限；0200为其他人的写权限；0400为其他人的读权限；1000为粘贴位置位；2000表示假如这个文件是可执行文件，则为组ID为位置位，否则其中文件锁定位置位；4000表示假如这个文件是可执行文件，则为用户ID为位置位。 3.实例 如果一个系统管理员写了一个表格(tem)让所有用户填写，那么必须授权用户对这个文件有读写权限，可以使用命令： ＃chmod 666 tem 上面代码中，这个666数字是如何计算出来的呢？0002为所有者的写权限，0004为所有者的读权限，0020为组的写权限，0040为组的读权限，0200为其他人的写权限，0400为其他人的读权限，这6个数字相加就是666（注以上数字都是八进制数），结果见图1所示。 如果用字符权限设定使用下面命令： ＃chmod a =wx tem chown1.作用 更改一个或多个文件或目录的属主和属组。使用权限是超级用户。 2.格式 chown [选项] 用户或组 文件 3.主要参数 –dereference：受影响的是符号链接所指示的对象，而非符号链接本身。 -h, –no-dereference：会影响符号链接本身，而非符号链接所指示的目的地(当系统支持更改符号链接的所有者，此选项才有效)。 –from=目前所有者:目前组只当每个文件的所有者和组符合选项所指定的，才会更改所有者和组。其中一个可以省略，这已省略的属性就不需要符合原有的属性。 -f, –silent, –quiet：去除大部分的错误信息。 -R, –recursive：递归处理所有的文件及子目录。 -v, –verbose：处理任何文件都会显示信息。 4.说明 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或用户ID；组可以是组名或组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的目录下以后，让用户拥有使用该文件的权限。 5.应用实例 1.把文件shiyan.c的所有者改为wan $ chown wan shiyan.c 2.把目录/hi及其下的所有文件和子目录的属主改成wan，属组改成users。 $ chown - R wan.users /hi chattr1.作用 修改ext2和ext3文件系统属性(attribute)，使用权限超级用户。 2.格式 chattr [-RV] [-+=AacDdijsSu] [-v version] 文件或目录 3.主要参数 －R：递归处理所有的文件及子目录。 －V：详细显示修改内容，并打印输出。 －：失效属性。 ＋：激活属性。 = ：指定属性。 A：Atime，告诉系统不要修改对这个文件的最后访问时间。 S：Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。 a：Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。 i：Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。 D：检查压缩文件中的错误。 d：No dump，在进行文件系统备份时，dump程序将忽略这个文件。 C：Compress，系统以透明的方式压缩这个文件。从这个文件读取时，返回的是解压之后的数据；而向这个文件中写入数据时，数据首先被压缩之后才写入磁盘。 s：Secure Delete，让系统在删除这个文件时，使用0填充文件所在的区域。 u：Undelete，当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件。 4.说明 chattr命令的作用很大，其中一些功能是由Linux内核版本来支持的，如果Linux内核版本低于2.2，那么许多功能不能实现。同样－D检查压缩文件中的错误 的功能，需要2.5.19以上内核才能支持。另外，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能 保护/、/dev、/tmp、/var目录。 5.应用实例 1.恢复/root目录,即子目录的所有文件 # chattr -R +u/root 2.用chattr命令防止系统中某个关键文件被修改 在Linux下，有些配置文件(passwd ,fatab)是不允许任何人修改的，为了防止被误删除或修改，可以设定该文件的“不可修改位(immutable)”，命令如下： # chattr +i /etc/fstab sudo1.作用 sudo是一种以限制配置文件中的命令为基础，在有限时间内给用户使用，并且记录到日志中的命令，权限是所有用户。 2.格式 sudo [-bhHpV] [-s ] [-u ] [指令] sudo [-klv] 3.主要参数 －b：在后台执行命令。 -h：显示帮助。 -H：将HOME环境变量设为新身份的HOME环境变量。 -k：结束密码的有效期，即下次将需要输入密码。 -l：列出当前用户可以使用的命令。 -p：改变询问密码的提示符号。 -s ：执行指定的Shell。 -u ：以指定的用户为新身份，不使用时默认为root。 -v：延长密码有效期5分钟。 4.说明 sudo 命令的配置在/etc/sudoers文件中。当用户使用sudo时，需要输入口令以验证使用者身份。随后的一段时间内可以使用定义好的命令，当使用配置文件中没有的命令时，将会有报警的记录。sudo是系统管理员用来允许某些用户以root身份运行部分/全部系统命令的程序。一个明显的用途是增强了站点的安全性，如果需要每天以超级用户的身份做一些日常工作，经常执行一些固定的几个只有超级用户身份才能执行的命令，那么用sudo是非常适合的。 ps1.作用 ps显示瞬间进程 (process) 的动态，使用权限是所有使用者。 2.格式 ps [options] [–help] 3.主要参数 ps的参数非常多, 此出仅列出几个常用的参数。 -A：列出所有的进程。 -l：显示长列表。 -m：显示内存信息。 -w：显示加宽可以显示较多的信息。 -e：显示所有进程。 a：显示终端上的所有进程,包括其它用户的进程。 -au：显示较详细的信息。 -aux：显示所有包含其它使用者的进程。 4.说明 要对进程进行监测和控制，首先要了解当前进程的情况，也就是需要查看当前进程。ps命令就是最基本、也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行、运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等。图2给出了ps-aux命令详解。大部分信息都可以通过执行该命令得到。最常用的三个参数是u、a、x。下面就结合这三个参数详细说明ps命令的作用：ps aux USER表示进程拥有者；PID表示进程标示符；%CPU表示占用的CPU使用率；%MEM占用的物理内存使用率；VSZ表示占用的虚拟内存大小；RSS为进程占用的物理内存值；TTY为终端的次要装置号码。 STAT 表示进程的状态，其中D为不可中断的静止（I/O动作）；R正在执行中；S静止状态；T暂停执行；Z不存在，但暂时无法消除；W没有足够的内存分页可分配；高优先序的进程；N低优先序的进程；L有内存分页分配并锁在内存体内 (实时系统或I/O)。START为进程开始时间。TIME为执行的时间。COMMAND是所执行的指令。 4.应用实例 在进行系统维护时，经常会出现内存使用量惊人，而又不知道是哪一个进程占用了大量进程的情况。除了可以使用top命令查看内存使用情况之外，还可以使用下面的命令： ps aux | sort +5n who1.作用 who显示系统中有哪些用户登陆系统，显示的资料包含了使用者ID、使用的登陆终端、上线时间、呆滞时间、CPU占用，以及做了些什么。 使用权限为所有用户。 2.格式 who - [husfV] [user] 3.主要参数 -h：不要显示标题列。 -u：不要显示使用者的动作/工作。 -s：使用简短的格式来显示。 -f：不要显示使用者的上线位置。 -V：显示程序版本。 4.说明 该命令主要用于查看当前在线上的用户情况。如果用户想和其它用户建立即时通信，比如使用talk命令，那么首先要确定的就是该用户确实在线上,不然talk进程就无法建立起来。又如，系统管理员希望监视每个登录的用户此时此刻的所作所为，也要使用who命令。who命令应用起来非常简单，可以比较准确地掌握用户的情况,所以使用非常广泛。 动手练习 1.使用Linux命令检测系统入侵者 安装过Mandrake Linux和Red Hat Linux的用户都会知道，Linux系统会内置三种不同级别（标准、高、更高）的防火墙，当进行了Linux服务器的安装和一些基本的设置后，服务器应该说是比较安全的，但是也会有黑客通过各种方法利用系统管理员的疏忽侵入系统。如何快速查找黑客非常重要。 一般来说，可以使用命令查询黑客是否入侵，如果黑客嗅探网络，那么它必须使网卡接口处于混杂模式，使用下面命令进行查询： ＃ifconfig -a eth0 Link encap:Ethernet HWaddr 00:00:E8:A0:25:86 inet addr:192.168.1.7 Bcast:192.168.1.255 Mask:255.255.255.0 UP BROADCAST RUNNING PROMISCUOUS MTU:1500 Metric:1 …… 从这个命令的输出中，可以看到上面讲到的这些概念。第一行的00:00:E8:A0:25:86是mac地址，第二行的192.168.1.7是IP地址， 第四行讲的是接收数据状态，这时正在被黑客嗅探。一般而言，网卡有几种接收数据帧的状态，如Broadcast、Multicast、Promiscuous等。Broadcast是指接收所有类型为广播报文的数据帧；Multicast是指接收特定的组播报文；Promiscuous则是通常说的混杂模式，是指对报文中的目的硬件地址不加任何检查、全部接收的工作模式。 2.限制su命令的滥用 我们知道，超级用户在Linux中有最大的权利，几乎所有黑客都想得到这个目标。Linux可以增加对切换到超级用户的限制。使用PAM（Pluggable Authentication Modules）可以禁止除在wheel组以外的任何人su成root，修改/etc/pam.d/su文件，除去屏蔽标识#。使用/usr/sbin/usermod G10 bjecadm将bjecadm这个账号加入gid为10的组，就是wheel组。命令如下： /etc/pam.d/su # 使用密码验证＃ auth sufficient /lib/security/pam_wheel.so debug # 限制只有wheel组用户才可以切换到root＃ auth required /lib/security/pam_wheel.so use_uid chmod -G10 bjecadm 另外，每当用户试图使用su命令进入系统用户时,命令将在/usr/adm/sulog文件中写一条信息,若该文件记录了大量试图用su进入root的无效操作信息,则表明了可能有人企图破译root口令。 Linux命令有着强大的功能。对于Linux系统管理员来说，往往只需要通过各种安全命令技巧，组合构成安全防线。从计算机安全的角度看，世界上没有绝对安全的计算机系统，Linux系统也不例外。 其他命令在前面几讲中，我们把Linux命令按照在系统中的作用分成几个部分分别予以介绍。但是，还有一些命令不好划分，然而学习它们同样是比较重要的。 tar1.作用 tar命令是Unix/Linux系统中备份文件的可靠方法，几乎可以工作于任何环境中，它的使用权限是所有用户。 2.格式 tar [主选项+辅选项] 文件或目录 3.主要参数 使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。 主选项： -c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。 -r 把要存档的文件追加到档案文件的未尾。例如用户已经做好备份文件，又发现还有一个目录或是一些文件忘记备份了，这时可以使用该选项，将忘记的目录或文件追加到备份文件中。 -t 列出档案文件的内容，查看已经备份了哪些文件。 -u 更新文件。就是说，用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最后。 -x 从档案文件中释放文件。 辅助选项： -b 该选项是为磁带机设定的，其后跟一数字，用来说明区块的大小，系统预设值为20（20×512 bytes）。 -f 使用档案文件或设备，这个选项通常是必选的。 -k 保存已经存在的文件。例如把某个文件还原，在还原的过程中遇到相同的文件，不会进行覆盖。 -m 在还原文件时，把所有文件的修改时间设定为现在。 -M 创建多卷的档案文件，以便在几个磁盘中存放。 -v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。 -w 每一步都要求确认。 -z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。 4.应用说明 tar 是Tape Archive（磁带归档）的缩写，最初设计用于将文件打包到磁带上。如果下载过Linux的源代码，或许已经碰到过tar文件，请注意，不要忘了Linux是区分大小写的。例如，tar命令应该总是以小写的形式执行。命令行开关可以是大写、小写或大小写的混合。例如，-t和-T执行不同的功能。文件或目录名称可以混合使用大小写，而且就像命令和命令行开关一样是区分大小写的。 5.应用实例 tar是一个命令行的工具，没有图形界面。使用Konsole打开一个终端窗口，接下来是一个简单的备份命令（在/temp目录中创建一个back.tar的文件，/usr目录中所有内容都包含在其中。）： $tar cvf - /usr &gt; /temp/back.tar 另外，tar命令支持前面第三讲中讲过的crontab命令，可以用crontab工具设置成基于时间的有规律地运行。例如，每晚6点把/usr目录备份到hda—第一个IDE接口的主驱动器 (总是位于第一个硬盘)中，只要将下面语句添加到root的crontab中即可： $00 06 * tar cvf /dev/hda1/usrfiles.tar - /usr 一般情况下，以下这些目录是需要备份的： /etc 包含所有核心配置文件，其中包括网络配置、系统名称、防火墙规则、用户、组，以及其它全局系统项。 /var 包含系统守护进程（服务）所使用的信息，包括DNS配置、DHCP租期、邮件缓冲文件、HTTP服务器文件、dB2实例配置等。 /home 包含所有默认用户的主目录，包括个人设置、已下载的文件和用户不希望失去的其它信息。 /root 根（root）用户的主目录。 /opt 是安装许多非系统文件的地方。IBM软件就安装在这里。OpenOffice、JDK和其它软件在默认情况下也安装在这里。 有些目录是可以不备份的： /proc 应该永远不要备份这个目录。它不是一个真实的文件系统，而是运行内核和环境的虚拟化视图，包括诸如/proc/kcore这样的文件，这个文件是整个运行内存的虚拟视图。备份这些文件只是在浪费资源。 /dev 包含硬件设备的文件表示。如果计划还原到一个空白的系统，就可以备份/dev。然而，如果计划还原到一个已安装的Linux 系统，那么备份/dev是没有必要的。 unzip1.作用 unzip命令位于/usr/bin目录中，它们和MS DOS下的pkzip、pkunzip及MS Windows中的Winzip软件功能一样，将文件压缩成.zip文件，以节省硬盘空间，当需要的时候再将压缩文件用unzip命令解开。该命令使用权限是所有用户。 2.格式 unzip [-cflptuvz][-agCjLMnoqsVX][-P ][.zip文件][文件][-d ][-x ] 3.主要参数 -c：将解压缩的结果显示到屏幕上，并对字符做适当的转换。 -f：更新现有的文件。 -l：显示压缩文件内所包含的文件。 -p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。 -t：检查压缩文件是否正确。 -u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其它文件解压缩到目录中。 -v：执行是时显示详细的信息。 -z：仅显示压缩文件的备注文字。 -a：对文本文件进行必要的字符转换。 -b：不要对文本文件进行字符转换。 -C：压缩文件中的文件名称区分大小写。 -j：不处理压缩文件中原有的目录路径。 -L：将压缩文件中的全部文件名改为小写。 -M：将输出结果送到more程序处理。 -n：解压缩时不要覆盖原有的文件。 -o：不必先询问用户，unzip执行后覆盖原有文件。 -P：使用zip的密码选项。 -q：执行时不显示任何信息。 -s：将文件名中的空白字符转换为底线字符。 -V：保留VMS的文件版本信息。 -X：解压缩时同时回存文件原来的UID/GID。 [.zip文件]：指定.zip压缩文件。 [文件]：指定要处理.zip压缩文件中的哪些文件。 -d：指定文件解压缩后所要存储的目录。 -x：指定不要处理.zip压缩文件中的哪些文件。 -Z unzip：-Z等于执行zipinfo指令。在Linux中，还提供了一个叫zipinfo的工具，能够察看zip压缩文件的详细信息。unzip最新版本是5.50。 gunzip1.作用 gunzip命令作用是解压文件，使用权限是所有用户。 2.格式 gunzip [-acfhlLnNqrtvV][-s ][文件…] 或者 gunzip [-acfhlLnNqrtvV][-s ][目录] 3.主要参数 -a或–ascii：使用ASCII文字模式。 -c或–stdout或–to-stdout：把解压后的文件输出到标准输出设备。 -f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在，以及该文件是否为符号连接。 -h或–help：在线帮助。 -l或–list：列出压缩文件的相关信息。 -L或–license：显示版本与版权信息。 -n或–no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理。 -N或–name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。 -q或–quiet：不显示警告信息。 -r或–recursive：递归处理，将指定目录下的所有文件及子目录一并处理。 -S或–suffix：更改压缩字尾字符串。 -t或–test：测试压缩文件是否正确无误。 -v或–verbose：显示指令执行过程。 -V或–version：显示版本信息。 4.说明 gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件，这些压缩文件预设最后的扩展名为“.gz”。事实上，gunzip就是gzip的硬连接，因此不论是压缩或解压缩，都可通过gzip指令单独完成。gunzip最新版本是1.3.3 。 man1.作用 man命令用来提供在线帮助，使用权限是所有用户。在Linux系统中存储着一部联机使用的手册，以供用户在终端上查找。使用man命令可以调阅其中的帮助信息，非常方便和实用。 2.格式 man 命令名称 man [-acdfhkKtwW] [-m system] [-p string] [-C config_file] [-M path] [-P pager] [-S section_list] [section] name … 3.参数 -C config_file：指定设定文件man.conf，缺省值是/etc/man.conf。 -M path：指定了联机手册的搜寻路径, 如果没有指定则使用环境变数MANPATH的设定；如果没有使用MANPATH， 则会使用/usr/lib/man.conf内的设定；如果MANPATH是空字串，则表示使用缺省值。 -P pager：指定使用何种pager.man会优先使用此选项设定，然后是依环境变数MANPAGER设定，然后是环境变数PAGER；man缺省使用/usr/bin/less -is。 -S section_list man：所搜寻的章节列表(以冒号分隔)，此选项会覆盖环境变数MANSECT的设定。 -a man：缺省情况是在显示第一个找到的手册之后，就会停止搜寻，使用此选项会强迫man继续显示所有符合name的联机手册。 -c：即使有最新的cat page，也继续对联机手册重新作排版，本选项在屏幕的行列数改变时或已排版的联机手册损坏时特别有意义。 -d：不要真的显示联机手册，只显示除错讯息。 -D：同时显示联机手册与除错讯息。 -h：显示求助讯息然后结束程式 。 -K：对所有的联机手册搜寻所指定的字串。请注意，本功能回应速度可能很慢，如果指定section（区域）会对速度有帮助。 -m system：依所指定的system名称而指定另一组的联机手册。 man：是manual（手册）的缩写。在输入命令有困难时，可以立刻得到这个文档。例如, 如果使用ps命令时遇到困难，可以输入man ps得到帮助信息，此时会显示出ps的手册页（man page）。 由于手册页man page是用less程序来看的(可以方便地使屏幕上翻和下翻), 所以在man page里可以使用less的所有选项。 less中比较重要的功能键有: [q] 退出； [Enter] 一行行地下翻； [Space] 一页页地下翻； 上翻一页； [/] 后跟一个字符串和[Enter]来查找字符串； [n] 发现上一次查找的下一个匹配。 4.阅读手册页 手册页在很少的空间里提供了很多的信息， 这里简单介绍一下大多数手册页中都有的部分内容。Linux手册页主要有九个部分：用户指令、系统调用、程序库、设备说明、文件格式、游戏、杂项、系统指令、内核. 5.应用实例 Linux命令中有一些基础的、重要的命令，例如ps、find、cat和ls等。下面来举一个综合应用的例子，由此可以看出man的地位在Linux中可谓至关重要。但是，man所显示的信息却不是普通的文本，如果直接将这些文字重定向到一个文本文件，就会发现在man中高亮显示的文字就变成了两个，而且有不计其数的制表符，使打印、编辑都变得非常不便。不过，使用下面这样一条语句就能得到ps命令打印。 # man ps | col -b | lpr 这条命令同时运用了输出重定向和管道两种技巧，作用是将ps命令的帮助信息可以直接打印出来。更多的Man文件可以查看Linux Man unencode1.作用 unencode命令可以把一个二进制文件表编码为一个文本文件，使用权限是所有用户。 2.格式 uuencode [-hv] [源文件] 目标文件 3.主要参数 －h：列出指令使用格式(help) 。 －v：列出版本信息。 4.应用说明 uuencode指令可以将二进制文件转化成可使用电子邮件发送的ASCII编码形式。uuencode编码后的资料都以 begin开始，以end作为结束，且通常其中的每一行的开始均为“M”，中间部分是编码过的文件，编码后的文件比源文件要大一些。 uudecode1.作用 uudecode命令用来将uuencode编码后的档案还原，uudecode只会将begin与end标记之间的编码资料还原，程序会跳过标记以外的资料。它的使用权限为所有用户。 2.格式 uuencode [-hv] [file1 …] 3.主要参数 －h：列出指令使用格式(help)。 －v：列出版本信息。 4.应用实例 使用下面命令一次还原几个文件： uuencode file1.uud file2.uud file3.uud 动手练习 1.在Linux命令行下发送邮件 虽然Linux桌面应用发展很快，但是命令行（Shell）在Linux中依然有很强的生命力。如果能确认电子邮件服务器支持8bit的字节，就可以直接使用下面命令： cat ＜附件文件名＞ | mail ＜邮件地址＞ cat（cat是concatenate的缩写）命令是将几个文件处理成一个文件，并将这种处理的结果保存到一个单独的输出文件，这里我们用它来合并邮件的文本。 写好邮件名称，比如叫cjkmail，然后使用下面命令： $uuencode ＜附件文件名＞ ＜附件文件名＞ &gt;&gt;cjkmail 这样就可以用vi编辑器写cjkmail文件，并在前面写上信的正文，然后寄出。 对方收到信后，把信中属于cjkmail中的内容拷贝出来，存为themail.uue。如果对方是在Windows下，就可以用WinRAR或WinZip解压，这样就可以看到附件。 如果对方也使用Linux，可以用uudecode命令还原： $ undencode -o＜附件文件名＞ themail.uue 2.实现tar的分卷 笔者想把一个378MB的文件压缩成多个63MB的文件（笔者的USB为64MB），使用下面命令： $tar czvf - dir | split -d -b 63m 然后合并命令： $cat x* &gt; dir.tgz 以上例子实际是由三个命令组合完成的，即用tar打包，用split分割，用cat合并。“tar czvf - dir”的意思是把dir目录打包，并输出到标准输出（argv），这样就可以直接用管道输出给split。 3.连续执行一个命令 使用watch命令，可以反复执行命令。如果和ls配合，可以达到观察某文件大小变化的效果。 $watch ls －l file.name 4.用tar命令导出一个文件 有一个tar格式的DVD文件GLvPro6.4_linux.tar，因为该文件非常大（4.7GB），如果全部解压比较麻烦，可以用下面命令先导出readme.txt看看。 tar xvf GLvPro6.4_linux.tar readme.txt 这样readme.txt就单独被导出了。 5.用tar打包一个目录时只备份其中的几个子目录 tar cf –exclude home/cjh home/cao 这样home目录下只有cjh和cao两个子目录备份。]]></content>
  </entry>
  <entry>
    <title><![CDATA[持续集成、持续部署、持续交付]]></title>
    <url>%2F2019%2F05%2F01%2FLinux%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%E3%80%81%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%2F</url>
    <content type="text"><![CDATA[持续集成、持续部署、持续交付集成是指软件个人研发的部分向软件整体部分交付，以便尽早发现个人开发部分的问题； 部署是代码尽快向可运行的开发/测试节交付，以便尽早测试； 交付是指研发尽快向客户交付，以便尽早发现生产环境中存在的问题。 持续集成持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 持续交付持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。 持续部署持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。 而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。使得问题不会放大到其他部分和后面的环节。 举个例子，你家装修厨房，其中一项是铺地砖，边角地砖要切割大小。如果一次全切割完再铺上去，发现尺寸有误的话浪费和返工时间就大了，不如切一块铺一块。这就是持续集成。 装修厨房有很多部分，每个部分都有检测手段，如地砖铺完了要测试漏水与否，线路铺完了要通电测试电路通顺，水管装好了也要测试冷水热水。如果全部装完了再测，出现问题可能会互相影响，比如电路不行可能要把地砖给挖开……。那么每完成一部分就测试，这是持续部署。 全部装修完了，你去验收，发现地砖颜色不合意，水池太小，灶台位置不对，返工吗？所以不如没完成一部分，你就去用一下试用验收，这就是持续交付。 参考连接：https://blog.csdn.net/peterxiaoq/article/details/73648732]]></content>
      <tags>
        <tag>Devops</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何维修墙上网络端口]]></title>
    <url>%2F2019%2F04%2F29%2FLife%2F%E5%A6%82%E4%BD%95%E7%BB%B4%E4%BF%AE%E5%A2%99%E4%B8%8A%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[如何维修网络端口客户墙上端口由于老化、接触不良导致链路不通，可以直接使用转接头替换墙上的端口，这种方法方便快捷，但是不美观。那么墙上的端口又要怎么维修呢？ 先把这两个螺丝拧下来，把线盒拆开，剪掉连接线盒盖的网线，拿出线盒盖。 扣这里把这个金属扣子弄开 线盒盖的背面 用螺丝刀拧侧面的卡扣，可以把盖子打开 打开盖子后残留的网线就可以拿出来了 这时候就可以把墙上的新一段网线，按顺序插回去（不能按紧盖子，要留空隙网线才能穿过去） 注意顺序！！！橙色的格子就表示橙色，橙色的三角代表橙白，以此类推。按照数字下面的颜色是568B线序（常用），上面是568A 最后扣上这个扣子，把盖子装回墙上，测线通过就可以了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Django数据库防注入]]></title>
    <url>%2F2019%2F04%2F28%2FDjango%2FDjango%E6%95%B0%E6%8D%AE%E5%BA%93%E9%98%B2%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[Django SQL防注入SQL注入是所有网站建设都应该注意防范的东西，使用Django当然也不例外。下面介绍几个Django中防范SQL注入的方案。 方案一 总是使用Django自带的数据库API。它会根据你所使用的数据库服务器（例如PostSQL或者MySQL）的转换规则，自动转义特殊的SQL参数。这被运用到了整个Django的数据库API中，只有一些例外： 传给 extra() 方法的 where 参数。 (参考 附录 C。) 这个参数故意设计成可以接受原始的SQL。 使用底层数据库API的查询。 方案二 看下面的Python代码： from django.db import connectiondef user_contacts(request): user = request.GET[*'username'*] sql = *"SELECT \* FROM user_contacts WHERE* *username* *= %s"* cursor = connection.cursor() cursor.execute(sql, [user]) # 通过传参的方式执行原生SQL # ... do something with the results 请注意在cursor.execute() 的SQL语句中使用“%s”，而不要在SQL内直接添加参数。 如果你使用这项技术，数据库基础库将会自动添加引号，同时在必要的情况下转意你的参数。]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django小知识]]></title>
    <url>%2F2019%2F04%2F28%2FDjango%2FDjango%E5%B0%8F%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[查看model列名Billing_Cost.objects.get(id=1)._meta.fields 忽略模版渲染语法使用标签verbatim endverbatim Model只查询特定列的结果Billing_Cost.objects.values(‘resource_type’,’change_time’).get(id=1) Model查询排除特定列的结果Billing_Cost.objects.defer(‘resource_type’,’change_time’).values().get(id=1)]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS选择器]]></title>
    <url>%2F2019%2F04%2F28%2FJavaScript%2FCSS%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[CSS 选择器元素选择器/* group 1 */h1 &#123;color:silver; background:white;&#125;h2 &#123;color:silver; background:gray;&#125;h3 &#123;color:white; background:gray;&#125;h4 &#123;color:silver; background:white;&#125;b &#123;color:gray; background:white;&#125;/* group 2 */h1, h2, h4 &#123;color:silver;&#125;h2, h3 &#123;background:gray;&#125;h1, h4, b &#123;background:white;&#125;h3 &#123;color:white;&#125;b &#123;color:gray;&#125;/* group 3 */h1, h4 &#123;color:silver; background:white;&#125;h2 &#123;color:silver;&#125;h3 &#123;color:white;&#125;h2, h3 &#123;background:gray;&#125;b &#123;color:gray; background:white;&#125; 通配符选择器* &#123;color:red;&#125; ID选择器#intro &#123;font-weight:bold;&#125; 只能在文档中使用一次 不能结合使用 类选择器.important &#123;color:red;&#125;p.important &#123;color:red;&#125; /*结合元素选择器*/.important.warning &#123;background:silver;&#125; /*选择同时包含多个类*/ 属性选择器[title] &#123;color:red;&#125;a[href] &#123;color:red;&#125;a[href][title] &#123;color:red;&#125;a[href='http://baidu.com'] &#123;color:red;&#125;p[class~="important"] &#123;color: red;&#125; /*根据部分属性值选择*/ 后代选择器（派生选择）h1 em &#123;color:red;&#125; 后代选择器有一个易被忽视的方面，即两个元素之间的层次间隔可以是无限的。 子元素选择器h1 &gt; strong &#123;color:red;&#125; /*父元素为h1的strong元素*/table.company td &gt; p 两个元素之间的层次间隔是一层。 没有父类选择器，因为html渲染是从外层到里层的，根据子类影响父类，违背了渲染顺序。 兄弟选择器h1 + p &#123;margin-top:50px;&#125; /*与h1相邻的p元素*/ 两个元素在同一层 伪类选择器锚伪类a:link &#123;color: #FF0000&#125; /* 未访问的链接 */a:visited &#123;color: #00FF00&#125; /* 已访问的链接 */a:hover &#123;color: #FF00FF&#125; /* 鼠标移动到链接上 */a:active &#123;color: #0000FF&#125; /* 选定的链接 */ 提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。 提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。 first-child 伪类p:first-child &#123;font-weight: bold;&#125; /* 选择作为第一个子元素的 p 元素 */p:first-of-type &#123;font-weight: bold;&#125; /* 指定父元素的首个 p 元素 */p &#123;font-weight: bold;&#125; /* 选择所有p元素 */p &gt; i:first-child &#123; font-weight:bold;&#125; /* 匹配p元素的第一个li子元素*/p:first-child i &#123; color:blue;&#125; /* 匹配第一个p元素所有li元素*/ :first-child 伪类来选择作为第一个子元素的 xxx 元素。(这个元素是其父元素的第一个子元素) :first-of-type 伪元素选择的是指定父元素的首个 xxx 元素（这个元素可以不是其父元素的第一个子元素） 选择器参考：(来自菜鸟教程) 选择器 例子 例子描述 CSS .class .intro 选择 class=”intro” 的所有元素。 1 #id #firstname 选择 id=”firstname” 的所有元素。 1 * * 选择所有元素。 2 element p 选择所有 &lt;p&gt; 元素。 1 element,element div,p 选择所有 &lt;div&gt; 元素和所有 &lt;p&gt; 元素。 1 element element div p 选择 &lt;div&gt; 元素内部的所有 &lt;p&gt; 元素。 1 element&gt;element div&gt;p 选择父元素为 &lt;div&gt; 元素的所有 &lt;p&gt; 元素。 2 element+element div+p 选择紧接在 &lt;div&gt; 元素之后的所有 &lt;p&gt; 元素。 2 [attribute] [target] 选择带有 target 属性所有元素。 2 [attribute=value] [target=_blank] 选择 target=”_blank” 的所有元素。 2 [attribute~=value] [title~=flower] 选择 title 属性包含单词 “flower” 的所有元素。 2 :link a:link 选择所有未被访问的链接。 1 :visited a:visited 选择所有已被访问的链接。 1 :active a:active 选择活动链接。 1 :hover a:hover 选择鼠标指针位于其上的链接。 1 :focus input:focus 选择获得焦点的 input 元素。 2 :first-letter p:first-letter 选择每个 &lt;p&gt; 元素的首字母。 1 :first-line p:first-line 选择每个 &lt;p&gt; 元素的首行。 1 :first-child p:first-child 选择属于父元素的第一个子元素的每个 &lt;p&gt; 元素。 2 :before p:before 在每个 `html &lt;p&gt; 元素的内容之前插入内容。 2 :after p:after 在每个 &lt;p&gt; 元素的内容之后插入内容。 2 :lang(language) p:lang(it) 选择带有以 “it” 开头的 lang 属性值的每个 &lt;p&gt; 元素。 2 element1~element2 p~ul 选择前面有 &lt;p&gt; 元素的每个` &lt;ul&gt; 元素。 3 [attribute^=value] a[src^=”https”] 选择其 src 属性值以 “https” 开头的每个 &lt;a&gt; 元素。 3 [attribute$=value] a[src$=”.pdf”] 选择其 src 属性以 “.pdf” 结尾的所有 &lt;a&gt; 元素。 3 [attribute**=value*] a[src*=”abc”] 选择其 src 属性中包含 “abc” 子串的每个 &lt;a&gt; 元素。 3 :first-of-type p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 3 :last-of-type p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 3 :only-of-type p:only-of-type 选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 3 :only-child p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。 3 :nth-child(n) p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。 3 :nth-last-child(n) p:nth-last-child(2) 同上，从最后一个子元素开始计数。 3 :nth-of-type(n) p:nth-of-type(2) 选择属于其父元素第二个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 3 :nth-last-of-type(n) p:nth-last-of-type(2) 同上，但是从最后一个子元素开始计数。 3 :last-child p:last-child 选择属于其父元素最后一个子元素每个 &lt;p&gt; 元素。 3 :root :root 选择文档的根元素。 3 :empty p:empty 选择没有子元素的每个 &lt;p&gt; 元素（包括文本节点）。 3 :target #news:target 选择当前活动的 #news 元素。 3 :enabled input:enabled 选择每个启用的 &lt;input&gt; 元素。 3 :disabled input:disabled 选择每个禁用的 &lt;input&gt; 元素 3 :checked input:checked 选择每个被选中的 &lt;input&gt; 元素。 3 :not(selector) :not(p) 选择非 &lt;p&gt; 元素的每个元素。 3 ::selection ::selection 选择被用户选取的元素部分。 3 一个有趣的练习网站： http://flukeout.github.io]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JQuery基础知识]]></title>
    <url>%2F2019%2F04%2F28%2FJavaScript%2FJQuery%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[JQuery基础知识 来源：廖雪峰js教程 https://www.liaoxuefeng.com jQuery能帮我们干这些事情： 消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码； 简洁的操作DOM的方法：写$(‘#test’)肯定比document.getElementById(‘test’)来得简洁； 轻松实现动画、修改CSS等各种操作。 $符号\$是著名的jQuery符号。实际上，jQuery把所有功能全部封装在一个全局变量jQuery中，而\$也是一个合法的变量名，它是变量jQuery的别名： window.jQuery; // jQuery(selector, context)window.$; // jQuery(selector, context)$ === jQuery; // truetypeof($); // 'function' \$本质上就是一个函数，但是函数也是对象，于是\$除了可以直接调用外，也可以有很多其他属性。 选择器// 按ID查找var div = $('#abc');// 按Tag查找var ps = $('p'); // 返回所有&lt;p&gt;节点ps.length; // 数一数页面有多少个&lt;p&gt;节点// 按Class查找var a = $('.red'); // 所有节点包含`class="red"`都将返回// 按属性查找var email = $('[name=email]'); // 找出&lt;??? name="email"&gt;var passwordInput = $('[type=password]'); // 找出&lt;??? type="password"&gt;var a = $('[items="A B"]'); // 找出&lt;??? items="A B"&gt;//按属性查找还可以使用前缀查找或者后缀查找：var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM// 例如: name="icon-1", name="icon-2"var names = $('[name$=with]'); // 找出所有name属性值以with结尾的DOM// 例如: name="startswith", name="endswith"var icons = $('[class^="icon-"]'); // 找出所有class包含至少一个以`icon-`开头的DOM// 组合查找var emailInput = $('input[name=email]');var tr = $('tr.red'); // 找出&lt;tr class="red ..."&gt;...&lt;/tr&gt;// 多项选择器$('p,div'); // 把&lt;p&gt;和&lt;div&gt;都选出来$('p.red,p.green'); // 把&lt;p class="red"&gt;和&lt;p class="green"&gt;都选出来 jQuery的选择器不会返回undefined或者null, 如果无符合的对象，返回的jQuery对象是[]。 jQuery对象和DOM对象之间可以互相转化： var div = $('#abc'); // jQuery对象var divDom = div.get(0); // 假设存在div，获取第1个DOM元素var another = $(divDom); // 重新把DOM包装为jQuery对象 更高级的选择器&lt;!-- HTML结构 --&gt;&lt;div class="testing"&gt; &lt;ul class="lang"&gt; &lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt; &lt;li class="lang-python"&gt;Python&lt;/li&gt; &lt;li class="lang-lua"&gt;Lua&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;// 层级选择器$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点$('ul.lang li.lang-javascript');$('div.testing li.lang-javascript');// 子选择器 $('parent&gt;child')类似层级选择器，但是限定了层级关系必须是父子关系，就是&lt;child&gt;节点必须是&lt;parent&gt;节点的直属子节点。$('ul.lang&gt;li.lang-javascript'); // 可以选出[&lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt;]$('div.testing&gt;li.lang-javascript'); // [], 无法选出，因为&lt;div&gt;和&lt;li&gt;不构成父子关系// 过滤器$('ul.lang li:first-child'); // 仅选出JavaScript$('ul.lang li:last-child'); // 仅选出Lua$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素// 查找和过滤// 用find()从元素中查找var ul = $('ul.lang'); // 获得&lt;ul&gt;var dy = ul.find('.dy'); // 获得JavaScript, Python, Schemevar swf = ul.find('#swift'); // 获得Swiftvar hsk = ul.find('[name=haskell]'); // 获得Haskell// 用parent()向上查找var swf = $('#swift'); // 获得Swiftvar parent = swf.parent(); // 获得Swift的上层节点&lt;ul&gt;var a = swf.parent('.red'); // 获得Swift的上层节点&lt;ul&gt;，同时传入过滤条件。如果ul不符合条件，返回空jQuery对象// next()和prev()向后向前查找var swift = $('#swift');swift.next(); // Schemeswift.next('[name=haskell]'); // 空的jQuery对象，因为Swift的下一个元素Scheme不符合条件[name=haskell]swift.prev(); // Pythonswift.prev('.dy'); // Python，因为Python同时符合过滤器条件.dy// filter()从中过滤var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskellvar a = langs.filter('.dy'); // 拿到JavaScript, Python, Scheme// 切片var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskellvar js = langs.first(); // JavaScript，相当于$('ul.lang li:first-child')var haskell = langs.last(); // Haskell, 相当于$('ul.lang li:last-child')var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致 操作DOM// 修改文本$('#test-ul li[name=book]').text(); // 'Java &amp; JavaScript'$('#test-ul li[name=book]').text('修改内容'); // 'Java &amp; JavaScript'$('#test-ul li[name=book]').html(); // 'Java &amp;amp; JavaScript'// 修改cssvar div = $('#test-div');div.css('color'); // '#000033', 获取CSS属性div.css('color', '#336699'); // 设置CSS属性div.css('color', ''); // 清除CSS属性// 修改classvar div = $('#test-div');div.hasClass('highlight'); // false， class是否包含highlightdiv.addClass('highlight'); // 添加highlight这个classdiv.removeClass('highlight'); // 删除highlight这个class// 显示和隐藏DOMvar a = $('a[target=_blank]');a.hide(); // 隐藏a.show(); // 显示// 获取DOM信息// 浏览器可视窗口大小:$(window).width(); // 800$(window).height(); // 600// HTML文档大小:$(document).width(); // 800$(document).height(); // 3500// 某个div的大小:var div = $('#test-div');div.width(); // 600div.height(); // 300div.width(400); // 设置CSS属性 width: 400px，是否生效要看CSS是否有效div.height('200px'); // 设置CSS属性 height: 200px，是否生效要看CSS是否有效// attr()和removeAttr()方法用于操作DOM节点的属性// &lt;div id="test-div" name="Test" start="1"&gt;...&lt;/div&gt;var div = $('#test-div');div.attr('data'); // undefined, 属性不存在div.attr('name'); // 'Test'div.attr('name', 'Hello'); // div的name属性变为'Hello'div.removeAttr('name'); // 删除name属性div.attr('name'); // undefined// prop()方法和attr()类似，但是HTML5规定有一种属性在DOM节点中可以没有值，只有出现与不出现两种，例如：// &lt;input id="test-radio" type="radio" name="test" checked value="1"&gt;// 对于checked，使用prop会更好。// 判断是否被选中var radio = $('#test-radio');radio.is(':checked'); // truevar select = $('#test-select');select.is(':selected')// 操作表单// 对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性：input.val(); // 'test' 取值input.val('abc@example.com'); // 赋值 修改DOM结构// 添加DOMul.append('&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;'); // 在ul里面添加li// 同级节点可以用after()或者before()方法js.after('&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;'); // 在js元素后面添加Lua// 删除节点$('#test-div&gt;ul&gt;li').remove(); // 所有&lt;li&gt;全被删除 事件// 获取超链接的jQuery对象:var a = $('#test-link');a.on('click', function () &#123; alert('Hello!');&#125;); on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。 鼠标事件click: 鼠标单击时触发；dblclick：鼠标双击时触发；mouseenter：鼠标进入时触发；mouseleave：鼠标移出时触发；mousemove：鼠标在DOM内部移动时触发；hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。 键盘事件键盘事件仅作用在当前焦点的DOM上，通常是&lt;input&gt;和&lt;textarea&gt;。keydown：键盘按下时触发；keyup：键盘松开时触发；keypress：按一次键后触发。 其他事件focus：当DOM获得焦点时触发；blur：当DOM失去焦点时触发；change：当&lt;input&gt;、&lt;select&gt;或&lt;textarea&gt;的内容改变时触发；submit：当&lt;form&gt;提交时触发；ready：当页面被载入并且DOM树完成初始化后触发。ready仅作用于document对象。 ready方法可以避免js在DOM未加载完毕之前执行相关绑定或方法。所以我们自己的初始化代码必须放到document对象的ready事件中，保证DOM已完成初始化。 // 直接使用ready方法$(document).ready(function () &#123; // on('submit', function)也可以简化: $('#testForm).submit(function () &#123; alert('submit!'); &#125;);&#125;);// 甚至可以省略ready$(function () &#123; // init...&#125;); 可以反复绑定事件处理函数，它们会依次执行 事件参数// 所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息$(function () &#123; $('#testMouseMoveDiv').mousemove(function (e) &#123; // e就是时间参数 $('#testMouseMoveSpan').text('pageX = ' + e.pageX + ', pageY = ' + e.pageY); &#125;);&#125;); 取消绑定// 一个已被绑定的事件可以解除绑定，通过off('click', function)实现，function对象必须与绑定的对象为同一个对象。function hello() &#123; alert('hello!');&#125;a.click(hello); // 绑定事件// 10秒钟后解除绑定:setTimeout(function () &#123; a.off('click', hello);&#125;, 10000);// 需要特别注意的是，下面这种写法是无效的,两个是不同的函数对象。a.click(function () &#123; alert('hello!');&#125;);a.off('click', function () &#123; alert('hello!');&#125;);a.off('click') // 一次性移除已绑定的click事件的所有处理函数a.off() // 移除所有类型的事件处理函数。 取消绑定可以实现比如拦截表单提交等操作。 form.off().submit(function (e) &#123; // 移除表单所有事件，并绑定新的submit事件 e.preventDefault(); // 通知 Web 浏览器不要执行与事件关联的默认动作 alert(form.serialize()); // 打印表格信息&#125;); 事件触发条件一个需要注意的问题是，事件的触发总是由用户操作引发的。如果用JavaScript代码去改动文本框的值，将不会触发change事件。 有些时候，我们希望用代码触发change事件，可以直接调用无参数的change()方法来触发该事件： var input = $('#test-input');input.val('change it!'); // 通过js修改不会触发change事件input.change(); // 触发change事件 浏览器安全限制在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数。 var button1 = $('#testPopupButton1');var button2 = $('#testPopupButton2');function popupTestWindow() &#123; window.open('/');&#125;button1.click(function () &#123; popupTestWindow();&#125;);button2.click(function () &#123; // 不立刻执行popupTestWindow()，100毫秒后执行: setTimeout(popupTestWindow, 100);&#125;); 当用户点击button1时，click事件被触发，由于popupTestWindow()在click事件处理函数内执行，这是浏览器允许的，而button2的click事件并未立刻执行popupTestWindow()，延迟执行的popupTestWindow()将被浏览器拦截。 动画用JavaScript实现动画，原理非常简单：我们只需要以固定的时间间隔（例如，0.1秒），每次把DOM元素的CSS样式修改一点（例如，高宽各增加10%），看起来就像动画了。 // 左上角div.hide(3000); // 在3秒钟内逐渐消失div.show('slow'); // 在0.6秒钟内逐渐显示div.toggle('slow') // 根据当前状态决定是show()还是hide()。// 垂直方向div.slideUp(3000); // 在3秒钟内逐渐向上消失div.slideDown('slow')div.slideToggle('slow')// 淡入淡出div.fadeOut('slow')div.fadeIn('slow')div.fadeToggle('slow') 自定义动画animate()可以实现任意动画效果，我们需要传入的参数就是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值。 var div = $('#test-animate');div.animate(&#123; opacity: 0.25, width: '256px', height: '256px'&#125;, 3000); // 在3秒钟内CSS过渡到设定值// animate()还可以再传入一个函数，当动画结束时，该函数将被调用var div = $('#test-animate');div.animate(&#123; opacity: 0.25, width: '256px', height: '256px'&#125;, 3000, function () &#123; console.log('动画已结束'); // 恢复至初始状态: $(this).css('opacity', '1.0').css('width', '128px').css('height', '128px');&#125;); 串行动画jQuery的动画效果还可以串行执行，通过delay()方法还可以实现暂停，这样，我们可以实现更复杂的动画效果，而代码却相当简单。 var div = $('#test-animates');// 动画效果：slideDown - 暂停 - 放大 - 暂停 - 缩小div.slideDown(2000) .delay(1000) .animate(&#123; width: '256px', height: '256px' &#125;, 2000) .delay(1000) // 延迟1秒 .animate(&#123; width: '128px', height: '128px' &#125;, 2000);&#125; 停止动画$("#stop").click(function()&#123; $("#panel").stop();&#125;); 语法: $(selector).stop(stopAll,goToEnd); 可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。因此，默认地，stop() 会清除在被选元素上指定的当前动画。]]></content>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dashboard安装]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%2FDashboard%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Dashboard安装kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml# 修改node为NodePort模式kubectl patch svc -n kube-system kubernetes-dashboard -p '&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'# 查看服务(得知dashboard运行在30972端口)kubectl get svc -n kube-system# --- 输出 ---NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkube-dns ClusterIP 10.96.0.10 &lt;none&gt; 53/UDP,53/TCP,9153/TCP 7h40mkubernetes-dashboard NodePort 10.111.77.210 &lt;none&gt; 443:30972/TCP 3h42m# --- 输出 ---# 查看dashboard运行在哪个node(得知dashboard运行在192.168.20.4)kubectl get pods -A -o wide# --- 输出 ---NAMESPACE NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESkube-system coredns-fb8b8dccf-rn8kd 1/1 Running 0 7h43m 10.244.0.2 master &lt;none&gt; &lt;none&gt;kube-system coredns-fb8b8dccf-slwr4 1/1 Running 0 7h43m 10.244.0.3 master &lt;none&gt; &lt;none&gt;kube-system etcd-master 1/1 Running 0 7h42m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kube-apiserver-master 1/1 Running 0 7h42m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kube-controller-manager-master 1/1 Running 0 7h42m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kube-flannel-ds-amd64-l8c7c 1/1 Running 0 7h3m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kube-flannel-ds-amd64-lcmxw 1/1 Running 1 6h50m 192.168.20.4 node1 &lt;none&gt; &lt;none&gt;kube-system kube-flannel-ds-amd64-pqnln 1/1 Running 1 6h5m 192.168.20.3 node2 &lt;none&gt; &lt;none&gt;kube-system kube-proxy-4kcqb 1/1 Running 0 7h43m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kube-proxy-jcqjd 1/1 Running 0 6h5m 192.168.20.3 node2 &lt;none&gt; &lt;none&gt;kube-system kube-proxy-vm9sj 1/1 Running 0 6h50m 192.168.20.4 node1 &lt;none&gt; &lt;none&gt;kube-system kube-scheduler-master 1/1 Running 0 7h42m 192.168.20.5 master &lt;none&gt; &lt;none&gt;kube-system kubernetes-dashboard-5f7b999d65-2ltmv 1/1 Running 0 3h45m 10.244.1.2 node1 &lt;none&gt; &lt;none&gt;# --- 输出 ---# 如果无法变成Running状态，可以使用以下命令排错journalctl -f -u kubelet # 只看当前的kubelet进程日志,要到dashboard所在的node执行### 若提示拉取镜像失败，无法翻墙的可以使用以下方法预先拉取镜像### 请在kubernetes-dashboard的节点上操作：docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1docker tag mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 根据上面的信息可以得知dashboard的ip和端口，使用火狐浏览器访问https://192.168.20.4:30972（必须使用**https**，所以会提示不安全，火狐浏览器可以添加例外，谷歌浏览器不行。） # 创建dashboard管理用户kubectl create serviceaccount dashboard-admin -n kube-system# 绑定用户为集群管理用户kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin# 生成tockenkubectl describe secret -n kube-system dashboard-admin-token# --- 输出如下 ---Name: dashboard-admin-token-pb78xNamespace: kube-systemLabels: &lt;none&gt;Annotations: kubernetes.io/service-account.name: dashboard-admin kubernetes.io/service-account.uid: 166aeb8d-604e-11e9-80d6-080027d8332bType: kubernetes.io/service-account-tokenData====ca.crt: 1025 bytesnamespace: 11 bytestoken: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tcGI3OHgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMTY2YWViOGQtNjA0ZS0xMWU5LTgwZDYtMDgwMDI3ZDgzMzJiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.WYV8iBXsGikehSknd4QKbbwVSHn5K0NF1DYi4JHL-wyHtLusuEFeP89s19iC_yXu_5nOsC0h4E3Q19C7XfkGtm37WwMdsJqFjzL2VjVs5NaOUGAeXAVcuHdx0Hrzo3MCu6e1t27KWxGEFwEQv0FNhHwJ9pBmEkJz5fLyGzNOmJqYh2bifL4hrtbnCduWXR4wdnNwtGvcnafGsEvl-QkYpH1h5GRc9A2qZoSKJC90LW-kIRB_0elhwqCg-UM2a0b9cOlbgbZAEseIb3gSHpxLomkziHEjYadBA5bhmSdlArRGQs3DhMcp9pFWarXZEKR5wtxrRdam5mJykXnxA-qwNg# ------ 使用生成的tocken就可以登录dashboard了。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7部署k8s集群-kubeadm]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%2Fcentos7%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4-kubeadm%2F</url>
    <content type="text"><![CDATA[centos7 部署 k8s 集群安装docker-ce官方文档 Master、Node节点都需要安装、配置Docker # 卸载原来的dockersudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine# 安装依赖sudo yum update -y &amp;&amp; sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2# 添加官方yum库sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo# 安装dockersudo yum install docker-ce docker-ce-cli containerd.io# 查看docker版本docker --version# 开机启动systemctl enable --now docker 或者使用脚本一键安装 curl -fsSL "https://get.docker.com/" | shsystemctl enable --now docker 修改docker cgroup驱动，与k8s一致，使用systemd # 修改docker cgroup驱动：native.cgroupdriver=systemdcat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123; "exec-opts": ["native.cgroupdriver=systemd"], "log-driver": "json-file", "log-opts": &#123; "max-size": "100m" &#125;, "storage-driver": "overlay2", "storage-opts": [ "overlay2.override_kernel_check=true" ]&#125;EOFsystemctl restart docker # 重启使配置生效 安装 kubelet kubeadm kubectl官方文档 master、node节点都需要安装kubelet kubeadm kubectl。 安装kubernetes的时候，需要安装kubelet, kubeadm等包，但k8s官网给的yum源是packages.cloud.google.com，国内访问不了，此时我们可以使用阿里云的yum仓库镜像。 cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF# 关闭SElinuxsetenforce 0sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config# 安装kubelet kubeadm kubectlyum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable --now kubelet # 开机启动kubelet# centos7用户还需要设置路由：yum install -y bridge-utils.x86_64modprobe br_netfilter # 加载br_netfilter模块，使用lsmod查看开启的模块cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system # 重新加载所有配置文件systemctl disable --now firewalld # 关闭防火墙# k8s要求关闭swapswapoff -a &amp;&amp; sysctl -w vm.swappiness=0 # 关闭swapsed -ri '/^[^#]*swap/s@^@#@' /etc/fstab # 取消开机挂载swap 使用虚拟机的可以做完以上步骤后，进行克隆。实验环境为1 Master，2 Node 创建集群准备工作# Master端：kubeadm config images pull # 拉取集群所需镜像，这个需要翻墙# --- 不能翻墙可以尝试以下办法 ---kubeadm config images list # 列出所需镜像# 根据所需镜像名字先拉取国内资源docker pull mirrorgooglecontainers/kube-apiserver:v1.14.1docker pull mirrorgooglecontainers/kube-controller-manager:v1.14.1docker pull mirrorgooglecontainers/kube-scheduler:v1.14.1docker pull mirrorgooglecontainers/kube-proxy:v1.14.1docker pull mirrorgooglecontainers/pause:3.1docker pull mirrorgooglecontainers/etcd:3.3.10docker pull coredns/coredns:1.3.1 # 这个在mirrorgooglecontainers中没有# 修改镜像tagdocker tag mirrorgooglecontainers/kube-apiserver:v1.14.1 k8s.gcr.io/kube-apiserver:v1.14.1docker tag mirrorgooglecontainers/kube-controller-manager:v1.14.1 k8s.gcr.io/kube-controller-manager:v1.14.1docker tag mirrorgooglecontainers/kube-scheduler:v1.14.1 k8s.gcr.io/kube-scheduler:v1.14.1docker tag mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1docker tag mirrorgooglecontainers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10docker tag coredns/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1# 把所需的镜像下载好，init的时候就不会再拉镜像，由于无法连接google镜像库导致出错# 删除原来的镜像docker rmi mirrorgooglecontainers/kube-apiserver:v1.14.1docker rmi mirrorgooglecontainers/kube-controller-manager:v1.14.1docker rmi mirrorgooglecontainers/kube-scheduler:v1.14.1docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1docker rmi mirrorgooglecontainers/pause:3.1docker rmi mirrorgooglecontainers/etcd:3.3.10docker rmi coredns/coredns:1.3.1# Node端：# 根据所需镜像名字先拉取国内资源docker pull mirrorgooglecontainers/kube-proxy:v1.14.1docker pull mirrorgooglecontainers/pause:3.1# 修改镜像tagdocker tag mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1# 删除原来的镜像docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1docker rmi mirrorgooglecontainers/pause:3.1# --- 不能翻墙可以尝试使用 --- 使用kubeadm创建集群# 第一次初始化过程中/etc/kubernetes/admin.conf该文件存在，是空文件（我自己手多创建的），会报错：panic: runtime error: invalid memory address or nil pointer dereferencels /etc/kubernetes/admin.conf &amp;&amp; mv /etc/kubernetes/admin.conf&#123;,.bak&#125; # 移走备份# 初始化Master（Master需要至少2核）kubeadm init --apiserver-advertise-address 192.168.20.5 --pod-network-cidr 10.244.0.0/16 # --kubernetes-version 1.14.1# --apiserver-advertise-address 指定与其它节点通信的接口# --pod-network-cidr 指定pod网络子网，10.244.0.0与fannel网络对应 运行初始化，程序会检验环境一致性，可以根据实际错误提示进一步修复问题。 程序会访问https://dl.k8s.io/release/stable-1.txt获取最新的k8s版本，访问这个连接需要FQ，如果无法访问，则会使用kubeadm client的版本作为安装的版本号，使用kubeadm version查看client版本。也可以使用–kubernetes-version明确指定版本。 # 初始化结果：[init] Using Kubernetes version: v1.14.1[preflight] Running pre-flight checks[preflight] Pulling images required for setting up a Kubernetes cluster[preflight] This might take a minute or two, depending on the speed of your internet connection[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;[kubelet-start] Activating the kubelet service[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;[certs] Using existing etcd/ca certificate authority[certs] Using existing etcd/server certificate and key on disk[certs] Using existing etcd/peer certificate and key on disk[certs] Using existing etcd/healthcheck-client certificate and key on disk[certs] Using existing apiserver-etcd-client certificate and key on disk[certs] Using existing ca certificate authority[certs] Using existing apiserver certificate and key on disk[certs] Using existing apiserver-kubelet-client certificate and key on disk[certs] Using existing front-proxy-ca certificate authority[certs] Using existing front-proxy-client certificate and key on disk[certs] Using the existing &quot;sa&quot; key[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s[apiclient] All control plane components are healthy after 21.503375 seconds[upload-config] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace[kubelet] Creating a ConfigMap &quot;kubelet-config-1.14&quot; in namespace kube-system with the configuration for the kubelets in the cluster[upload-certs] Skipping phase. Please see --experimental-upload-certs[mark-control-plane] Marking the node master as control-plane by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule][bootstrap-token] Using token: w2i0mh.5fxxz8vk5k8db0wq[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster[bootstrap-token] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace[addons] Applied essential addon: CoreDNS[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \ --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252 普通用户设置权限mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 应用flannel网络# master：cat ~/.kube/config# node：# 复制master的config内容vim ~/.kube/config # 把master的内容拷贝到node中，这样就可以在node节点中找到apiserver，使用kubectl# master：wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlvim kube-flannel.yml # kube-flannel中添加args指定通信接口ip（可以使用正则），添加iface-regex参数，如下面的图所示（不需要使用引号引住！！！）。kubectl apply -f kube-flannel.yml # 应用flannel网络ps -ef | grep flannel # 确保master和node都有flannel进程，如果node节点没有flannel进程，可以尝试在node也按上述步骤apply一次。 这里需要指定master与节点之间通信的接口，如果有多网卡，默认是使用默认路由的网卡，所以必须要在此明确指定，否则会导致pod相互不通的问题。 node加入机器# 根据master初始化的提示# node1:kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \ --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252# node2:kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \ --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252 输出日志： [preflight] Running pre-flight checks[preflight] Reading configuration from the cluster...[preflight] FYI: You can look at this config file with &apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.14&quot; ConfigMap in the kube-system namespace[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;[kubelet-start] Activating the kubelet service[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...This node has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run &apos;kubectl get nodes&apos; on the control-plane to see this node join the cluster. # master：kubectl get pods --all-namespaces# ---输出信息（全部ready才是正常的）---NAMESPACE NAME READY STATUS RESTARTS AGEkube-system coredns-fb8b8dccf-rn8kd 1/1 Running 0 170mkube-system coredns-fb8b8dccf-slwr4 1/1 Running 0 170mkube-system etcd-master 1/1 Running 0 169mkube-system kube-apiserver-master 1/1 Running 0 169mkube-system kube-controller-manager-master 1/1 Running 0 169mkube-system kube-flannel-ds-amd64-l8c7c 1/1 Running 0 130mkube-system kube-flannel-ds-amd64-lcmxw 1/1 Running 1 117mkube-system kube-flannel-ds-amd64-pqnln 1/1 Running 1 72mkube-system kube-proxy-4kcqb 1/1 Running 0 170mkube-system kube-proxy-jcqjd 1/1 Running 0 72mkube-system kube-proxy-vm9sj 1/1 Running 0 117mkube-system kube-scheduler-master 1/1 Running 0 169m# ---输出信息---kubectl get nodes# ---输出信息（全部ready才是正常的）---NAME STATUS ROLES AGE VERSIONmaster Ready master 171m v1.14.1node1 Ready &lt;none&gt; 118m v1.14.1node2 Ready &lt;none&gt; 74m v1.14.1# ---输出信息--- 排错 # 可以在master和node节点上查看日志journalctl -f # 当前输出日志journalctl -f -u kubelet # 只看当前的kubelet进程日志 kubectl命令补全 source &lt;(kubectl completion zsh) # zsh为我使用的shell，请根据实际填]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql备份]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%2FMysql%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[Mysql备份使用mysqldump做逻辑备份 备份基本命令mysqldump -u user -p DATABASES TABLE1 TABLE2… &gt; backup.sql 选项说明 mysqldump 默认是锁表的，如果不需要锁表，请使用 –skip-lock-tables 备份所有数据库使用 –all-databases 排除数据表 –ignore-table=dbname.tablename 备份前刷新binlog日志 –flush-logs 只导出数据结构 –no-data, -d 导出时，包括创建数据库语句 -B 或 –databases 恢复命令mysql -u user -p -e “source backup.sql” DATABASES 选项说明 进入数据库执行命令 -e 通过binlog恢复出现问题后先备份binlog，不要直接还原（会引入新binlog） 恢复命令的语法格式：(binlog里面包含了所有的数据库的日志)mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名 常用参数选项解释：–start-position=875 起始pos点–stop-position=954 结束pos点–start-datetime=”2016-9-25 22:01:08” 起始时间点–stop-datetime=”2019-9-25 22:09:46” 结束时间点–database=zyyshop 指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志) 如何查找pos(每个binlog都是独立的pos，对于多个binlog，可以使用时间恢复，但使用pos更精准) 先查看配置，查找binlog文件位置：vim /etc/my.cnf 查看当前binlog位置：show master status; 根据特征SQL语句过滤binlog：mysql -e “show binlog events in ‘mysql-bin.000003’\G;” | grep ‘drop database xxxx’ -A20 -B 30 参考文章 使用XtraBackup做物理备份 安装 依赖：yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL rsync perl perl-Digest-MD5 获取包：wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.13/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm 安装：rpm -ivh percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm 全量备份命令： innobackupex –user=XXX –password=XXX 全量备份目录 –no-timestamp 参数： 不使用时间戳 –no-timestamp（默认会自动在备份目录下生成时间戳文件夹，格式如：2019-02-22_10-55-47） 增量备份命令： innobackupex –user=XXX –password=XXX –incremental-basedir 增量备份目录 –incremental 全量备份目录 –no-timestamp 备份恢复命令： service mysqld stop # 先停止mysql mv /var/lib/mysql /var/lib/mysql.bak &amp;&amp; mkdir /var/lib/mysql # 备份原来的mysql目录(视my.cnf配置文件而定) cd /usr/bin/ # 可能没有命令环境变量，需要进入目录使用命令 innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/ # 先应用全量备份 innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/ –incremental-dir=/data/backup/2017-02-23/13/ # 添加增量备份，顺序不能错。 innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/ –incremental-dir=/data/backup/2017-02-23/14/ # 添加增量备份，顺序不能错。 innobackupex –apply-log /data/backup/2017-02-23/12/ # 最后使用这个整合所有备份 innobackupex –copy-back /data/backup/2017-02-23/12/ # 复制回mysql数据目录 chown -R mysql.mysql /var/lib/mysql # 修改数据库权限 /etc/init.d/mysqld start # 开启Mysql服务 备注 恢复数据后mysql启动不了，提示Can’t open and lock privilege tables: Table ‘mysql.host’ doesn’t exist，使用如下命令就可以了： mysql_install_db 恢复后的mysql忘记密码，在配置文件中加入skip-grant-tables=1 跳过权限验证。 在恢复的mysql数据目录中，有xtrabackup_binlog_pos_innodb文件记录着binlog文件和开始节点，后续再利用binlog恢复。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建Harbor企业级docker仓库]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%2Fcentos7%E6%90%AD%E5%BB%BAHarbor%E4%BC%81%E4%B8%9A%E7%BA%A7docker%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[centos7搭建Harbor企业级docker仓库安装dockercurl -fsSL "https://get.docker.com/" | shsystemctl enable --now docker 安装docker-composeyum update -yyum install python-pippip install --upgrade setuptools # 可能由于setuptools版本过低报错pip install docker-compose # 如果报错可以试试 --ignore-installed 安装Harborwget -P /usr/local/src/ https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-online-installer-v1.7.5.tgz # 在线安装# 最新版本请查看https://github.com/goharbor/harbor/releases/cd /usr/local/src/tar zxf harbor-online-installer-v1.7.5.tgz -C /usr/local/cd /usr/local/harbor/bash install.sh # 使用--with-clair添加镜像漏洞扫描功能 配置文件vim /usr/local/harbor/harbor.cfg # harbor配置文件# 找到以下项目并且修改hostname = test.com # 修改访问域名，如果使用其它端口，请在后面添加端口号，如test.com:8080#邮箱配置（根据实际账号配置）email_server = smtp.qq.comemail_server_port = 465email_username = test@qq.comemail_password = 123456email_from = test@qq.com # 经测试发现必须要和email_username相同才可以发邮件email_ssl = true # 开启ssl保护，使用端口465，关闭使用端口25#禁止用户注册self_registration = off#设置只有管理员可以创建项目project_creation_restriction = adminonly#设置管理员密码harbor_admin_password = 123456 容器集群管理cd /usr/local/harbor/docker-compose ps # 查看harbor集群容器，安装后已经启动# ---------- 控制 ----------# 必须要在/usr/local/harbor/目录下，或者-f指定docker-compose.yml# 启动Harbordocker-compose start# 停止Harbordocker-comose stop# 重启Harbordocker-compose restart# 移除Harbordocker-compose down -v # -v 参数移除vloume# 重新创建并启动docker-compose up -d# ---------- 控制 ---------- 修改nginx端口（如有需要）vim /usr/local/harbor/docker-compose.yml# 把proxy下的80:80改为8080:80则为使用8080访问harbordocker-compose stop proxy # proxy其实就是nginxdocker-compose up -d proxy # 重新开启nginxnetstat -lntp # 查看本地打开端口，如果有docker-proxy为8080则修改成功# 如果有安全组防火墙，记得先放行对应端口 访问网页使用账号admin，默认密码Harbor12345，如果修改了配置文件的密码，则使用上面修改的密码。 默认是所有人可以创建用户登录的，只是上面安装配置中禁止了用户注册。 系统配置中可以设置邮箱配置，认证配置、垃圾清理等，但是不可以设置web打开的端口。 通过漏洞扫描，可以分析出镜像存在的一些漏洞缺陷编码，并且提供修复建议。 上传、下载镜像# 由于使用80端口需要备案，harbor页面已经修改为8080端口（注意修改harbor.cfg的hostname后需要重新执行install.sh）vim /etc/docker/daemon.json# 添加 "insecure-registries":["test.com:8080"] &#125;docker login test.com:8080 # 尝试登录# 编写dockerfilemkdir ~/test_harbor &amp;&amp; cd ~/test_harborcat &lt;&lt; EOF &gt; DockerfileFROM nginx:latestMAINTAINER test "test@qq.com"# 配置环境变量ENV LANG=C.UTF-8 TZ=Asia/ShanghaiEOF# build镜像docker build -t test.com:8080/library/nginx:latest .# push镜像到远程仓库docker push test.com:8080/library/nginx:latest# 从远程仓库拉取镜像docker pull test.com:8080/library/nginx:latest 参考链接 为什么有了Docker registry还需要Harbor？]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云磁盘分区与扩容]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%2F%E9%98%BF%E9%87%8C%E4%BA%91%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%89%A9%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[使用parted磁盘分区yum -y install parted# 一行执行：parted /dev/vdb mklabel GPT "YES" mkpart "vdb1" "ext4" "0" "100%" "I" # 建议使用命令parted /dev/vdb分步执行mkfs.ext4 /dev/vdb1 &gt; /dev/null # ext4文件系统tune2fs -c -1 -i -1 /dev/vdb1 &gt; /dev/null # 定义自检周期,-1表示关闭自检mkdir -p /data/mount /dev/vdb1 /data # 挂载到目录blkid | awk /vdb1/'&#123;print $2" /data ext4 defaults 0 0"&#125;' &gt;&gt; /etc/fstab # 添加开机启动挂载 阿里云数据盘扩容yum install -y lsof lsof /data # 检查磁盘被什么程序占用 umount /data/ # 卸载磁盘 parted /dev/vdb “p” “F” “rm 1” “unit s” “mkpart vdb1 ext4 0 100%” “Yes” “I” # CentOS parted /dev/vdb “rm 1” “mkpart vdb1 ext4 0 100%” “Yes” “I” # debian parted /dev/vdb pWarning: Not all of the space available to /dev/vdb appears to be used, you can fix the GPT to use all of the space (an extra 104857600 blocks) or continue with the current setting?Fix/Ignore? F # 通常检测到磁盘大写变化才会有这个提示，如果没有可能需要重启！rm 1unit smkpart vdb1 ext4 0 100% # yesIquit e2fsck -f /dev/vdb1resize2fs /dev/vdb1mount /dev/vdb1 /data/]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python面向对象概述]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[面向对象编程概述对象具有以下特征： 万物皆对象 每个对象唯一 对象具有属性和行为 对象具有状态（属性的取值） 对象分为类对象和实例对象两大类 面向对象编程的步骤： 抽象出类对象 抽象出类对象的属性 抽象出类对象的方法 根基类对象创建实例对象 通过实例对象访问属性和方法 Python是动态语言，所以可以对类动态地绑定类方法，在实例对象创建之后，也可以对其动态地绑定实例方法。# 动态绑定方法from types import MethodTypeclass Animal(object): def __init__(self, name): self.name = namedef say_name(self): print(self.name)dog = Animal('dog')cat = Animal('cat')dog.say_name = MethodType(say_name, dog) # 动态绑定实例方法Animal.say_name = say_name # 动态绑定类方法dog.say_name()cat.say_name() 在类对象中定义方法的几种方式。 静态方法使用@staticmethod装饰，只是一个普通的函数，便于管理。 类方法使用@classmethod装饰，需要传入形参cls。 实例方法不需要使用装饰器，需要传入形参self。 # 静态方法、类方法、实例方法class Animal(object): def __init__(self, name): self.name = name @staticmethod def say_hello(): print('hello') @classmethod def say_hi(cls): print('hi') cls.say_hello() def say_name(self): print(self.name) self.say_hello()dog = Animal('dog')dog.say_hello()dog.say_hi()dog.say_name()]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python类属性和方法的访问控制]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[类属性和方法的访问控制控制类对象的属性和方法在类对象外部是否可以直接访问。在属性或方法前加两个下划线__，那么这个属性就不能从外部访问。 # 私有变量和私有方法class Animal(object): def __init__(self, name): self.name = name __qq = 123123 def __print_qq(self): print(self.__qq) def print_qq(self): print(self.__qq)dog = Animal('dog')dog.print_qq() # 可以输出dog.__print_qq() # AttributeError: 'Animal' object has no attribute '__print_qq'dog.__qq() # AttributeError: 'Animal' object has no attribute '__qq' 之所以不能在类对象的外部直接访问以双划线开头的属性和方法，是因为python解析器对外把属性或方法__xxx改成了另外一个名字：_类名__xxx 而在外部动态绑定一个__开头的属性或方法，与在类中定义的是不同的，不会被python解析器转换，可以直接调用。 # 在外部绑定__属性，不会转换class Animal(object): def __init__(self, name): self.name = name __qq = 123123dog = Animal('dog')dog.__ww = 456456print(dog.__ww) # 可以输出print(dog.__qq) # AttributeError: 'Animal' object has no attribute '__qq' _xx 以单下划线开头的表示的是protected类型的变量。即保护类型只能允许其本身与子类进行访问，也表明最好不要通过外部访问。 若内部变量标示，如： 当使用“from M import”时，不会将以一个下划线开头的对象引入 。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python封装、继承和多态]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[封装、继承和多态封装封装的两方面含义： 将数据（属性）和行为（方法）包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂程度。 在类对象的内部通过访问控制把某些属性和方法隐藏起来，不允许类对象的外部直接访问，而是在类对象的内部对外提供公开的接口方法（例如getter和setter）以访问隐藏的信息。这样，就对隐藏的信息进行了保护。 # 封装class Student(object): def __init__(self): self.__score = 0 # 把内部属性隐藏起来，不允许直接访问 def get_score(self): print(self.__score) def set_score(self, score): # 在方法内部对属性进行操作。 if 100 &gt;= score &gt;= 0: self.__score = score else: raise ValueError('输出数值错误！')xiaoming = Student()xiaoming.set_score(60) # 在类对象的外部调用方法。xiaoming.get_score()xiaoming.set_score(85)xiaoming.get_score() 继承继承是实现代码复用的重要手段。 # 继承class Animal(object): def __init__(self, name): self.name = name def drink(self): print('%s drink water' % self.name) def eat(self): print('%s eat some thing' % self.name)class Dog(Animal): # 继承Animal的属性和方法 def swim(self): print('%s swim' % self.name)class Bird(Animal):# 继承Animal的属性和方法 def fly(self): print('%s fly' % self.name)dog = Dog('dog')bird = Bird('bird')dog.drink()bird.drink()dog.swim()bird.fly() Python中的所有类对象都继承自一个统一的基类：object。 子类只有一个直接父类时，称为==单继承==。子类有多个直接父类时，称为==多继承==。 子类会继承所有父类（包括直接父类和所有间接父类）的所有属性和方法。 重写在子类中定义与父类同名的属性或方法，就可以重写该属性或方法。 子类重写父类方法后，通过子类或其实例对象只能调用子类中重写后的方法，而无法调用父类中被重写分方法。 子类可以通过super().xxx()调用父类中的方法。 ==Python3.x 和 Python2.x 的一个区别是: Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx :== Python3.x 实例： class A: passclass B(A): def add(self, x): super().add(x) Python2.x 实例： class A(object): # Python2.x 记得继承 object passclass B(A): def add(self, x): super(B, self).add(x) 多态简单的说，多态就是“具有多种形态”。 多态可以理解为同样一件事情，不同的人做，会有不同的效果。 一个方法，传递不同的实例对象，执行对应实例的不同方法，产生不同的效果。 # 多态class Animal(object): def __init__(self): self.name = 'Animal' def eat(self): print(self.name + ' eat')class Dog(Animal): def __init__(self): self.name = 'Dog' def bark(self): print(self.name + ' bark')class Bird(Animal): def __init__(self): self.name = 'Bird' def fly(self): print(self.name + ' fly')def animal_eat(animal): # 实现多态的函数 animal.eat()animal = Animal()dog = Dog()bird = Bird()animal_eat(animal)animal_eat(dog)animal_eat(bird) python是动态语言，在调用函数时不会检查参数的类型，从而导致与静态语言（如Java）的多态是有区别的。对于静态语言，实现多态有三个必要的条件： 继承 重写 父类类型的变量引用父类或子类类型的实例对象]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python调用C动态链接库]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E8%B0%83%E7%94%A8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%2F</url>
    <content type="text"><![CDATA[python调用C动态链接库c_dll.c#include&lt;stdio.h&gt;void my_add(int num)&#123; long int result = 0; long int i = 1; for(i; i&lt;=num; i++)&#123; result += i; &#125; printf("C从1到%d累加的计算结果为%ld",num,result);&#125; 编译C文件，生成so文件： ==gcc c_dll.c -shared -o c_dll.so -fPIC== add.py#! coding:utf-8#! /usr/bin/env python'''python调用C动态链接库处理计算密集操作。'''import timefrom ctypes import *def main(): num = int(input("请输入整数值:")) result = 0 start_time = time.time() result = cdll.LoadLibrary("./c_dll.so") # 这里调用的是C源码编译后生成的动态链接库 print(dir(result.my_add)) result.my_add(num) end_time = time.time() print print("总共用时%s"%(end_time-start_time)) p_start_time = time.time() p_result = sum(xrange(num+1)) p_end_time = time.time() print '-'*20 print 'Python从1到%s累加的计算结果为%s'%(num,p_result) print '总共用时%s'%(p_end_time-p_start_time)if __name__ == "__main__": main() 执行结果python c_add.py请输入整数值:1000000000C语言从1到1000000000累加的计算结果为500000000500000000总共用时3.15723800659--------------------P从1到1000000000累加的计算结果为500000000500000000总共用时11.5007269382]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MRO方法解析顺序]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2FMRO%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[MRO 方法解析顺序MRO的全称是Method Resolution Order（方法解析顺序），它指的是一颗类继承树，==当调用最底层类对象所对应实例对象的方法时，Python解析器在类继承树上搜索方法的顺序。== # MRO 方法解析顺序class A(object): def say_hi(self): print('A hi!')class B(A): def say_hi(self): print('B hi!')class C(A): def say_hi(self): print('C hi!')class D(B, C): passd = D()d.say_hi() # B hi!print(D.mro())# (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)print(D.__mro__)# [&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;] 可以通过类对象.mro()或者特殊方法__mro__来查看类对象的方法解析顺序。 直接使用super()方法来调用父类的方法时，也遵循mro。但是可以给super()方法传递参数，从而调用指定父类的方法。 # super() 与 MROclass A(object): def say_hi(self): print('A hi!')class B(A): def say_hi(self): print('B hi!')class C(A): def say_hi(self): print('C hi!')class D(B, C): def say_hi(self): super(B, self).say_hi() # 调用MRO中B后面那个类的方法d = D()d.say_hi() # C hi!print(D.mro())# (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python特殊方法]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Python 特殊方法以双下划线开头和结尾的方法称为特殊方法，__xxxx__。 在定义类对象时，经常会重写一个或多个特殊方法，例如__init__。通常特殊方法都是自动调用的。 __dict__ 获取对象信息# __dict__ 查看对象信息class Animal(object): def __init__(self): self.name = 'Animal' def eat(self): print('eat')animal = Animal()print(Animal.__dict__)'''结果：&#123; '__module__': '__main__', '__init__': &lt;function Animal.__init__ at 0x000001CE58A28D90&gt;, 'eat': &lt;function Animal.eat at 0x000001CE58A28E18&gt;, '__dict__': &lt;attribute '__dict__' of 'Animal' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Animal' objects&gt;, '__doc__': None&#125;'''print(animal.__dict__)# &#123;'name': 'Animal'&#125; __len__ 获取实例对象长度# __len__ 返回对象长度class Animal(object): def __init__(self, name): self.name = name def __len__(self): return len(self.name)dog = Animal('dog')elephant = Animal('elephant')print(len(dog)) # 3print(len(elephant)) # 8 __iter__ 和 __next__ 使实例对象可迭代# __iter__ 和 __next__ 使实例对象可迭代class Student(object): def __init__(self): self.book = ['Math','English','Chinese','Physical'] def __iter__(self): self.count = 0 self.book_list_len = len(self.book) return self # 通常返回的是self def __next__(self): if self.count &lt; self.book_list_len: book_name = self.book[self.count] self.count += 1 return book_name else: raise StopIteration # 停止迭代xiaoming = Student()for i in xiaoming: print(i) __add__ 运算符重载算术运算符可以用于自定义类对象的实例对象，必须在自定义类对象中实现标准算术运算符对应的以下特殊方法： +对应的特殊方法是__add__()和__radd__(); -对应的特殊方法是__sub__()和__rsub__(); *对应的特殊方法是__mul__()和__rmul__(); /对应的特殊方法是__truediv__()和__rtruediv__(); //对应的特殊方法是__floordiv__()和__rfloordiv__() # 实例对象实现加法class Myclass(object): def __init__(self, data): self.data = data def __add__(self, other): # other指的是加号右边的对象 return self.data + other.dataa = Myclass(10)b = Myclass(20)print(a + b) __str__和__repr__ 输出字符# __str__ 和 __repr__class Myclass(object): def __init__(self, data): self.data = data def __str__(self): return self.data def __repr__(self): return self.dataa = Myclass('123')print(a) # 123print(str(a)) # 123print(repr(a)) # 123 str()和repr()都返回对象字符串，其区别在于： str()是给用户看的，显示更加友好。 repr()是给程序开发者看的，为调试服务的。 &gt;&gt;&gt; str('Hello!\nWorld')'Hello!\nWorld'&gt;&gt;&gt; print(str('Hello!\nWorld'))Hello!World&gt;&gt;&gt; repr('Hello!\nWorld')"'Hello!\\nWorld'"&gt;&gt;&gt; print(repr('Hello!\nWorld'))'Hello!\nWorld' __new__ 创建实例方法当使用“类名（实参）”创建实例对象时，python解析器的主要处理过程包括： 调用特殊方法__new__()创建实例对象。 调用特殊方法__init__()对创建的实例对象进行初始化。 __init__中接收的self其实就是__new__中返回的对象。 # __new__ 创建实例调用方法class Animal(object): def __new__(cls, *args, **kwargs): new_object = object.__new__(cls) print('New object id is %s' % id(new_object)) return new_object def __init__(self, name): print('Init object id is %s' % id(self))dog = Animal('123')'''结果：New object id is 2650305182240Init object id is 2650305182240''' __del__ 对象删除方法可以定义__del__来执行当对象被删除时所需的操作。 # __del__ 删除方法import timeclass Animal(object): def __init__(self, name): self.name = name def __del__(self): print('%s对象被删除！' % self.name)dog = Animal('dog')print(dog.name)print('dog对象会在3秒后被删除')time.sleep(3) # 程序结束，必定会删除对象 ==当引用计数器为0时，对象不会立即被销毁（垃圾回收），所以__del__执行的时间也是不确定的。== __getattr__ 获取对象属性或方法# __getattr__class Animal(object): def __init__(self, name): self.name = name def __getattr__(self, item): if item == 'name': return self.name elif item == 'say_name': return self.say_hi else: raise AttributeError('No attribute "%s"' % item) def say_hi(self, value): print('Hi %s!' % value)dog = Animal('dog')print(dog.name) # dogdog.say_hi('cat') # Hi cat!print(dog.age) # AttributeError: No attribute "age" __getitem__、__setitem__、__deltitem__ 索引设置使实例对象实现像列表或者字典索引操作的三个方法。 # __getitem__、__setitem__、__delitem__class Animal(object): def __init__(self): self.data = &#123;&#125; def __getitem__(self, item): return self.data.get(item) def __setitem__(self, key, value): self.data[key] = value def __delitem__(self, key): del self.data[key]dog = Animal()dog['name'] = 'dog'print(dog['name'])del dog['name']print(dog['name']) __call__ 函数调用使实例对象可以像函数一样被调用。 # __call__class Animal(object): def __call__(self, *args, **kwargs): print(args) print(kwargs)dog = Animal()dog(18, 'yellow', name='dog')print(callable(dog))'''结果：(18, 'yellow')&#123;'name': 'dog'&#125;True''' ==可以通过函数callable()来判断对象是否可以被调用。== __doc__ 文档字符串与函数的文档字符串类似，类对象的第一行字符串表示文档字符串。它是对类对象的功能的简要描述。 # __call__class Animal(object): '''这是一个动物类''' passdog = Animal()print(Animal.__doc__)print(dog.__doc__)'''结果：这是一个动物类这是一个动物类''' __slots__ 限制实例对象属性或方法# __slots__class Animal(object): def __init__(self): self.name = 'animal' __slots__ = ('age', 'eat', 'name')dog = Animal()print(dog.name) # animaldog.age = 3def eat(self): print('%s eat!' % self.name)Animal.eat = eatdog.eat() # animal eat!Animal.color = 'withe' # 对于类对象没有影响dog.color = 'withe' # AttributeError: 'Animal' object has no attribute 'color' __slots__对于子类的实例对象是不生效的，如果子类也有__slots__，那么子类的对象可用实例属性或方法则为父类__slots__加子类__slots__。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pthon小知识点]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[小知识点issubclass() 用于判断两个类对象之间的关系（是否有继承关系） # issubclass()class A(object): passclass B(A): passclass C(object): passprint(issubclass(B, A)) # Trueprint(issubclass(B, C)) # Falseprint(issubclass(B, (A, C))) # True isinstance() 用于判断实例对象与类对象的关系（是否有创造关系）， # isinstance()class A(object): passclass B(A): passclass C(object): passa = A()b = B()c = C()print(isinstance(a, A)) # Trueprint(isinstance(b, A)) # True 包括继承关系产生的实例对象print(isinstance(c, A)) # Falseprint(isinstance(c, (A, C))) # True# isinstance() 可以用于判断变量的类型a = 123b = '123'c = [1, 2, 3]d = &#123;1:1, 2:2, 3:3&#125;print(isinstance(a, int)) # Trueprint(isinstance(b, str)) # Trueprint(isinstance(c, list)) # Trueprint(isinstance(d, dict)) # True type() 用于获取对象的类型。类对象的类型是type class A(object): passprint(type(A)) # &lt;class 'type'&gt; 可以使用运算符==判断某个对象的类型。对于基本数据类型，可以直接使用其类名；如果不是基本数据类型，需要使用标准库types中的定义的变量。 # 判断非基本数据类型import typesdef say_hi(): passif type(say_hi) == types.FunctionType: # 判断函数 print('This is a function')if type(print) == types.BuiltinFunctionType: # 判断内置函数 print('This is a built-in-function') 查看某个对象的引用sys.getrefcount() # 对象引用计数import sys# 引用计数加一的4中情况a = [1, 2, 3] # 第一个引用b = [a, 4] # 第二个引用c = a # 第三个引用print(sys.getrefcount(a)) # 第四个引用（作为实参）# 当函数执行完后，a的引用计数自动减一 pprint模块中的pprint可以使字典打印更加美观。 import pprintclass Animal(object): passpprint.pprint(Animal.__dict__)'''结果：mappingproxy(&#123;'__dict__': &lt;attribute '__dict__' of 'Animal' objects&gt;, '__doc__': None, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'Animal' objects&gt;&#125;)''' 列表使用insert插入元素到某个索引，可以使用del 来直接删除某个索引元素 a = [1, 2, 3]a.insert(1, 9) # 在索引1中插入元素9，后面元素往后挪一位print(a) # [1, 9, 2, 3]del a[2] # 删除索引2的元素，后面元素往前挪一位print(a) # [1, 9, 3]]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pthon反射]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[Python反射所谓“反射”，指的是以字符串的形式来操作（包括：增删改查）对象的属性和方法 。 用于“反射”的内置函数有以下四个： hasattr getattr setattr delattr # 反射的四个内置方法class Animal(object): def __init__(self): self.name = 'animal' def eat(self): print('%s eat' % self.name)dog = Animal()print(hasattr(dog, 'name')) # Trueprint(getattr(dog, 'name')) # animalsetattr(dog, 'name','dog') # 相当于dog.name = dogprint(getattr(dog, 'name')) # dogdelattr(dog, 'name') # 相当于del dog.nameprint(hasattr(dog, 'name')) # False 只有在不知道对象信息的情况下，才会去获取对象信息。 举个例子：别的程序传给你一个变量var，这个变量是一个字符串，并且这个字符串对应某个模块下的某个函数名，如果你通过变量var直接导入该模块下的该函数，肯定是不行的，因为var是个变量，这时就可以使用反射，例如：var=”xxx” f=getattr(module,var)，这样，就得到了var对应的模块中的函数f，接下来就可以调用f了。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pthon模块]]></title>
    <url>%2F2019%2F04%2F28%2FPython%2Fpython%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[pthon模块为什么使用模块？ 代码重用 避免属性冲突 为了更好地组织和管理模块，python引入了包，在某个目录下添加模块__init__.py后，该目录就变成了包。目录支持嵌套，所以包也支持嵌套，包中还可以有子包。 相对导入使用相对路径导入模块时，其中，一个.表示当前目录，两个..表示当前目录的父目录。当直接运行某个模块时，该模块就变成了主模块。主模块位于最顶层，与同目录下的其它模块无法形成相对关系。因此，当直接运行某个模块时，该模块不能相对导入。 import语句的执行流程当使用import语句导入模块时，解析器会根据sys模块的modules属性值来查找模块是否已经导入了。 如果模块已经被导入，解析器不做任何操作。 如果模块没有被导入， （1）解析器按照某种路径搜索模块； （2）讲搜索到的模块编译为pyc字节码文件；（可选） （3）执行编译生成的字节码文件从而运行模块。 解析器搜索模块的路径： import sysfrom pprint import pprintpprint(sys.path) 搜索路径主要由三部分组成： 当前目录 标准库目录 第三方库安装目录 修改解析器搜索模块的路径 直接修改sys.path，但是在代码运行后失效。 直接修改PYTHON_PATH 重新加载模块当使用import导入模块之后，模块被修改，如果再次使用import导入模块，是不会生效的。 需要使用importlib中的reload()方法，重新加载模块。 import my_module, timeimport importlibfor i in range(100): importlib.reload(my_module) # 动态重新加载模块 print(my_module.a) time.sleep(1) 模块访问控制当某个模块前加单下划线_时，不能通过import *导入，但是可以通过import _xxx导入。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
