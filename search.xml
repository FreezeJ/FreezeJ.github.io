<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SecretCRT密码解密</title>
      <link href="/2020/07/15/secretcrt-mi-ma-jie-mi/"/>
      <url>/2020/07/15/secretcrt-mi-ma-jie-mi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文章 <a href="http://www.361way.com/securecrt-password-ini/6345.html" target="_blank" rel="noopener">http://www.361way.com/securecrt-password-ini/6345.html</a></p></blockquote><p>这里只是转载了脚本和写了一下使用方法,文章没有强调要重新安装模块<code>pip3 install pycryptodome</code>,不安装该模块也可以正常执行，但是会报错，提示<code>Error: Failed to encrypt.</code>。</p><h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3 crt_crypto.py dec -v2 7b9f594a1f39bb36bbaa0d9688ee38b3d233c67b338e20e2113f2ba4d328b6fc8c804e3c02324b1eaad57a5b96ac1fc5cc1ae0ee2930e6af2e5e644a28ebe3fc</span><br></pre></td></tr></table></figure><p>加密的密码串在session文件夹的ini文件里面查找</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, Blowfish</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCRTCrypto</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCrypto object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.IV = <span class="string">b'\x00'</span> * Blowfish.block_size</span><br><span class="line">        self.Key1 = <span class="string">b'\x24\xA6\x3D\xDE\x5B\xD3\xB3\x82\x9C\x7E\x06\xF4\x08\x16\xAA\x07'</span></span><br><span class="line">        self.Key2 = <span class="string">b'\x5F\xB0\x45\xA2\x94\x17\xD9\x16\xC6\xC6\xA2\xFF\x06\x41\x82\xB7'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(self, Plaintext: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">'utf-16-le'</span>)</span><br><span class="line">        plain_bytes += <span class="string">b'\x00\x00'</span></span><br><span class="line">        padded_plain_bytes = plain_bytes + os.urandom(Blowfish.block_size - len(plain_bytes) % Blowfish.block_size)</span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv=self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv=self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher1.encrypt(os.urandom(<span class="number">4</span>) + cipher2.encrypt(padded_plain_bytes) + os.urandom(<span class="number">4</span>)).hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(self, Ciphertext: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv=self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv=self.IV)</span><br><span class="line">        ciphered_bytes = bytes.fromhex(Ciphertext)</span><br><span class="line">        <span class="keyword">if</span> len(ciphered_bytes) &lt;= <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid Ciphertext.'</span>)</span><br><span class="line">        padded_plain_bytes = cipher2.decrypt(cipher1.decrypt(ciphered_bytes)[<span class="number">4</span>:<span class="number">-4</span>])</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(padded_plain_bytes), <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> padded_plain_bytes[i] == <span class="number">0</span> <span class="keyword">and</span> padded_plain_bytes[i + <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> plain_bytes.decode(<span class="string">'utf-16-le'</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">raise</span> (ValueError(<span class="string">'Invalid Ciphertext.'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCRTCryptoV2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ConfigPassphrase: str = <span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCryptoV2 object.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            ConfigPassphrase: The config passphrase that SecureCRT uses. Leave it empty if config passphrase is not set.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.IV = <span class="string">b'\x00'</span> * AES.block_size</span><br><span class="line">        self.Key = SHA256.new(ConfigPassphrase.encode(<span class="string">'utf-8'</span>)).digest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(self, Plaintext: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(plain_bytes) &gt; <span class="number">0xffffffff</span>:</span><br><span class="line">            <span class="keyword">raise</span> OverflowError(<span class="string">'Plaintext is too long.'</span>)</span><br><span class="line">        plain_bytes = \</span><br><span class="line">            len(plain_bytes).to_bytes(<span class="number">4</span>, <span class="string">'little'</span>) + \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            SHA256.new(plain_bytes).digest()</span><br><span class="line">        padded_plain_bytes = \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            os.urandom(AES.block_size - len(plain_bytes) % AES.block_size)</span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv=self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher.encrypt(padded_plain_bytes).hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(self, Ciphertext: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv=self.IV)</span><br><span class="line">        padded_plain_bytes = cipher.decrypt(bytes.fromhex(Ciphertext))</span><br><span class="line">        plain_bytes_length = int.from_bytes(padded_plain_bytes[<span class="number">0</span>:<span class="number">4</span>], <span class="string">'little'</span>)</span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">4</span>:<span class="number">4</span> + plain_bytes_length]</span><br><span class="line">        <span class="keyword">if</span> len(plain_bytes) != plain_bytes_length:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid Ciphertext.'</span>)</span><br><span class="line">        plain_bytes_digest = padded_plain_bytes[<span class="number">4</span> + plain_bytes_length:<span class="number">4</span> + plain_bytes_length + SHA256.digest_size]</span><br><span class="line">        <span class="keyword">if</span> len(plain_bytes_digest) != SHA256.digest_size:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid Ciphertext.'</span>)</span><br><span class="line">        <span class="keyword">if</span> SHA256.new(plain_bytes).digest() != plain_bytes_digest:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid Ciphertext.'</span>)</span><br><span class="line">        <span class="keyword">return</span> plain_bytes.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Help</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'Usage:'</span>)</span><br><span class="line">        print(<span class="string">'    SecureCRTCipher.py &lt;enc|dec&gt; [-v2] [-p ConfigPassphrase] &lt;plaintext|ciphertext&gt;'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'    &lt;enc|dec&gt;              "enc" for encryption, "dec" for decryption.'</span>)</span><br><span class="line">        print(<span class="string">'                           This parameter must be specified.'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'    [-v2]                  Encrypt/Decrypt with "Password V2" algorithm.'</span>)</span><br><span class="line">        print(<span class="string">'                           This parameter is optional.'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'    [-p ConfigPassphrase]  The config passphrase that SecureCRT uses.'</span>)</span><br><span class="line">        print(<span class="string">'                           This parameter is optional.'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'    &lt;plaintext|ciphertext&gt; Plaintext string or ciphertext string.'</span>)</span><br><span class="line">        print(<span class="string">'                           NOTICE: Ciphertext string must be a hex string.'</span>)</span><br><span class="line">        print(<span class="string">'                           This parameter must be specified.'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">EncryptionRoutine</span><span class="params">(UseV2: bool, ConfigPassphrase: str, Plaintext: str)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                print(SecureCRTCryptoV2(ConfigPassphrase).Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(SecureCRTCrypto().Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'Error: Failed to encrypt.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DecryptionRoutine</span><span class="params">(UseV2: bool, ConfigPassphrase: str, Ciphertext: str)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                print(SecureCRTCryptoV2(ConfigPassphrase).Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(SecureCRTCrypto().Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(traceback.print_exc())</span><br><span class="line">            print(<span class="string">'Error: Failed to decrypt.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Main</span><span class="params">(argc: int, argv: list)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">3</span> &lt;= argc <span class="keyword">and</span> argc &lt;= <span class="number">6</span>:</span><br><span class="line">            bUseV2 = <span class="literal">False</span></span><br><span class="line">            ConfigPassphrase = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> argv[<span class="number">1</span>].lower() == <span class="string">'enc'</span>:</span><br><span class="line">                bEncrypt = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> argv[<span class="number">1</span>].lower() == <span class="string">'dec'</span>:</span><br><span class="line">                bEncrypt = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Help()</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            i = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; argc - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> argv[i].lower() == <span class="string">'-v2'</span>:</span><br><span class="line">                    bUseV2 = <span class="literal">True</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> argv[i].lower() == <span class="string">'-p'</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; argc - <span class="number">1</span>:</span><br><span class="line">                    ConfigPassphrase = argv[i + <span class="number">1</span>]</span><br><span class="line">                    i += <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Help()</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> bUseV2 == <span class="literal">False</span> <span class="keyword">and</span> len(ConfigPassphrase) != <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Error: ConfigPassphrase is not supported if "-v2" is not specified'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> bEncrypt:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> EncryptionRoutine(bUseV2, ConfigPassphrase, argv[<span class="number">-1</span>]) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> DecryptionRoutine(bUseV2, ConfigPassphrase, argv[<span class="number">-1</span>]) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Help()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    exit(Main(len(sys.argv), sys.argv))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sshkey校验</title>
      <link href="/2020/07/08/sshkey-xiao-yan/"/>
      <url>/2020/07/08/sshkey-xiao-yan/</url>
      
        <content type="html"><![CDATA[<p><code>ssh-keygen -y -f id_rsa &gt; id_rsa.pub.tobecompared</code></p><p>然后对比一下id_rsa.pub.tobecompared和id_rsa.pub</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos修改系统语言</title>
      <link href="/2020/06/29/centos-xiu-gai-xi-tong-yu-yan/"/>
      <url>/2020/06/29/centos-xiu-gai-xi-tong-yu-yan/</url>
      
        <content type="html"><![CDATA[<p><code>locale</code>查看当前系统语言<br><code>locale -a</code>查看系统支持的语言，可以通过grep过滤想要的语言如：<code>locale -a | grep zh</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># centos7</span><br><span class="line">vim /etc/locale.conf  # 替换LANG：LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANG=zh_CN.utf8</span><br><span class="line">localectl set-locale LANG=zh_CN.utf8</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># centos6</span><br><span class="line">vi /etc/sysconfig/i18n  # 替换LANG：LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANG=zh_CN.utf8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash命令补全</title>
      <link href="/2020/06/29/bash-ming-ling-bu-quan/"/>
      <url>/2020/06/29/bash-ming-ling-bu-quan/</url>
      
        <content type="html"><![CDATA[<p>bash自动补全脚本目录：<code>/etc/bash_completion.d</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> bash completion for menu.py</span><br><span class="line"><span class="meta">#</span> 命令补全</span><br><span class="line"></span><br><span class="line">_test_options()</span><br><span class="line">&#123;</span><br><span class="line">  local curr_arg;</span><br><span class="line">  curr_arg=$&#123;COMP_WORDS[COMP_CWORD]&#125;</span><br><span class="line">  if echo $&#123;COMP_WORDS[1]&#125; | grep -Eq "menu\.py$" &amp;&amp; [ $COMP_CWORD -eq 2 ]; then</span><br><span class="line">    COMPREPLY=( $(compgen -W "CheckGameStatus PushCode CodeUpdate ServiceHotCmd StopGame StartGame RestartGame" $curr_arg ) );</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">complete -F _test_options -o default python python3</span><br></pre></td></tr></table></figure></p><p>说明：<br>COMP_WORDS：命令行全部参数<br>COMP_CWORD：当前光标所在参数索引<br>${COMP_WORDS[COMP_CWORD]}：当前参数<br>COMPREPLY：按下tab键执行的命令</p><p>命令解释：<code>complete -F _test_options -o default python python3</code><br>当首个参数为python或者python3时，先匹配_test_options函数，如果没有匹配，则使用默认tab匹配结果（-o default）<br>在_test_options函数中使用正则判断，当第一个参数为menu.py，并且光标在第二个参数时，触发特殊的命令补全，提示参数。<br>compgen -W {完整的字符串} {需要补全的字符串}<br>complete 用于绑定命令与补全函数</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux磁盘性能分析iostat</title>
      <link href="/2020/06/22/linux-ci-pan-xing-neng-fen-xi-iostat/"/>
      <url>/2020/06/22/linux-ci-pan-xing-neng-fen-xi-iostat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析<br>本文参考<a href="https://www.cnblogs.com/ultranms/p/9327784.html" target="_blank" rel="noopener">https://www.cnblogs.com/ultranms/p/9327784.html</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yum install sysstat</code></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>iostat [ 选项 ] [ &lt;时间间隔&gt; [ &lt;次数&gt; ]]</code></p><p><strong>常用选项说明：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c：只显示系统CPU统计信息，即单独输出avg-cpu结果，不包括device结果</span><br><span class="line">-d：单独输出Device结果，不包括cpu结果</span><br><span class="line">-k/-m：输出结果以kB/mB为单位，而不是以扇区数为单位</span><br><span class="line">-x:输出更详细的io设备统计信息</span><br><span class="line">interval/count：每次输出间隔时间，count表示输出次数，不带count表示循环输出</span><br><span class="line">说明：更多选项使用使用man iostat查看</span><br></pre></td></tr></table></figure></p><h3 id="普通输出"><a href="#普通输出" class="headerlink" title="普通输出"></a>普通输出</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iostat</span><br></pre></td></tr></table></figure><p><img src="http://hexo-client.oss-cn-hongkong.aliyuncs.com/hexo-client/2020/06/22/ef67fff7-fa82-407b-94b2-c2b19c7a2ad6.png" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出含义：</span><br><span class="line">    avg-cpu: 总体cpu使用情况统计信息，对于多核cpu，这里为所有cpu的平均值。重点关注iowait值，表示CPU用于等待io请求的完成时间。</span><br><span class="line">    Device: 各磁盘设备的IO统计信息。各列含义如下：</span><br><span class="line"></span><br><span class="line">Device: 以sdX形式显示的设备名称</span><br><span class="line">tps: 每秒进程下发的IO读、写请求数量</span><br><span class="line">KB_read/s: 每秒从驱动器读入的数据量，单位为K。</span><br><span class="line">KB_wrtn/s: 每秒从驱动器写入的数据量，单位为K。</span><br><span class="line">KB_read: 读入数据总量，单位为K。</span><br><span class="line">KB_wrtn: 写入数据总量，单位为K。</span><br></pre></td></tr></table></figure></p><h3 id="每隔2秒刷新显示，且显示3次"><a href="#每隔2秒刷新显示，且显示3次" class="headerlink" title="每隔2秒刷新显示，且显示3次"></a>每隔2秒刷新显示，且显示3次</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iostat 2 3</span><br></pre></td></tr></table></figure><h3 id="显示详细信息"><a href="#显示详细信息" class="headerlink" title="显示详细信息"></a>显示详细信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iostat -x</span><br></pre></td></tr></table></figure><p><img src="http://hexo-client.oss-cn-hongkong.aliyuncs.com/hexo-client/2020/06/22/3323d3f5-4835-46d9-b275-c9976efbd1e8.png" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以上各列的含义如下：</span><br><span class="line">rrqm/s: 每秒对该设备的读请求被合并次数，文件系统会对读取同块(block)的请求进行合并</span><br><span class="line">wrqm/s: 每秒对该设备的写请求被合并次数</span><br><span class="line">r/s: 每秒完成的读次数</span><br><span class="line">w/s: 每秒完成的写次数</span><br><span class="line">rkB/s: 每秒读数据量(kB为单位)</span><br><span class="line">wkB/s: 每秒写数据量(kB为单位)</span><br><span class="line">avgrq-sz:平均每次IO操作的数据量(扇区数为单位)</span><br><span class="line">avgqu-sz: 平均等待处理的IO请求队列长度</span><br><span class="line">await: 平均每次IO请求等待时间(包括等待时间和处理时间，毫秒为单位)</span><br><span class="line">svctm: 平均每次IO请求的处理时间(毫秒为单位)</span><br><span class="line">%util: 采用周期内用于IO操作的时间比率，即IO队列非空的时间比率</span><br></pre></td></tr></table></figure></p><p><strong>重点关注参数</strong></p><ol><li>iowait% 表示CPU等待IO时间占整个CPU周期的百分比，如果iowait值超过50%，或者明显大于%system、%user以及%idle，表示IO可能存在问题。</li><li>avgqu-sz 表示磁盘IO队列长度，即IO等待个数。</li><li>await 表示每次IO请求等待时间，包括等待时间和处理时间</li><li>svctm 表示每次IO请求处理的时间</li><li>%util 表示磁盘忙碌情况，一般该值超过80%表示该磁盘可能处于繁忙状态。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7快速安装docker</title>
      <link href="/2020/06/11/centos7-kuai-su-an-zhuang-docker/"/>
      <url>/2020/06/11/centos7-kuai-su-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Centos7</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">rpm --import https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl enable docker</span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python使用psutil获取服务器基本信息</title>
      <link href="/2020/06/01/python/python-shi-yong-psutil-huo-qu-fu-wu-qi-ji-ben-xin-xi/"/>
      <url>/2020/06/01/python/python-shi-yong-psutil-huo-qu-fu-wu-qi-ji-ben-xin-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://psutil.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2020-6-1 11:28</span></span><br><span class="line"><span class="comment"># @Author  : FreezeJ</span></span><br><span class="line"><span class="comment"># @File    : get_machine_info.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Comment : Null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">machine_info</span><span class="params">(max_percent=<span class="number">90</span>, cpu_interval=<span class="number">0.5</span>, none_value=<span class="string">'none'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param max_percent: 最大的内存和磁盘百分比，默认为90</span></span><br><span class="line"><span class="string">    :param cpu_interval: 检测cpu使用率时间，默认为0.5秒,可以设置为0瞬间返回，但是结果可能不准确</span></span><br><span class="line"><span class="string">    :param none_value: 定义空值</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tr_gb</span><span class="params">(num)</span>:</span>  <span class="comment"># 转换为GB单位,ceil为向上取整</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(num, int) <span class="keyword">or</span> isinstance(num, float):</span><br><span class="line">            <span class="keyword">return</span> math.ceil(num / <span class="number">1024.0</span> / <span class="number">1024.0</span> / <span class="number">1024.0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> none_value</span><br><span class="line"></span><br><span class="line">    log_info_list = []  <span class="comment"># 用于记录日志</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CPU</span></span><br><span class="line">    cpu_num = psutil.cpu_count()</span><br><span class="line">    cpu_percent = psutil.cpu_percent(interval=cpu_interval)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 内存</span></span><br><span class="line">    mem = psutil.virtual_memory()</span><br><span class="line">    mem_total = mem.total</span><br><span class="line">    mem_used = mem.used</span><br><span class="line">    mem_buffers = mem.buffers</span><br><span class="line">    mem_cached = mem.cached</span><br><span class="line">    mem_free = mem.free + mem_buffers + mem_cached</span><br><span class="line">    mem_percent = mem.percent</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 磁盘</span></span><br><span class="line">    disk = psutil.disk_partitions()</span><br><span class="line">    mount_point_list = [d.mountpoint <span class="keyword">for</span> d <span class="keyword">in</span> disk]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/data'</span> <span class="keyword">not</span> <span class="keyword">in</span> mount_point_list:</span><br><span class="line">        log_info_list.append(<span class="string">"找不到data盘！"</span>)</span><br><span class="line">        data_disk_total = data_disk_used = data_disk_free = data_disk_percent = none_value</span><br><span class="line">        can_install_game = <span class="string">'false'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_disk = psutil.disk_usage(<span class="string">'/data'</span>)</span><br><span class="line">        data_disk_total = data_disk.total</span><br><span class="line">        data_disk_used = data_disk.used</span><br><span class="line">        data_disk_free = data_disk.free</span><br><span class="line">        data_disk_percent = math.ceil(data_disk.percent)</span><br><span class="line">        <span class="keyword">if</span> data_disk_percent &gt; max_percent <span class="keyword">or</span> tr_gb(data_disk_free) &lt; <span class="number">10</span>:</span><br><span class="line">            log_info_list.append(<span class="string">"磁盘空间不足，剩余空间为&#123;0&#125;GB，无法再安装新服！"</span>.format(tr_gb(data_disk_free)))</span><br><span class="line">            can_install_game = <span class="string">'false'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            can_install_game = <span class="string">'true'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结果</span></span><br><span class="line">    <span class="keyword">if</span> mem_percent &gt; max_percent <span class="keyword">or</span> tr_gb(mem_free) &lt; <span class="number">5</span>:</span><br><span class="line">        log_info_list.append(<span class="string">"内存不足，剩余内存为&#123;mem_free_gb&#125;GB，无法再安装新服！"</span>.format(mem_free_gb=tr_gb(mem_free)))</span><br><span class="line">        can_install_game = <span class="string">'false'</span></span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">"mem_total_gb"</span>: tr_gb(mem_total),</span><br><span class="line">        <span class="string">"mem_used_gb"</span>: tr_gb(mem_used),</span><br><span class="line">        <span class="string">"mem_free_gb"</span>: tr_gb(mem_free),</span><br><span class="line">        <span class="string">"mem_percent"</span>: math.ceil(mem_percent),</span><br><span class="line">        <span class="string">"data_total_gb"</span>: tr_gb(data_disk_total),</span><br><span class="line">        <span class="string">"data_disk_used_gb"</span>: tr_gb(data_disk_used),</span><br><span class="line">        <span class="string">"data_disk_free_gb"</span>: tr_gb(data_disk_free),</span><br><span class="line">        <span class="string">"data_disk_percent"</span>: data_disk_percent,</span><br><span class="line">        <span class="string">"cpu_percent"</span>: cpu_percent,</span><br><span class="line">        <span class="string">"cpu_num"</span>: cpu_num,</span><br><span class="line">        <span class="string">"can_install_game"</span>: can_install_game,  <span class="comment"># 磁盘和内存有空间，可以装服</span></span><br><span class="line">        <span class="string">"log_info_list"</span>: log_info_list,  <span class="comment"># 用于记录错误，有内容就代表存在报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    print(json.dumps(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    machine_info(max_percent=<span class="number">90</span>, cpu_interval=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paramiko实现ssh跳板机</title>
      <link href="/2020/05/26/python/paramiko-shi-xian-ssh-tiao-ban-ji/"/>
      <url>/2020/05/26/python/paramiko-shi-xian-ssh-tiao-ban-ji/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jump2server</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        jump_server_ip,</span></span></span><br><span class="line"><span class="function"><span class="params">        jump_server_username,</span></span></span><br><span class="line"><span class="function"><span class="params">        jump_server_password,</span></span></span><br><span class="line"><span class="function"><span class="params">        remote_host_ip,</span></span></span><br><span class="line"><span class="function"><span class="params">        remote_host_username,</span></span></span><br><span class="line"><span class="function"><span class="params">        remote_host_password,</span></span></span><br><span class="line"><span class="function"><span class="params">        remote_ssh_port=<span class="number">22</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jump_ssh_port=<span class="number">22</span>)</span>:</span></span><br><span class="line">    jump_server = paramiko.SSHClient()</span><br><span class="line">    jump_server.set_missing_host_key_policy(paramiko.AutoAddPolicy())  <span class="comment"># 自动接受key</span></span><br><span class="line">    jump_server.connect(jump_server_ip, username=jump_server_username, password=jump_server_password)  <span class="comment"># 跳板机连接</span></span><br><span class="line">    jump_transport = jump_server.get_transport()  <span class="comment"># 创建Transport对象</span></span><br><span class="line">    <span class="comment"># 建立隧道</span></span><br><span class="line">    jump_channel = jump_transport.open_channel(kind=<span class="string">"direct-tcpip"</span>,</span><br><span class="line">                                               dest_addr=(remote_host_ip, remote_ssh_port),</span><br><span class="line">                                               src_addr=(jump_server_ip, jump_ssh_port))</span><br><span class="line">    remote_host = paramiko.SSHClient()</span><br><span class="line">    remote_host.set_missing_host_key_policy(paramiko.AutoAddPolicy())  <span class="comment"># 自动接受key</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用密码连接（通过隧道）</span></span><br><span class="line">    remote_host.connect(remote_host_ip, username=remote_host_username, password=remote_host_password, sock=jump_channel)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用密钥连接（通过隧道）</span></span><br><span class="line">    <span class="comment"># private_key = paramiko.RSAKey.from_private_key_file('/root/.ssh/id_rsa')</span></span><br><span class="line">    <span class="comment"># remote_host.connect(remote_host_ip,</span></span><br><span class="line">    <span class="comment"># username=remote_host_username,</span></span><br><span class="line">    <span class="comment"># pkey=private_key,</span></span><br><span class="line">    <span class="comment"># sock=jump_channel)</span></span><br><span class="line">    <span class="keyword">return</span> remote_host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = jump2server(</span><br><span class="line">        jump_server_ip=<span class="string">'192.168.56.1'</span>,</span><br><span class="line">        jump_server_username=<span class="string">'root'</span>,</span><br><span class="line">        jump_server_password=<span class="string">'xxxxxxxx'</span>,</span><br><span class="line">        remote_host_ip=<span class="string">'192.168.56.1'</span>,</span><br><span class="line">        remote_host_username=<span class="string">'root'</span>,</span><br><span class="line">        remote_host_password=<span class="string">'xxxxxxxx'</span>,</span><br><span class="line">    )</span><br><span class="line">    stdin, stdout, stderr = server.exec_command(<span class="string">"netstat -ntp | grep ssh"</span>)</span><br><span class="line">    print(stdout.read().decode())</span><br><span class="line">    server.close()</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tcp        0    112 192.168.56.2:22       192.168.56.1:59393    ESTABLISHED 21676/sshd: root@no</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模态框html与js代码</title>
      <link href="/2020/05/20/javascript/mo-tai-kuang-html-yu-js-dai-ma/"/>
      <url>/2020/05/20/javascript/mo-tai-kuang-html-yu-js-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="模态框html与js代码"><a href="#模态框html与js代码" class="headerlink" title="模态框html与js代码"></a>模态框html与js代码</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方法结果模态框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"fun_result"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"fun_result_ModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog modal-lg"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"fun_result_ModalLabel"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>查看结果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>sls检查项名：&amp;nbsp<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"fun_result_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>执行命令：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"fun_result_cmd"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>执行描述：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"fun_comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>错误信息：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"fun_result_err_message"</span> <span class="attr">style</span>=<span class="string">"color: #ff463f"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>返回信息：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"fun_result_message"</span> <span class="attr">style</span>=<span class="string">"color: #ff463f"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#fun_result'</span>).modal(&#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模态框的详细"><a href="#模态框的详细" class="headerlink" title="模态框的详细"></a>模态框的详细</h2><p><a href="http://www.runoob.com/bootstrap/bootstrap-modal-plugin.html" target="_blank" rel="noopener">http://www.runoob.com/bootstrap/bootstrap-modal-plugin.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos更换yum源</title>
      <link href="/2020/05/19/linux/centos-geng-huan-yum-yuan/"/>
      <url>/2020/05/19/linux/centos-geng-huan-yum-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">mkdir -p tmp</span><br><span class="line">mv CentOS* tmp/</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装EPEL</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure><h2 id="Centos6"><a href="#Centos6" class="headerlink" title="Centos6"></a>Centos6</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">mkdir -p tmp</span><br><span class="line">mv CentOS* tmp/</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装EPEL</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap小用例</title>
      <link href="/2020/05/06/linux/nmap-xiao-yong-li/"/>
      <url>/2020/05/06/linux/nmap-xiao-yong-li/</url>
      
        <content type="html"><![CDATA[<h1 id="nmap小用例"><a href="#nmap小用例" class="headerlink" title="nmap小用例"></a>nmap小用例</h1><blockquote><p>简介：<br>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)，它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核，许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息，管理服务升级计划，以及监视主机和服务的运行。</p></blockquote><p>Nmap命令行接受多个主机说明，它们不必是相同类型。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap scanme.nmap.org 192.168.0.0/8 10.0.0，1，3-7.0-255</span><br></pre></td></tr></table></figure></p><p><strong>局域网查找10.1.1.1~10.1.1.50的空闲ip（使用ARP Ping避免禁ping）</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -v -PR 10.1.1.1-50 | grep 'host down' | awk '&#123;print $5&#125;'</span><br></pre></td></tr></table></figure></p><p><strong>查看操作系统</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -O 10.1.1.2</span><br></pre></td></tr></table></figure></p><p><strong>只扫描特定的端口</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -p 20 10.1.1.1-10</span><br></pre></td></tr></table></figure></p><p><strong>快速扫描</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -F 20 10.1.1.1-10</span><br></pre></td></tr></table></figure></p><p><strong>单行显示</strong><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> -sS TCP同步扫描(TCP SYN)</span><br><span class="line"><span class="meta">#</span> -p80 扫描80端口</span><br><span class="line"><span class="meta">#</span> -oG - 单独的行来记录所有信息，记住-oG 后要空格再加一个"-"</span><br><span class="line">nmap -sS -p80  -oG -  10.1.1.1-200 | grep open</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nmap </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible入门使用</title>
      <link href="/2020/04/27/linux/ansible-shi-yong-wen-dang/"/>
      <url>/2020/04/27/linux/ansible-shi-yong-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible使用文档"><a href="#Ansible使用文档" class="headerlink" title="Ansible使用文档"></a>Ansible使用文档</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用pip安装ansible：<code>sudo pip install ansible</code></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>创建配置文件<code>/etc/ansible/hosts</code><br>加入受控端ip，这些受控ip可以使用ssh登录（public SSH key必须在这些系统的<code>authorized_keys</code>中）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat /etc/ansible/hosts</span><br><span class="line">10.19.200.194</span><br></pre></td></tr></table></figure></p><p>为了避免在建立SSH连接时,重复输入密码你可以这么做:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-agent bash</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>基本用法：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible &lt;pattern&gt; -m &lt;module_name&gt; -a &lt;arguments&gt;</span><br></pre></td></tr></table></figure></p><p>pattern用于匹配主机，以下是pattern的例子：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 全部主机</span><br><span class="line">all</span><br><span class="line">*</span><br><span class="line"><span class="meta">#</span> 一个或多个IP地址或主机名</span><br><span class="line">one.example.com</span><br><span class="line">one.example.com:two.example.com</span><br><span class="line">192.168.1.50</span><br><span class="line">192.168.1.50:192.168.1.51</span><br><span class="line"><span class="meta">#</span> 一个或多个主机组</span><br><span class="line">webservers</span><br><span class="line">webservers:dbservers</span><br><span class="line"><span class="meta">#</span> 在webservers组但不在phoenix组:</span><br><span class="line">webservers:!phoenix</span><br><span class="line"><span class="meta">#</span> 交集</span><br><span class="line">webservers:&amp;staging</span><br><span class="line"><span class="meta">#</span> 通配符</span><br><span class="line">*.example.com</span><br><span class="line">*.com</span><br><span class="line">192.168.1.*</span><br><span class="line"><span class="meta">#</span> 添加排除条件或使用@来指定主机</span><br><span class="line">ansible-playbook site.yml --limit datacenter2</span><br><span class="line">ansible-playbook site.yml --limit @retry_hosts.txt</span><br></pre></td></tr></table></figure></p><p>显示pattern匹配的主机<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible all --list-hosts</span><br><span class="line">  hosts (1):</span><br><span class="line">    10.19.200.194</span><br></pre></td></tr></table></figure></p><p>查看变量<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible all -m setup</span><br></pre></td></tr></table></figure></p><p>ping测试<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible all -m ping</span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible all -a "/bin/echo hello"</span><br></pre></td></tr></table></figure></p><p>传输文件并设置权限<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"</span><br></pre></td></tr></table></figure></p><p>软件包管理<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 确认一个软件包已经安装,但不去升级它:</span><br><span class="line"><span class="meta">$</span> ansible webservers -m yum -a "name=acme state=present"</span><br><span class="line"><span class="meta">#</span> 确认一个软件包的安装版本:</span><br><span class="line"><span class="meta">$</span> ansible webservers -m yum -a "name=acme-1.5 state=present"</span><br><span class="line"><span class="meta">#</span> 确认一个软件包还没有安装:</span><br><span class="line"><span class="meta">$</span> ansible webservers -m yum -a "name=acme state=absent"</span><br></pre></td></tr></table></figure></p><p>用户相关<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 创建</span><br><span class="line">ansible all -m user -a "name=foo password=&lt;crypted password here&gt;"</span><br><span class="line"><span class="meta">#</span> 删除</span><br><span class="line">ansible all -m user -a "name=foo state=absent"</span><br></pre></td></tr></table></figure></p><p>服务管理<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ansible webservers -m service -a "name=httpd state=started"</span><br><span class="line"><span class="meta">$</span> ansible webservers -m service -a "name=httpd state=restarted"</span><br><span class="line"><span class="meta">$</span> ansible webservers -m service -a "name=httpd state=stoped"</span><br></pre></td></tr></table></figure></p><p>关闭known_hosts确认<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> vim /etc/ansible/ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure></p><h2 id="Inventory文件"><a href="#Inventory文件" class="headerlink" title="Inventory文件"></a>Inventory文件</h2><h3 id="主机和组"><a href="#主机和组" class="headerlink" title="主机和组"></a>主机和组</h3><p>/etc/ansible/hosts 文件的格式与windows的ini配置文件类似，方括号[]中是组名,用于对系统进行分类,便于对不同系统进行个别的管理：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mail.example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[webservers]</span></span><br><span class="line">foo.example.com</span><br><span class="line">bar.example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[dbservers]</span></span><br><span class="line">one.example.com</span><br><span class="line">two.example.com</span><br><span class="line">three.example.com</span><br></pre></td></tr></table></figure></p><h4 id="指定ssh端口"><a href="#指定ssh端口" class="headerlink" title="指定ssh端口"></a>指定ssh端口</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">badwolf.example.com:5309</span><br></pre></td></tr></table></figure><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50 ansible_ssh_user=mpdehaan</span><br></pre></td></tr></table></figure><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[webservers]</span></span><br><span class="line">www[01:50].example.com</span><br><span class="line"><span class="section">[databases]</span></span><br><span class="line">db-[a:f].example.com</span><br></pre></td></tr></table></figure><h4 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[atlanta]</span></span><br><span class="line">host1 http_port=80 maxRequestsPerChild=808</span><br><span class="line">host2 http_port=303 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure><h4 id="组变量"><a href="#组变量" class="headerlink" title="组变量"></a>组变量</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[atlanta]</span></span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line"></span><br><span class="line"><span class="section">[atlanta:vars]</span></span><br><span class="line"><span class="attr">ntp_server</span>=ntp.atlanta.example.com</span><br><span class="line"><span class="attr">proxy</span>=proxy.atlanta.example.com</span><br></pre></td></tr></table></figure><h3 id="可用参数"><a href="#可用参数" class="headerlink" title="可用参数"></a>可用参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible_ssh_host</span><br><span class="line">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_port</span><br><span class="line">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_user</span><br><span class="line">      默认的 ssh 用户名</span><br><span class="line"></span><br><span class="line">ansible_ssh_pass</span><br><span class="line">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class="line"></span><br><span class="line">ansible_sudo_pass</span><br><span class="line">      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span><br><span class="line"></span><br><span class="line">ansible_sudo_exe (new in version 1.8)</span><br><span class="line">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class="line"></span><br><span class="line">ansible_connection</span><br><span class="line">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &apos;smart&apos;,&apos;smart&apos; 方式会根据是否支持 ControlPersist, 来判断&apos;ssh&apos; 方式是否可行.</span><br><span class="line"></span><br><span class="line">ansible_ssh_private_key_file</span><br><span class="line">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class="line"></span><br><span class="line">ansible_shell_type</span><br><span class="line">      目标系统的shell类型.默认情况下,命令的执行使用 &apos;sh&apos; 语法,可设置为 &apos;csh&apos; 或 &apos;fish&apos;.</span><br><span class="line"></span><br><span class="line">ansible_python_interpreter</span><br><span class="line">      目标主机的 python 路径.</span><br></pre></td></tr></table></figure><h2 id="Playbooks"><a href="#Playbooks" class="headerlink" title="Playbooks"></a>Playbooks</h2><blockquote><p><code>Playbooks</code>是Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案，或者一组IT程序运行的<strong>命令集合</strong>。<br>简单理解就是一个定义哪些主机执行什么任务的配置文件。</p></blockquote><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 第一个play</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span>  <span class="comment"># 主机组</span></span><br><span class="line"><span class="attr">  vars:</span>  <span class="comment"># 定义变量</span></span><br><span class="line"><span class="attr">    http_port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    max_clients:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span>  <span class="comment"># 远程登录的用户</span></span><br><span class="line"><span class="attr">  tasks:</span>  <span class="comment"># 任务列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">test</span> <span class="string">connection</span>  <span class="comment"># 任务名(备注)</span></span><br><span class="line"><span class="attr">      ping:</span>  <span class="comment"># 测试连通性</span></span><br><span class="line"><span class="attr">      remote_user:</span> <span class="string">root</span>  <span class="comment"># 执行任务的用户</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span></span><br><span class="line"><span class="attr">      yum:</span> <span class="string">pkg=httpd</span> <span class="string">state=latest</span>  <span class="comment"># 使httpd更新到最新版</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">write</span> <span class="string">the</span> <span class="string">apache</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">      template:</span> <span class="string">src=/srv/httpd.j2</span> <span class="string">dest=/etc/httpd.conf</span>  <span class="comment"># 使用模版文件</span></span><br><span class="line"><span class="attr">      notify:</span>  <span class="comment"># 会在task结束后执行，只会被触发一次</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></span><br><span class="line"><span class="attr">  handlers:</span>  <span class="comment"># 在发生改变时执行的操作</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br><span class="line"><span class="comment"># 第二个play</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">my_nginx</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">    - service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span></span><br><span class="line"><span class="attr">      sudo:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">disable</span> <span class="string">selinux</span>  <span class="comment"># 关闭selinux</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">/sbin/setenforce</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>执行一个 playbook<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml -f 10</span><br></pre></td></tr></table></figure></p><p>查看playbook的主机<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml --list-hosts</span><br></pre></td></tr></table></figure></p><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p><strong>使用include引入tasks或handlers,并且通过vars传递变量</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - include:</span> <span class="string">wordpress.yml</span></span><br><span class="line"><span class="attr">    vars:</span></span><br><span class="line"><span class="attr">        wp_user:</span> <span class="string">timmy</span></span><br><span class="line"><span class="attr">        some_list_variable:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">alpha</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">beta</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">gamma</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># wordpress.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">placeholder</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/bin/foo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">placeholder</span> <span class="string">bar</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/bin/bar</span></span><br></pre></td></tr></table></figure><h3 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h3><p><strong>使用Roles管理目录结构</strong><br>项目的结构如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site.yml</span><br><span class="line">webservers.yml</span><br><span class="line">fooservers.yml</span><br><span class="line">roles/</span><br><span class="line">   common/</span><br><span class="line">     files/</span><br><span class="line">     templates/</span><br><span class="line">     tasks/</span><br><span class="line">     handlers/</span><br><span class="line">     vars/</span><br><span class="line">     defaults/</span><br><span class="line">     meta/</span><br><span class="line">   webservers/</span><br><span class="line">     files/</span><br><span class="line">     templates/</span><br><span class="line">     tasks/</span><br><span class="line">     handlers/</span><br><span class="line">     vars/</span><br><span class="line">     defaults/</span><br><span class="line">     meta/</span><br></pre></td></tr></table></figure><p>playbook 如下:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  roles:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">common</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">webservers</span></span><br></pre></td></tr></table></figure></p><h3 id="facts"><a href="#facts" class="headerlink" title="facts"></a>facts</h3><p><strong>使用facts获取信息</strong></p><p>Facts通过访问远程系统获取相应的信息. 一个例子就是远程主机的IP地址或者操作系统是什么. 使用以下命令可以查看哪些信息是可用的：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible hostname -m setup</span><br></pre></td></tr></table></figure><p>facts变量用法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ansible_nodename &#125;&#125;</span><br><span class="line">&#123;&#123; ansible_hostname &#125;&#125;</span><br><span class="line">&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;</span><br><span class="line">&#123;&#123; ansible_devices.sda.model &#125;&#125;</span><br><span class="line">&#123;# 从一个服务器引用另一个服务器的变量 #&#125;</span><br><span class="line">&#123;&#123; hostvars[&apos;asdf.example.com&apos;][&apos;ansible_os_family&apos;] &#125;&#125;</span><br></pre></td></tr></table></figure><p>关闭facts，加快执行速度</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="string">F</span></span><br></pre></td></tr></table></figure><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if &apos;webserver&apos; in group_names %&#125;</span><br><span class="line">   # some part of a configuration file that only applies to webservers</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 找出该群组中的所有IP地址 #&#125;</span><br><span class="line">&#123;% for host in groups[&apos;app_servers&apos;] %&#125;</span><br><span class="line">   &#123;&#123; hostvars[host][&apos;ansible_eth0&apos;][&apos;ipv4&apos;][&apos;address&apos;] &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h3><p>使用外部的变量文件，这可以保证你共享playbook源码时隔离敏感数据的风险。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    favcolor:</span> <span class="string">blue</span></span><br><span class="line"><span class="attr">  vars_files:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/vars/external_vars.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">just</span> <span class="string">a</span> <span class="string">placeholder</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/bin/echo</span> <span class="string">foo</span></span><br></pre></td></tr></table></figure><p>每个变量文件的内容是一个简单的YAML文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># in the above example, this would be vars/external_vars.yml</span></span><br><span class="line"><span class="attr">somevar:</span> <span class="string">somevalue</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">magic</span></span><br></pre></td></tr></table></figure><p>在命令行中传递变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo"</span><br></pre></td></tr></table></figure><p>使用json文件作为变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook release.yml --extra-vars "@some_file.json"</span><br></pre></td></tr></table></figure><h3 id="条件选择"><a href="#条件选择" class="headerlink" title="条件选择"></a>条件选择</h3><p>可以使用when作为task、include、roles的条件判断</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"shutdown Debian flavored systems"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/sbin/shutdown</span> <span class="bullet">-t</span> <span class="string">now</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"Debian"</span></span><br></pre></td></tr></table></figure><p>还可以使用过滤器作为when执行条件：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - command:</span> <span class="string">/bin/false</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">result</span></span><br><span class="line"><span class="attr">    ignore_errors:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">  - command:</span> <span class="string">/bin/something</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">result|failed</span></span><br><span class="line"><span class="attr">  - command:</span> <span class="string">/bin/something_else</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">result|success</span></span><br><span class="line"><span class="attr">  - command:</span> <span class="string">/bin/still/something_else</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">result|skipped</span></span><br></pre></td></tr></table></figure></p><p>使用多个条件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">echo</span> <span class="string">"only on Red Hat 6, derivatives, and later"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span> <span class="string">and</span> <span class="string">ansible_lsb.major_release|int</span> <span class="string">&gt;=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>使用define判断变量是否已经定义</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">    - shell:</span> <span class="string">echo</span> <span class="string">"I've got '<span class="template-variable">&#123;&#123; foo &#125;&#125;</span>' and am not afraid to use it!"</span></span><br><span class="line"><span class="attr">      when:</span> <span class="string">foo</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - fail:</span> <span class="string">msg="Bailing</span> <span class="string">out.</span> <span class="string">this</span> <span class="string">play</span> <span class="string">requires</span> <span class="string">'bar'</span><span class="string">"</span></span><br><span class="line"><span class="string">      when: bar is not defined</span></span><br></pre></td></tr></table></figure><h3 id="变量文件与模版"><a href="#变量文件与模版" class="headerlink" title="变量文件与模版"></a>变量文件与模版</h3><p>配置文件的模版:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">template</span> <span class="string">a</span> <span class="string">file</span></span><br><span class="line"><span class="attr">   template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">dest=/etc/myapp/foo.conf</span></span><br><span class="line"><span class="attr">   with_first_found:</span></span><br><span class="line"><span class="attr">     - files:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;&#123;</span> <span class="string">ansible_distribution</span> <span class="string">&#125;&#125;.conf</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">default.conf</span></span><br><span class="line"><span class="attr">       paths:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">search_location_one/somedir/</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/other_location/somedir/</span></span><br></pre></td></tr></table></figure><h3 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h3><p> <code>register</code>关键词决定了把结果存储在哪个变量中。结果参数可以用在模版中，动作条目，或者 <em>when</em> 语句。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">test</span> <span class="string">play</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">      - shell:</span> <span class="string">cat</span> <span class="string">/etc/motd</span></span><br><span class="line"><span class="attr">        register:</span> <span class="string">motd_contents</span></span><br><span class="line"><span class="attr">      - shell:</span> <span class="string">echo</span> <span class="string">"motd contains the word hi"</span></span><br><span class="line"><span class="attr">        when:</span> <span class="string">motd_contents.stdout.find('hi')</span> <span class="string">!=</span> <span class="bullet">-1</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>使用with_items进行循环</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">several</span> <span class="string">users</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span> <span class="string">groups=wheel</span></span><br><span class="line"><span class="attr">  with_items:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">testuser1</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">testuser2</span></span><br></pre></td></tr></table></figure><p>传入字典</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">add</span> <span class="string">several</span> <span class="string">users</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span> <span class="string">groups=&#123;&#123;</span> <span class="string">item.groups</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'testuser1'</span><span class="string">,</span> <span class="attr">groups:</span> <span class="string">'wheel'</span> <span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'testuser2'</span><span class="string">,</span> <span class="attr">groups:</span> <span class="string">'root'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">give</span> <span class="string">users</span> <span class="string">access</span> <span class="string">to</span> <span class="string">multiple</span> <span class="string">databases</span></span><br><span class="line"><span class="attr">  mysql_user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item[0]</span> <span class="string">&#125;&#125;</span> <span class="string">priv=&#123;&#123;</span> <span class="string">item[1]</span> <span class="string">&#125;&#125;.*:ALL</span> <span class="string">append_privs=yes</span> <span class="string">password=foo</span></span><br><span class="line"><span class="attr">  with_nested:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">'alice'</span><span class="string">,</span> <span class="string">'bob'</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">'clientdb'</span><span class="string">,</span> <span class="string">'employeedb'</span><span class="string">,</span> <span class="string">'providerdb'</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- debug:</span> <span class="string">msg=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  with_random_choice:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"go through the door"</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"drink from the goblet"</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"press the red button"</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">"do nothing"</span></span><br></pre></td></tr></table></figure><h3 id="Do-Until循环"><a href="#Do-Until循环" class="headerlink" title="Do-Until循环"></a>Do-Until循环</h3><p>重试一个任务直到达到某个条件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- action:</span> <span class="string">shell</span> <span class="string">/usr/bin/foo</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">result</span></span><br><span class="line"><span class="attr">  until:</span> <span class="string">result.stdout.find("all</span> <span class="string">systems</span> <span class="string">go")</span> <span class="string">!=</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">  retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  delay:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>递归运行shell模块,直到模块结果中的stdout输出中包含”all systems go”字符串,或者该任务按照10秒的延迟重试超过5次.”retries”和”delay”的默认值分别是3和5.</p><h3 id="特殊特性"><a href="#特殊特性" class="headerlink" title="特殊特性"></a>特殊特性</h3><h4 id="异步操作和轮询"><a href="#异步操作和轮询" class="headerlink" title="异步操作和轮询"></a>异步操作和轮询</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">simulate</span> <span class="string">long</span> <span class="string">running</span> <span class="string">op</span> <span class="string">(15</span> <span class="string">sec),</span> <span class="string">wait</span> <span class="string">for</span> <span class="string">up</span> <span class="string">to</span> <span class="number">45</span> <span class="string">sec,</span> <span class="string">poll</span> <span class="string">every</span> <span class="number">5</span> <span class="string">sec</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/bin/sleep</span> <span class="number">15</span></span><br><span class="line"><span class="attr">    async:</span> <span class="number">45</span></span><br><span class="line"><span class="attr">    poll:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果你不需要等待任务执行完毕,你可以指定 poll 值为0而启用 “启动并忽略”</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Requires ansible 1.8+</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'YUM - fire and forget task'</span></span><br><span class="line"><span class="attr">  yum:</span> <span class="string">name=docker-io</span> <span class="string">state=installed</span></span><br><span class="line"><span class="attr">  async:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  poll:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">yum_sleeper</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'YUM - check on fire and forget task'</span></span><br><span class="line"><span class="attr">  async_status:</span> <span class="string">jid=&#123;&#123;</span> <span class="string">yum_sleeper.ansible_job_id</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">job_result</span></span><br><span class="line"><span class="attr">  until:</span> <span class="string">job_result.finished</span></span><br><span class="line"><span class="attr">  retries:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="测试模式"><a href="#测试模式" class="headerlink" title="测试模式"></a>测试模式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook foo.yml --check</span><br></pre></td></tr></table></figure><h4 id="显示不同"><a href="#显示不同" class="headerlink" title="显示不同"></a>显示不同</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook foo.yml --check --diff --limit foo.example.com</span><br></pre></td></tr></table></figure><h4 id="只执行一次"><a href="#只执行一次" class="headerlink" title="只执行一次"></a>只执行一次</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="attr">    - command:</span> <span class="string">/opt/application/upgrade_db.py</span></span><br><span class="line"><span class="attr">      run_once:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - apt:</span> <span class="string">name=cobbler</span> <span class="string">state=installed</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line"><span class="attr">        http_proxy:</span> <span class="attr">http://proxy.example.com:8080</span></span><br></pre></td></tr></table></figure><h4 id="忽略错误"><a href="#忽略错误" class="headerlink" title="忽略错误"></a>忽略错误</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">this</span> <span class="string">will</span> <span class="string">not</span> <span class="string">be</span> <span class="string">counted</span> <span class="string">as</span> <span class="string">a</span> <span class="string">failure</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/bin/false</span></span><br><span class="line"><span class="attr">  ignore_errors:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h4 id="判断错误"><a href="#判断错误" class="headerlink" title="判断错误"></a>判断错误</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">this</span> <span class="string">command</span> <span class="string">prints</span> <span class="string">FAILED</span> <span class="string">when</span> <span class="string">it</span> <span class="string">fails</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/usr/bin/example-command</span> <span class="bullet">-x</span> <span class="bullet">-y</span> <span class="bullet">-z</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">command_result</span></span><br><span class="line"><span class="attr">  failed_when:</span> <span class="string">"'FAILED' in command_result.stderr"</span></span><br></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=installed</span></span><br><span class="line"><span class="attr">      with_items:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">memcached</span></span><br><span class="line"><span class="attr">      tags:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">packages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - template:</span> <span class="string">src=templates/src.j2</span> <span class="string">dest=/etc/foo.conf</span></span><br><span class="line"><span class="attr">      tags:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">configuration</span></span><br></pre></td></tr></table></figure><p>只想运行一个非常大的 playbook 中的 “configuration” 和 “packages”,你可以这样做:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook example.yml --tags "configuration,packages"</span><br></pre></td></tr></table></figure><p>只想执行 playbook 中某个特定任务 <em>之外</em> 的所有任务,你可以这样做:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook example.yml --skip-tags "notification"</span><br></pre></td></tr></table></figure><h4 id="Vault"><a href="#Vault" class="headerlink" title="Vault"></a>Vault</h4><p>vault 可以加密任何 Ansible 使用的结构化数据文件. </p><h4 id="灵活运行"><a href="#灵活运行" class="headerlink" title="灵活运行"></a>灵活运行</h4><p>从指定的任务开始执行playbook</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml --start-at="install packages"</span><br></pre></td></tr></table></figure><p>分步交互式的执行playbook</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml --step</span><br></pre></td></tr></table></figure><h3 id="模块相关"><a href="#模块相关" class="headerlink" title="模块相关"></a>模块相关</h3><p>列出已安装的模块</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-doc -l</span><br></pre></td></tr></table></figure><p>查看模块文档</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-doc yum</span><br><span class="line">ansible-doc -s yum  # 简略版</span><br></pre></td></tr></table></figure><h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令模块</span><br><span class="line">    command</span><br><span class="line">    shell</span><br><span class="line">文件模块</span><br><span class="line">    copy</span><br><span class="line">    fetch</span><br><span class="line">    file</span><br><span class="line">安装模块</span><br><span class="line">    yum</span><br><span class="line">服务模块</span><br><span class="line">    service</span><br><span class="line">挂载模块</span><br><span class="line">    mount</span><br><span class="line">定时任务</span><br><span class="line">    cron</span><br><span class="line">用户模块</span><br><span class="line">    group</span><br><span class="line">    user</span><br><span class="line">压缩解压</span><br><span class="line">    unarchive</span><br><span class="line">基础信息</span><br><span class="line">    setup</span><br><span class="line">连通测试</span><br><span class="line">    ping</span><br></pre></td></tr></table></figure><p>可以直接在远程主机上执行命令，并将结果返回本主机。注意，该命令不支持 | 管道命令</p><h5 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h5><p>管理cron计划任务的</p><h3 id="常用demo"><a href="#常用demo" class="headerlink" title="常用demo"></a>常用demo</h3><p>测试连通：<code>ansible xxx -m ping</code><br>复制文件：<code>ansible xxx -m copy -a &quot;src=/xxx dest=/xxx&quot;</code><br>`</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件(按照查找顺序排列)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* ansible.cfg (位于当前目录中)</span><br><span class="line">* ANSIBLE_CONFIG (一个环境变量)</span><br><span class="line">* .ansible.cfg (位于家目录中)</span><br><span class="line">* /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure></p><p><a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg" target="_blank" rel="noopener">配置例子</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装redmine3.4</title>
      <link href="/2020/04/20/linux/centos7-an-zhuang-redmine3-4/"/>
      <url>/2020/04/20/linux/centos7-an-zhuang-redmine3-4/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7安装redmine3-4"><a href="#centos7安装redmine3-4" class="headerlink" title="centos7安装redmine3.4"></a>centos7安装redmine3.4</h1><h2 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h2><p><code>Linux centos7 3.10.0-1062.18.1.el7.x86_64 #1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld  <span class="comment"># 关闭防火墙</span></span><br><span class="line">yum install mariadb-libs mariadb mariadb-devel mariadb-server ImageMagick-devel  ImageMagick ruby rubygems ruby-devel -y  <span class="comment"># 安装所需包</span></span><br><span class="line">wget https://www.redmine.org/releases/redmine-3.4.7.tar.gz  <span class="comment"># 获取安装包</span></span><br><span class="line">tar xf redmine-3.4.7.tar.gz -C  /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redmine-3.4.7/config</span><br><span class="line">cp configuration.yml.example  configuration.yml</span><br><span class="line">cp database.yml.example database.yml</span><br><span class="line">vim database.yml  <span class="comment"># 配置数据库用户名密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start mariadb  <span class="comment"># 开启数据库</span></span><br></pre></td></tr></table></figure><p>mysq插入数据<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> redmine <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'redmine'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> redmine.* <span class="keyword">TO</span> <span class="string">'redmine'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="RUBY"><a href="#RUBY" class="headerlink" title="RUBY"></a>RUBY</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gem <span class="built_in">source</span> -l  <span class="comment"># 查看源</span></span><br><span class="line">gem sources -a http://mirrors.aliyun.com/rubygems/  <span class="comment"># 添加国内源</span></span><br><span class="line">gem sources --remove  https://rubygems.org/  <span class="comment"># 删除国外源</span></span><br><span class="line">gem <span class="built_in">source</span> -u  <span class="comment"># 更新源</span></span><br><span class="line">gem <span class="built_in">source</span> -l  <span class="comment"># 查看源</span></span><br><span class="line"></span><br><span class="line">升级RUBY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install mpapis public key (might need `gpg2` and or `sudo`)</span></span><br><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download the installer</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer</span><br><span class="line">curl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer.asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify the installer signature (might need `gpg2`), and if it validates...</span></span><br><span class="line">gpg --verify rvm-installer.asc &amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the installer</span></span><br><span class="line">bash rvm-installer stable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rvm -v  <span class="comment"># 查看rvm版本</span></span><br><span class="line"></span><br><span class="line">rvm list known  <span class="comment"># 查看Ruby版本</span></span><br><span class="line">rvm install 2.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gem install bundler  <span class="comment">#Redmine使用Bundler来管理gems依赖项，需要先安装Bundler</span></span><br><span class="line">bundle install --without development <span class="built_in">test</span>  production  <span class="comment">#安装Redmine所需的所有gem</span></span><br><span class="line">bundle <span class="built_in">exec</span> rake generate_secret_token  <span class="comment"># 生成Rails使用的随机密钥，用于编码存储会话数据的cookie，从而防止其被篡改。</span></span><br><span class="line">生成新的机密令牌会在重新启动后使所有现有会话无效。将此秘密存储在config/secrets.yml中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vbox下linux添加和启动网卡</title>
      <link href="/2020/04/14/linux/vbox-xia-linux-tian-jia-he-qi-dong-wang-qia/"/>
      <url>/2020/04/14/linux/vbox-xia-linux-tian-jia-he-qi-dong-wang-qia/</url>
      
        <content type="html"><![CDATA[<h1 id="vbox下linux添加和启动网卡"><a href="#vbox下linux添加和启动网卡" class="headerlink" title="vbox下linux添加和启动网卡"></a>vbox下linux添加和启动网卡</h1><h2 id="vbox添加新网卡"><a href="#vbox添加新网卡" class="headerlink" title="vbox添加新网卡"></a>vbox添加新网卡</h2><p><img src="https://markdown-resource.oss-cn-shenzhen.aliyuncs.com/img20200408162332.png" alt></p><h2 id="查看网卡名字"><a href="#查看网卡名字" class="headerlink" title="查看网卡名字"></a>查看网卡名字</h2><p>ubuntu16：<br><code>ls /sys/class/net</code></p><p>centos7：<br><code>ls /etc/sysconfig/network-scripts/  (ifcfg-*就是接口名称)</code></p><h2 id="手动开启接口："><a href="#手动开启接口：" class="headerlink" title="手动开启接口："></a>手动开启接口：</h2><p>ubuntu：<br><code>ifconfig 接口名 up</code></p><p>centos7：<br><code>/etc/sysconfig/network-scripts/if-up  接口名</code><br>或 <code>ifconfig 接口名 up</code></p><h2 id="编辑接口文件（开机启动接口，静态设置等）"><a href="#编辑接口文件（开机启动接口，静态设置等）" class="headerlink" title="编辑接口文件（开机启动接口，静态设置等）"></a>编辑接口文件（开机启动接口，静态设置等）</h2><p>ubuntu：<br><code>vim /etc/networks/interfaces</code><br><img src="https://markdown-resource.oss-cn-shenzhen.aliyuncs.com/img20200408162414.png" alt></p><p>centos7：<br><code>vim /etc/sysconfig/network-script/接口名</code><br><img src="https://markdown-resource.oss-cn-shenzhen.aliyuncs.com/img20200408162438.png" alt></p><h2 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h2><p>ubuntu：<br><code>service networking restart</code></p><p>centos7：<br><code>systemctl start network.service</code><br>或 <code>service network restart</code></p><h2 id="查看接口ip"><a href="#查看接口ip" class="headerlink" title="查看接口ip"></a>查看接口ip</h2><p><code>ipconfig</code>  或 <code>ip add</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWK 知识与技巧</title>
      <link href="/2020/04/14/linux/awk-zhi-shi-yu-ji-qiao/"/>
      <url>/2020/04/14/linux/awk-zhi-shi-yu-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="AWK-知识与技巧"><a href="#AWK-知识与技巧" class="headerlink" title="AWK 知识与技巧"></a>AWK 知识与技巧</h1><h3 id="使用match匹配关键字并且输出匹配内容"><a href="#使用match匹配关键字并且输出匹配内容" class="headerlink" title="使用match匹配关键字并且输出匹配内容"></a>使用match匹配关键字并且输出匹配内容</h3><blockquote><p>命令 </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat wget-list-USTC.row | grep -v <span class="string">'^$'</span> |  awk <span class="string">'&#123;match($0,/&lt;a href="(.+)"&gt;/,a); print "http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/"a[1]&#125;'</span> &gt; wget-list</span><br></pre></td></tr></table></figure><blockquote><p>实际例子</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat wget-list-USTC.row | head</span><br><span class="line">&lt;a href=&quot;Python-3.8.1.tar.xz&quot;&gt;Python-3.8.1.tar.xz&lt;/a&gt;                                18-Dec-2019 21:30            17828408</span><br><span class="line">&lt;a href=&quot;XML-Parser-2.46.tar.gz&quot;&gt;XML-Parser-2.46.tar.gz&lt;/a&gt;                             24-Sep-2019 05:29              254763</span><br><span class="line">&lt;a href=&quot;acl-2.2.53.tar.gz&quot;&gt;acl-2.2.53.tar.gz&lt;/a&gt;                                  16-Aug-2018 16:36              524300</span><br><span class="line">&lt;a href=&quot;attr-2.4.48.tar.gz&quot;&gt;attr-2.4.48.tar.gz&lt;/a&gt;                                 16-Aug-2018 16:36              467840</span><br><span class="line">&lt;a href=&quot;autoconf-2.69.tar.xz&quot;&gt;autoconf-2.69.tar.xz&lt;/a&gt;                               16-Aug-2018 16:36             1214744</span><br><span class="line">&lt;a href=&quot;automake-1.16.1.tar.xz&quot;&gt;automake-1.16.1.tar.xz&lt;/a&gt;                             16-Aug-2018 16:36             1534936</span><br><span class="line">&lt;a href=&quot;bash-5.0-upstream_fixes-1.patch&quot;&gt;bash-5.0-upstream_fixes-1.patch&lt;/a&gt;                    01-Dec-2019 16:25               21672</span><br><span class="line">&lt;a href=&quot;bash-5.0.tar.gz&quot;&gt;bash-5.0.tar.gz&lt;/a&gt;                                    07-Jan-2019 14:13            10135110</span><br><span class="line">&lt;a href=&quot;bc-2.5.3.tar.gz&quot;&gt;bc-2.5.3.tar.gz&lt;/a&gt;                                    01-Feb-2020 16:02              252149</span><br><span class="line">&lt;a href=&quot;binutils-2.34.tar.xz&quot;&gt;binutils-2.34.tar.xz&lt;/a&gt;                               01-Feb-2020 12:24            21637796</span><br><span class="line"></span><br><span class="line">cat wget-list-USTC.row | grep -v &apos;^$&apos; |  awk &apos;&#123;match($0,/&lt;a href=&quot;(.+)&quot;&gt;/,a); print &quot;http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/&quot;a[1]&#125;&apos; &gt; wget-list</span><br><span class="line"></span><br><span class="line">cat wget-list | head</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/Python-3.8.1.tar.xz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/XML-Parser-2.46.tar.gz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/acl-2.2.53.tar.gz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/attr-2.4.48.tar.gz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/autoconf-2.69.tar.xz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/automake-1.16.1.tar.xz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bash-5.0-upstream_fixes-1.patch</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bash-5.0.tar.gz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/bc-2.5.3.tar.gz</span><br><span class="line">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/binutils-2.34.tar.xz</span><br></pre></td></tr></table></figure><blockquote><p>解析  </p></blockquote><p><code>match($0,/&lt;a href=&quot;(.+)&quot;&gt;/,a)</code>  match函数接收3个参数，第一个为输入，$0表示整行数据。第二个参数为正则匹配，参数内括号匹配到的内容按顺序保存到第三个参数命名的列表中，该例子为a，使用a[1]调用第一个括号匹配的内容，a[2]第二个括号内容，以此类推。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFS 搭建笔记</title>
      <link href="/2020/04/14/linux/lfs-da-jian-bi-ji/"/>
      <url>/2020/04/14/linux/lfs-da-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="LFS-搭建笔记"><a href="#LFS-搭建笔记" class="headerlink" title="LFS 搭建笔记"></a>LFS 搭建笔记</h1><blockquote><p>版本：SVN-20200401<br>文档链接：<a href="http://www.linuxfromscratch.org/lfs/view/development/index.html" target="_blank" rel="noopener">http://www.linuxfromscratch.org/lfs/view/development/index.html</a><br> 软件镜像源：<a href="http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/lfs/lfs-packages/9.1/</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本书共4部分，分为9章节，以下为每一章节的介绍。</p><p><strong>第1章</strong>为本书的介绍和说明部分。</p><p><strong>第2章</strong>介绍了如何创建新的Linux本机分区和文件系统。在这里将编译和安装新的LFS系统。  </p><p><strong>第3章</strong>介绍了构建LFS系统需要下载哪些软件包和修补程序以及如何将它们存储在新文件系统中。</p><p><strong>第4章</strong>讨论了合适的工作环境的设置，以及如何搭建工作环境。</p><p><strong>第5章</strong>说明了许多软件包的安装，这些软件包将构成第6章中用于构建实际系统的基本开发套件（或工具链）。</p><p><strong>第6章</strong>构建了完整的LFS系统。在chroot环境（改变root）程序用来进入一个虚拟环境，并开始一个新的shell，其根目录被设置为LFS分区。</p><p><strong>第7章</strong>为设置基本的系统配置。  </p><p><strong>第8章</strong>为设置内核和引导加载程序。  </p><p><strong>第9章</strong>包含有关在本书之外继续LFS经验的信息。实施本书中的步骤之后，计算机将准备好重新启动进入新的LFS系统。</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>第二部分的总体目标 是创建一个临时区域，其中包含可以与主机系统隔离的一组已知良好的工具。通过使用 chroot，其余各章中的命令将包含在该环境中，从而确保目标LFS系统的构建干净无误。<br>包括的工具链有：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Binutils-2.34 <span class="comment"># Binutils程序包包含一个链接器，一个汇编器和其他用于处理目标文件的工具。</span></span><br><span class="line">GCC-9.3.0 <span class="comment"># GCC软件包包含GNU编译器集合，其中包括C和C ++编译器。</span></span><br><span class="line">Linux-5.5.9 API Headers  <span class="comment"># 内核的API，供Glibc使用。</span></span><br><span class="line">Glibc-2.31  <span class="comment"># Glibc软件包包含主要的C库。该库提供了用于分配内存，搜索目录，打开和关闭文件，读取和写入文件，字符串处理，模式匹配，算术等等的基本例程。</span></span><br><span class="line">Libstdc++  <span class="comment"># 标准的C++库</span></span><br><span class="line">Tcl-8.6.10  <span class="comment"># 工具命令语言，强大的通用脚本语言。</span></span><br><span class="line">Expect-5.45.4  <span class="comment"># 自动化工具，通过脚本对话框，交互式应用，如远程登录， FTP，passwd，fsck的，远程登录并提示。DejaGnu依赖Expect</span></span><br><span class="line">DejaGNU-1.6.2  <span class="comment"># GNU工具的运行测试套件的框架</span></span><br><span class="line">M4-1.4.18  <span class="comment"># 宏处理器</span></span><br><span class="line">Ncurses-6.2  <span class="comment"># 终端独立处理字符屏幕的库</span></span><br><span class="line">Bash-5.0  <span class="comment"># Bourne-Again SHell</span></span><br><span class="line">Bison-3.5.3  <span class="comment"># 解析器生成器</span></span><br><span class="line">Bzip2-1.0.8  <span class="comment"># 压缩和解压缩文件的程序</span></span><br><span class="line">Coreutils-8.32  <span class="comment"># 显示和设置基本系统特征的实用程序</span></span><br><span class="line">Diffutils-3.7  <span class="comment"># 显示文件或目录之间差异的程序</span></span><br><span class="line">File-5.38  <span class="comment"># 查看文件或多个文件类型的实用程序</span></span><br><span class="line">Findutils-4.7.0  <span class="comment"># 查找文件的程序</span></span><br><span class="line">Gawk-5.0.1  <span class="comment"># 处理文本文件的程序</span></span><br><span class="line">Gettext-0.20.1  <span class="comment"># 国际化和本地化的实用程序</span></span><br><span class="line">Grep-3.4  <span class="comment"># 搜索、过滤文件的程序</span></span><br><span class="line">Gzip-1.10  <span class="comment"># 压缩和解压缩文件</span></span><br><span class="line">Make-4.3  <span class="comment"># 编译软件包的程序</span></span><br><span class="line">Patch-2.7.6  <span class="comment"># 通常由diff程序创建的“补丁程序”文件 来修改或创建文件</span></span><br><span class="line">Perl-5.30.2  <span class="comment"># 实用的提取和报告语言</span></span><br><span class="line">Python-3.8.2  <span class="comment"># Python开发环境</span></span><br><span class="line">Sed-4.8  <span class="comment"># 流编辑器</span></span><br><span class="line">Tar-1.32  <span class="comment"># 归档程序</span></span><br><span class="line">Texinfo-6.7  <span class="comment"># 用于读取，写入和转换信息页面的程序</span></span><br><span class="line">Xz-5.2.5  <span class="comment"># 压缩和解压缩文件的程序</span></span><br></pre></td></tr></table></figure></p><p>第三部分为使用第二部分建立的与主机系统隔离的工具来建立LFS系统，安装基本系统软件与系统配置文件介绍。<br>包括的工具链有：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux-5.5.9 API Headers</span><br><span class="line">Man-pages-5.05  <span class="comment"># 帮助手册</span></span><br><span class="line">Glibc-2.31  <span class="comment"># Glibc软件包包含主要的C库。该库提供了用于分配内存，搜索目录，打开和关闭文件，读取和写入文件，字符串处理，模式匹配，算术等等的基本例程。</span></span><br><span class="line">Zlib-1.2.11  <span class="comment"># 程序使用的压缩和解压缩库</span></span><br><span class="line">Bzip2-1.0.8  <span class="comment"># # 程序使用的压缩和解压缩库</span></span><br><span class="line">Xz-5.2.5  <span class="comment"># # 程序使用的压缩和解压缩库</span></span><br><span class="line">File-5.38  <span class="comment"># 查看文件或多个文件类型的实用程序</span></span><br><span class="line">Readline-8.0  <span class="comment"># 提供命令行编辑和历史记录功能的库。</span></span><br><span class="line">M4-1.4.18  <span class="comment"># 宏处理器</span></span><br><span class="line">Bc-2.6.0  <span class="comment"># 算数运算</span></span><br><span class="line">Binutils-2.34 <span class="comment"># Binutils程序包包含一个链接器，一个汇编器和其他用于处理目标文件的工具。</span></span><br><span class="line">GMP-6.2.0  <span class="comment"># 精密数学函数</span></span><br><span class="line">MPFR-4.0.2  <span class="comment"># 多精度数学的函数</span></span><br><span class="line">MPC-1.1.0  <span class="comment"># 复数算术运算</span></span><br><span class="line">Attr-2.4.48  <span class="comment"># 管理文件系统对象上的扩展属性</span></span><br><span class="line">Acl-2.2.53  <span class="comment"># 为文件和目录定义更细粒度的自由访问权限</span></span><br><span class="line">Shadow-4.8.1  <span class="comment"># 以安全方式处理密码的程序</span></span><br><span class="line">GCC-9.3.0 <span class="comment"># GCC软件包包含GNU编译器集合，其中包括C和C ++编译器</span></span><br><span class="line">Pkg-config-0.29.2  <span class="comment"># 用于在配置和执行文件期间传递包含路径和/或库路径以构建工具</span></span><br><span class="line">Ncurses-6.2  <span class="comment"># 用于终端独立处理字符屏幕的库</span></span><br><span class="line">Libcap-2.33  <span class="comment"># 将所有强大的root特权划分为一组不同的特权</span></span><br><span class="line">Sed-4.8  <span class="comment"># 流编辑器</span></span><br><span class="line">Psmisc-23.3  <span class="comment"># 显示有关正在运行的进程的信息的程序</span></span><br><span class="line">Iana-Etc-2.30  <span class="comment"># 为网络服务和协议提供数据</span></span><br><span class="line">Bison-3.5.3  <span class="comment"># 解析器生成器</span></span><br><span class="line">Flex-2.6.4  <span class="comment"># 生成识别文本模式的程序</span></span><br><span class="line">Grep-3.4  <span class="comment"># 搜索、过滤文件的程序</span></span><br><span class="line">Bash-5.0  <span class="comment"># Bourne-Again SHell</span></span><br><span class="line">Libtool-2.4.6  <span class="comment"># GNU通用库支持脚本</span></span><br><span class="line">GDBM-1.18.1  <span class="comment"># GNU数据库管理器</span></span><br><span class="line">Gperf-3.1  <span class="comment"># 从密钥集生成哈希函数</span></span><br><span class="line">Expat-2.2.9  <span class="comment"># 面向流的C库，用于解析XML</span></span><br><span class="line">Inetutils-1.9.4  <span class="comment"># 基本联网的程序</span></span><br><span class="line">Perl-5.30.2  <span class="comment"># 提取和报告语言</span></span><br><span class="line">XML::Parser-2.46  <span class="comment"># James Clark的XML解析器Expat的Perl接口</span></span><br><span class="line">Intltool-0.51.0  <span class="comment"># 一种国际化工具，用于从源文件中提取可翻译字符串</span></span><br><span class="line">Autoconf-2.69  <span class="comment"># 用于生成可自动配置源代码的Shell脚本的程序</span></span><br><span class="line">Automake-1.16.2  <span class="comment"># 用于生成与Autoconf一起使用的Makefile的程序</span></span><br><span class="line">Kmod-27  <span class="comment"># 用于加载内核模块的库和实用程序</span></span><br><span class="line">Gettext-0.20.1  <span class="comment"># 用于国际化和本地化的实用程序</span></span><br><span class="line">Libelf from Elfutils-0.179  <span class="comment"># 用于处理ELF（可执行和可链接格式）文件的库</span></span><br><span class="line">Libffi-3.3  <span class="comment"># 为各种调用约定提供了一个可移植的高级编程接口。这允许程序员在运行时调用由调用接口描述指定的任何函数</span></span><br><span class="line">OpenSSL-1.1.1f  <span class="comment"># 与加密有关的管理工具和库</span></span><br><span class="line">Python-3.8.2  <span class="comment"># Python开发环境</span></span><br><span class="line">Ninja-1.10.0  <span class="comment"># 注重速度的小型构建系统</span></span><br><span class="line">Meson-0.54.0  <span class="comment"># 高生产率的构建系统</span></span><br><span class="line">Coreutils-8.32  <span class="comment"># 显示和设置基本系统特征的实用程序</span></span><br><span class="line">Check-0.14.0  <span class="comment"># C的单元测试框架</span></span><br><span class="line">Diffutils-3.7  <span class="comment"># 显示文件或目录之间差异的程序</span></span><br><span class="line">Gawk-5.0.1  <span class="comment"># 处理文本文件的程序</span></span><br><span class="line">Findutils-4.7.0  <span class="comment"># 查找文件的程序</span></span><br><span class="line">Groff-1.22.4  <span class="comment"># 处理和格式化文本的程序</span></span><br><span class="line">GRUB-2.04  <span class="comment"># GRand Unified Bootloader</span></span><br><span class="line">Less-551  <span class="comment"># 文本文件查看器</span></span><br><span class="line">Gzip-1.10  <span class="comment"># 压缩和解压缩文件的程序</span></span><br><span class="line">Zstd-1.4.4  <span class="comment"># 实时压缩算法，可提供高压缩率。</span></span><br><span class="line">IPRoute2-5.5.0  <span class="comment"># 基本和高级基于IPV4的网络的程序</span></span><br><span class="line">Kbd-2.2.0  <span class="comment"># 键表文件，控制台字体和键盘实用程序</span></span><br><span class="line">Libpipeline-1.5.2  <span class="comment"># 用于以灵活方便的方式操纵子流程的管道</span></span><br><span class="line">Make-4.3  <span class="comment"># 编译软件包的程序</span></span><br><span class="line">Patch-2.7.6  <span class="comment"># 通常由diff程序创建的“补丁程序”文件 来修改或创建文件</span></span><br><span class="line">Man-DB-2.9.1  <span class="comment"># 手册数据库</span></span><br><span class="line">Tar-1.32  <span class="comment"># 归档程序</span></span><br><span class="line">Texinfo-6.7  <span class="comment"># 用于读取，写入和转换信息页面的程序</span></span><br><span class="line">Vim-8.2.0486  <span class="comment"># 文本编辑器</span></span><br><span class="line">Procps-ng-3.3.16  <span class="comment"># 用于监视过程的程序</span></span><br><span class="line">Util-linux-2.35.1  <span class="comment"># 其他实用程序。其中包括用于处理文件系统，控制台，分区和消息的实用程序</span></span><br><span class="line">Eudev-3.2.9  <span class="comment"># 动态创建设备节点的程序</span></span><br><span class="line">E2fsprogs-1.45.6  <span class="comment"># 处理ext2文件系统的实用程序 。它还支持ext3和ext4日志文件系统</span></span><br><span class="line">Sysklogd-1.5.1  <span class="comment"># 记录系统消息的程序</span></span><br><span class="line">Sysvinit-2.96  <span class="comment"># 控制系统的启动，运行和关闭的程序</span></span><br></pre></td></tr></table></figure></p><p>系统配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/ifconfig.eth0  <span class="comment"># 网络接口配置</span></span><br><span class="line">/etc/resolv.conf  <span class="comment"># 域名解析配置</span></span><br><span class="line">/etc/hostname  <span class="comment"># 主机名配置</span></span><br><span class="line">/etc/hosts  <span class="comment"># 主机名ip映射配置</span></span><br><span class="line">/etc/inittab  <span class="comment"># 内核初始化文件</span></span><br><span class="line">/etc/rc.d/  <span class="comment"># 启动级别配置</span></span><br><span class="line">/etc/sysconfig/clock  <span class="comment"># 系统时钟配置</span></span><br><span class="line">/etc/sysconfig/console  <span class="comment"># 控制台样式配置</span></span><br><span class="line">/etc/profile  <span class="comment"># profile配置</span></span><br><span class="line">~/.bash_profile  <span class="comment"># bash配置</span></span><br><span class="line">/etc/inputrc  <span class="comment"># 键盘输入映射配置</span></span><br><span class="line">/etc/shells  <span class="comment"># 登录Shell列表</span></span><br><span class="line">/etc/fstab  <span class="comment"># 启动挂载配置</span></span><br></pre></td></tr></table></figure></p><h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><p><strong>交叉编译</strong>是在一个平台上生成另一个平台上的可执行代码。同一个体系结构可以运行不同的操作系统；同样，同一个操作系统也可以在不同的体系结构上运行。</p><p><strong>LSB</strong>（Linux Standard Base<br>）有五个独立的标准：内核、C++、桌面、运行时语言和输出。</p><p>一般来说，交换分区的推荐大小为物理内存的两倍左右，实际上并无此必要。<br>对于 LFS 或者是 Gentoo 总是编译源代码的发行版来说，swap 分区是极其有必要的。在编译过程中，编译系统会将那些不总是变化的文件寄存在 swap 分区中，而为软件编译过程提供更多的内存空间。</p><p><strong>ext2</strong><br>适用于那些分区容量不是太大，更新也不频繁的情况，例如 /boot 分区。</p><p><strong>ext3</strong><br>是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复。它通常被用作通用的文件系统。</p><p><strong>ext4</strong><br>是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、以及速度的提升。</p><p><strong>strip</strong><br>简单的说就是给文件脱掉外衣，具体就是从特定文件中剥掉一些符号信息和调试信息，使文件变小。<br>其实， strip不仅仅可以针对可执行文件， 还能针对目标文件和动态库等. 在实际的开发中， 经常需要对动态库.so进行strip操作， 减少占地空间。 而在调试的时候（比如用addr2line）， 就需要符号了。 因此， 通常的做法是： strip前的库用来调试， strip后的库用来实际发布， 他们两者有对应关系。 一旦发布的strip后的库出了问题， 就可以找对应的未strip的库来定位。</p><p><strong>使用多个CPU核心来加速编译速度</strong><br>对于具有多个处理器（或内核）的许多现代系统，可以通过设置环境变量或告知make 程序有多少个处理器来执行“并行make”来减少程序包的编译时间。例如，Core2Duo可以同时支持两个进程：</p><p>export MAKEFLAGS=’-j 2’<br>或仅通过以下方式进行构建：</p><p>make -j2</p><p><strong>构建此最小系统需要两个步骤</strong>。第一步是构建一个新的且独立于主机的工具链（编译器，汇编器，链接器，库和一些有用的实用程序）。第二步使用此工具链构建其他基本工具。</p><p><strong>动态链接库查找顺序和路径</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ld --verbose | grep SEARCH</span><br><span class="line">SEARCH_DIR(<span class="string">"=/usr/x86_64-redhat-linux/lib64"</span>); SEARCH_DIR(<span class="string">"=/usr/lib64"</span>); SEARCH_DIR(<span class="string">"=/usr/local/lib64"</span>); SEARCH_DIR(<span class="string">"=/lib64"</span>); SEARCH_DIR(<span class="string">"=/usr/x86_64-redhat-linux/lib"</span>); SEARCH_DIR(<span class="string">"=/usr/local/lib"</span>); SEARCH_DIR(<span class="string">"=/lib"</span>); SEARCH_DIR(<span class="string">"=/usr/lib"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>静态库和动态库</strong><br>静态库和动态库从字面意思来看，区别就是静态和动态。而这里的静态和动态指的是库的链接阶段。可以看如下的编译过程。</p><p>静态库：在链接阶段库将会与目标汇编后的目标文件.o一起打包生成可执行文件。成为可执行文件的一部分，后续此库就可以消失了。也就是说在编译的最后一步（链接阶段），如果程序需要使用静态库，在这一步都会一起打包到可执行文件中。<br>动态库：而动态库在编译阶段都不会有什么动作，只有在程序运行时才被加载，也就是动态库的链接是发生在程序运行时期的，它和可执行文件是分开的，只是可执行文件在运行的某个时期调用了它。</p><p><strong>sys和proc文件系统</strong><br>1、sys文件系统本质上和proc文件系统是一样的，都是虚拟文件系统。都在根目录下有个目录（一个是/proc目录，另一个是/sys目录），因此都不是硬盘中的文件，都是内核中的数据结构的可视化接口。</p><p>2、不同的是/proc中的文件只能读，但是/sys中的文件可以读写。读/sys中的文件就是获取内核中数据结构的值，而写入/sys中的文件就是设置内核中的数据结构的元素的值。</p><p>3、历史上刚开始先有/proc文件系统，后来人们希望通过这种技术来调试内核。实际做出来的时候确实是很有用，所以很多内核开发者都去内核添加代码向/proc目录中写文件，而且刚开始的时候内核管理者对proc目录的使用也没有什么经验也没有什么统一规划，后来导致的结果就是proc里边的内容又多又杂乱。</p><p>4、后来觉得proc中的内容太多太乱缺乏统一规划，于是乎又添加了sys目录。sys文件系统一开始就做了很好的规划和约定，所以后来使用sys目录时有了规矩。</p><p><strong>临时文件</strong>/var/log/wtmp文件记录所有登录和注销。该/var/log/lastlog文件记录每个用户上次登录的时间。该/var/log/faillog文件记录失败的登录尝试。该/var/log/btmp文件记录错误的登录尝试。</p><p><strong>编译动态链接库</strong> ld指定动态库链接，除了修改/etc/ld.so.conf文件还要使用ldconfig刷新/etc/ld.so.cache缓存才能生效。<br>动态链接库查找顺序和路径：ld –verbose | grep SEARCH</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>LFS 从零开始学Linux，目标是以一个linux环境为基础，从零开始构建一个可用的Linux系统，这个Linux系统并不是最小的系统，而是包含了许多常用的软件，以及基本的开发、编译环境，可以从这个系统按需求繁衍出更为复杂的系统。</p><p>通过搭建LFS可以让我对Linux的基本组件有更深刻的认识，包括它们的依赖关系<br>、伴生关系、配置目录位置等，超过100个常用软件和库的编译让我更加熟悉系统的软件编译安装，各种配置参数的作用。从零开始构建让我了解了Linux的每一个细微的构成，每一个配置文件的作用以及目录位置，GRUB引导Linux的启动过程，</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSGI、uwsgi和uWSGI</title>
      <link href="/2019/10/29/python/wsgi-uwsgi-he-uwsgi/"/>
      <url>/2019/10/29/python/wsgi-uwsgi-he-uwsgi/</url>
      
        <content type="html"><![CDATA[<p><strong>WSGI</strong>：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，<strong>描述web server如何与web application通信的规范</strong>。server和application的规范在PEP 3333中有具体描述。要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 </p><p>WSGI协议主要包括server和application两部分：</p><ul><li><strong>WSGI server</strong>负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端；</li><li><strong>WSGI application</strong>接收由server转发的request，处理请求，并将处理结果返回给server。</li></ul><p>WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/wsgi.png" alt="img"></p><p>例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用。 </p><p><strong>uWSGI</strong>：是一个<strong>web服务器</strong>，实现了WSGI协议、uwsgi协议、http协议等。</p><p><strong>uwsgi</strong>：与WSGI一样是一种<strong>通信协议</strong>，是uWSGI服务器的独占协议，<strong>用于定义传输信息的类型(type of information)</strong>，每一个uwsgi packet前4byte为传输信息类型的描述，与WSGI协议是两种东西，据说该协议是fcgi协议的10倍快。 </p><p>参考链接：<a href="https://www.jianshu.com/p/679dee0a4193" target="_blank" rel="noopener">https://www.jianshu.com/p/679dee0a4193</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7搭建Turn服务器(coturn)</title>
      <link href="/2019/09/16/linux/da-jian-turn-fu-wu-qi/"/>
      <url>/2019/09/16/linux/da-jian-turn-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7搭建Turn服务器-coturn"><a href="#Centos7搭建Turn服务器-coturn" class="headerlink" title="Centos7搭建Turn服务器(coturn)"></a>Centos7搭建Turn服务器(coturn)</h1><p><a href="https://github.com/coturn/coturn/blob/master/INSTALL" target="_blank" rel="noopener">官方安装文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Webrtc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_attr模块</title>
      <link href="/2019/09/06/python/python-attr-mo-kuai/"/>
      <url>/2019/09/06/python/python-attr-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-attr-模块demo代码"><a href="#Python-attr-模块demo代码" class="headerlink" title="Python attr 模块demo代码"></a>Python attr 模块demo代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> attr</span><br><span class="line"><span class="keyword">from</span> attr.validators <span class="keyword">import</span> instance_of</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_str_len</span><span class="params">(instance, attribute, value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">10</span> &gt; len(value) &gt; <span class="number">1</span>:</span><br><span class="line">        print(value)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"wrong str len!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attr.s(auto_attribs=True, slots=True)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line">    name: str  <span class="comment"># 设置了auto_attribs会自动生成参数</span></span><br><span class="line">    page: int</span><br><span class="line">    book_type: list</span><br><span class="line">    author: str = attr.ib(validator=[instance_of(str), check_str_len])  <span class="comment"># 检查合法性，可以是多个条件</span></span><br><span class="line">    price: float = attr.ib(converter=float)  <span class="comment"># 类型转换为float</span></span><br><span class="line">    secret: str = attr.ib(repr=<span class="literal">False</span>)  <span class="comment"># 排除不输出</span></span><br><span class="line">    comment: str = attr.ib(default=<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Book(<span class="string">'python test'</span>, <span class="number">100</span>, [<span class="string">'计算机'</span>, <span class="string">'编程'</span>], <span class="string">'匿名'</span>, <span class="number">30</span>, <span class="string">'yqgadfgwsrtqaavssdfa'</span>, <span class="string">'一本好书'</span>)</span><br><span class="line">print(a)  <span class="comment"># 不输出repr=False的项</span></span><br><span class="line">print(a.__slots__)  <span class="comment"># 开启slots=True</span></span><br><span class="line">print(attr.asdict(a))  <span class="comment"># 转换属性为dict输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">console输出内容：</span></span><br><span class="line"><span class="string">Book(name='python test', page=100, book_type=['计算机', '编程'], author='匿名', price=30.0, comment='一本好书')</span></span><br><span class="line"><span class="string">('name', 'page', 'book_type', 'author', 'price', 'secret', 'comment', '__weakref__')</span></span><br><span class="line"><span class="string">&#123;'name': 'python test', 'page': 100, 'book_type': ['计算机', '编程'], 'author': '匿名', 'price': 30.0, 'secret': 'yqgadfgwsrtqaavssdfa', 'comment': '一本好书'&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.jianshu.com/p/2140b519028d" target="_blank" rel="noopener">https://www.jianshu.com/p/2140b519028d</a></p><p><a href="https://www.attrs.org/en/stable/examples.html" target="_blank" rel="noopener">https://www.attrs.org/en/stable/examples.html</a></p><p><a href="https://glyph.twistedmatrix.com/2016/08/attrs.html" target="_blank" rel="noopener">https://glyph.twistedmatrix.com/2016/08/attrs.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell启动脚本</title>
      <link href="/2019/08/02/linux/shell-qi-dong-jiao-ben/"/>
      <url>/2019/08/02/linux/shell-qi-dong-jiao-ben/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动脚本</span></span><br><span class="line"></span><br><span class="line">echo "当前用户：" $&#123;USER&#125;</span><br><span class="line">echo "当前目录：" $&#123;HOME&#125;</span><br><span class="line">echo "----------------------------"</span><br><span class="line"></span><br><span class="line">function start() &#123;</span><br><span class="line">    # 服务启动需要做的步骤</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stop() &#123;</span><br><span class="line">    # 服务停止需要做的步骤</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function restart() &#123;</span><br><span class="line">    # 重启服务需要做的步骤</span><br><span class="line">stop</span><br><span class="line">sleep 3</span><br><span class="line">start</span><br><span class="line">status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function status() &#123;</span><br><span class="line">    # 查看状态需要做的步骤</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断用户输入命令</span></span><br><span class="line">case $1 in </span><br><span class="line">   start)  # 服务启动需要做的步骤</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">   stop)  # 服务停止需要做的步骤</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">   restart) # 重启服务需要做的步骤</span><br><span class="line">        restart</span><br><span class="line">        ;；</span><br><span class="line">   status) # 查看状态需要做的步骤</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">   *) echo "Usage: $0 &#123;start|stop|restart|status&#125;"</span><br><span class="line">        exit 4</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket编程</title>
      <link href="/2019/06/14/python/socket-bian-cheng/"/>
      <url>/2019/06/14/python/socket-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Socket-编程"><a href="#Python-Socket-编程" class="headerlink" title="Python Socket 编程"></a>Python Socket 编程</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 建立一个服务端</span></span><br><span class="line">server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">'localhost'</span>,<span class="number">9090</span>)) <span class="comment"># 绑定要监听的端口</span></span><br><span class="line">server.listen(<span class="number">5</span>) <span class="comment"># 开始监听 表示可以使用五个链接排队</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment"># conn就是客户端链接过来而在服务端为期生成的一个链接实例</span></span><br><span class="line">    conn,addr = server.accept() <span class="comment"># 等待链接,多个链接的时候就会出现问题,其实返回了两个值</span></span><br><span class="line">    print(conn,addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)  <span class="comment"># 接收数据</span></span><br><span class="line">        print(<span class="string">'recive:'</span>,data.decode()) <span class="comment"># 打印接收到的数据</span></span><br><span class="line">        conn.send(data.upper()) <span class="comment"># 然后再发送数据</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">import</span> socket  <span class="comment"># 客户端 发送一个数据，再接收一个数据</span></span><br><span class="line">client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)  <span class="comment"># 声明socket类型，同时生成链接对象</span></span><br><span class="line">client.connect((<span class="string">'localhost'</span>,<span class="number">9090</span>))  <span class="comment">#建立一个链接，连接到本地的6969端口</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># addr = client.accept()</span></span><br><span class="line">    <span class="comment"># print '连接地址：', addr</span></span><br><span class="line">    msg = <span class="string">'欢迎访问菜鸟教程！'</span>  <span class="comment"># strip默认取出字符串的头尾空格</span></span><br><span class="line">    client.send(msg.encode(<span class="string">'utf-8'</span>))  <span class="comment"># 发送一条信息 python3 只接收btye流</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>) <span class="comment"># 接收一个信息，并指定接收的大小 为1024字节</span></span><br><span class="line">    print(<span class="string">'recv:'</span>,data.decode()) <span class="comment"># 输出我接收的信息</span></span><br><span class="line">client.close() <span class="comment"># 关闭这个链接</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux排错命令</title>
      <link href="/2019/05/10/linux/linux-pai-cuo-ming-ling/"/>
      <url>/2019/05/10/linux/linux-pai-cuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux排错命令"><a href="#Linux排错命令" class="headerlink" title="Linux排错命令"></a>Linux排错命令</h1><blockquote><p>记录一些排错命令和常用软件的日志位置，排错方法。</p></blockquote><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li>uname -a # 查看内核/操作系统/CPU信息，可以查看主机名、内核版本、系统平台等</li><li>head -n 1 /etc/issue # 查看操作系统版本</li><li>cat /proc/cpuinfo # 查看CPU信息<ul><li>processor     逻辑处理器的id。</li><li>physical id    物理封装的处理器的id。</li><li>core id          每个核心的id。</li><li>cpu cores     位于相同物理封装的处理器中的内核数量。</li><li>siblings         位于相同物理封装的处理器中的逻辑处理器的数量。</li></ul></li><li>hostname # 查看计算机名</li><li>lspci -tv # 列出所有PCI设备</li><li>lsusb -tv # 列出所有USB设备</li><li>lsmod # 列出加载的内核模块</li><li>env # 查看环境变量</li><li>sysctl -a # 查看所有系统内核参数 ，如net.ipv4.ip_forward</li><li>ifstat  # 查看接口流量</li></ul><h2 id="查看发行版"><a href="#查看发行版" class="headerlink" title="查看发行版"></a>查看发行版</h2><ul><li>lsb_release -a # 查看发行版详细信息 （有些发行版需要安装软件）</li><li>cat /etc/os-release</li><li>cat /etc/centos-release</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>free -m # 查看内存使用量和交换区使用量</li><li>df -h # 查看各分区使用情况</li><li>du -sh &lt;目录名&gt; # 查看指定目录的大小</li><li>grep MemTotal /proc/meminfo # 查看内存总量</li><li>grep MemFree /proc/meminfo # 查看空闲内存量</li><li>uptime # 查看系统运行时间、用户数、负载</li><li>cat /proc/loadavg # 查看系统负载</li></ul><h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><ul><li>mount | column -t # 查看挂接的分区状态</li><li>fdisk -l # 查看所有分区</li><li>swapon -s # 查看所有交换分区</li><li>hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)</li><li>dmesg | grep IDE # 查看启动时IDE设备检测状况</li><li>df -T  # 查看文件系统</li><li>df -i  # 查看inode数量</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>ifconfig # 查看所有网络接口的属性</li><li>iptables -L # 查看防火墙设置</li><li>route -n # 查看路由表</li><li>netstat -lntp # 查看所有监听端口</li><li>netstat -antp # 查看所有已经建立的连接</li><li>netstat -s # 查看网络统计信息</li><li>ip</li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ul><li>ps -ef # 查看所有进程</li><li>top # 实时显示进程状态</li><li>lsof -u FreezeJ  # 查看用户进程</li><li>strace  # 可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。</li><li>fuser -v FILENAME # 显示出当前哪个程序在使用磁盘上的某个文件</li></ul><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ul><li>w # 查看活动用户</li><li>id &lt;用户名&gt; # 查看指定用户信息</li><li>last # 查看用户登录日志</li><li>cut -d: -f1 /etc/passwd # 查看系统所有用户</li><li>cut -d: -f1 /etc/group # 查看系统所有组</li><li>crontab -l # 查看当前用户的计划任务cak</li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><ul><li>chkconfig –list  # 列出所有系统服务</li><li>chkconfig –list | grep on  # 列出所有启动的系统服务</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li>journalctl -u kubelet  # Centos6中没有该命令</li></ul><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><ul><li>rpm -qa # 查看所有安装的软件包 </li><li>yum provides glib-compile-resources  # 列出提供对应模块的程序</li><li>yum list  # 显示所有已经安装和可以安装的程序包</li><li>yum grouplist  # 批量安装的软件列表</li><li>yum info package1 显示安装包信息package1</li><li>yum clean packages 清除缓存目录下的软件包</li><li>yum deplist package1 查看程序package1依赖情况</li></ul><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ul><li>ssh -T # 检测ssh连接的连通性</li><li>ssh -vv  # 查看错误详情</li><li>tail -f /var/log/secure  # 查看错误信息</li><li>vim /etc/ssh/sshd_config  # ssh 后台服务配置文件</li><li>vim /etc/ssh/ssh_config  # ssh客户端配置文件</li></ul><h2 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h2><p>tail -f /var/log/cron  # 查看crontab执行日志</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><ul><li><p>使用set指令能设置所使用shell的执行方式，可依照不同的需求来做设置</p><ul><li><p>-a  标示已修改的变量，以供输出至环境变量。 </p></li><li><p>-b  使被中止的后台程序立刻回报执行状态。 </p></li><li><p>-C  所产生的文件无法覆盖已存在的文件。 </p></li><li><p>-d  Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。 </p></li><li><p><strong>-e  若指令传回值不等于0，则立即退出shell。</strong></p></li><li><p><strong>-o pipefail  管道失败也跳出</strong></p></li><li><p>-f  取消使用通配符。 </p></li><li><p>-m  使用监视模式。 </p></li><li><p>-t  执行完随后的指令，即退出shell。 </p></li><li><p><strong>-u  当执行时使用到未定义过的变量，则显示错误信息。 </strong></p></li><li><p>-v  显示shell所读取的输入值。 </p></li><li><p><strong>-x  执行指令后，会先显示该指令及所下的参数。 </strong></p></li><li><p>+&lt;参数&gt;  取消某个set曾启动的参数。</p></li></ul><p>也可以通过bash传入set参数，如<code>bash -euxo pipefail script.sh</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM实用技巧</title>
      <link href="/2019/05/09/linux/vim-shi-yong-ji-qiao/"/>
      <url>/2019/05/09/linux/vim-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM实用技巧"><a href="#VIM实用技巧" class="headerlink" title="VIM实用技巧"></a>VIM实用技巧</h1><p>I：在当前光标所在行的<strong>行首</strong>，转换为输入模式  <strong>可以用于快速添加注释</strong></p><p>A：在当前光标所在行的<strong>行尾</strong>，转换为输入模式  <strong>可以用于快速添加新内容</strong></p><p><strong>D：</strong>可以删除当前位置到行末的内容，C：可以删除当前位置到行末的内容并修改</p><p><strong>c: 用法同d命令 删除行并编辑该行</strong></p><p>#：向上查找光标所在的单词</p><p>*：向下查找光标所在的单词</p><p>%：查找闭合标点</p><p>e: 跳至当前或下一个单词的<strong>词尾</strong></p><p><strong>撤消最近一次撤消操作：Ctrl+r</strong></p><p>U：撤销一整行的修改</p><p><strong>.</strong>(点号)重复前一次编辑操作</p><p>在窗口间切换光标：Ctrl+w, ARROW    方便记忆：w——window</p><p><strong>与SHELL交互</strong>:! COMMAND</p><p>q：可以录制宏</p><p>:w !sudo tee %  没有sudo情况下调用sudo保存</p><p><strong><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-vimcolumn/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cn-vimcolumn/</a>  VIM纵向编辑技巧</strong></p><p><strong>ctrl-v</strong> 进入纵向编辑模式选择要编辑的地方  r(当前) I（向前）A（向后）修改 <strong>ESC退出才会应用</strong></p><p>V：按矩形选取  选择整行 ， 可以用于方便缩进操作</p><p>Ctrl + O 跳转到光标前一次位置</p><p>Ctrl + I  跳转到光标后一次位置</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM基础练习</title>
      <link href="/2019/05/09/linux/vim-ji-chu-lian-xi/"/>
      <url>/2019/05/09/linux/vim-ji-chu-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM基础练习"><a href="#VIM基础练习" class="headerlink" title="VIM基础练习"></a>VIM基础练习</h1><p>在学习vim的过程中，找了一些关于如何学习vim的文章来看，个人感觉<a href="https://link.zhihu.com/?target=http%3A//ju.outofmemory.cn/entry/79671" target="_blank" rel="noopener"> 跟我一起学习VIM - The Life Changing Editor </a>写得非常好，给了我很多的帮助，文中提到的<a href="https://link.zhihu.com/?target=http%3A//vim-adventures.com/" target="_blank" rel="noopener">vim大冒险</a> 是一个通过娱乐的方式学习vim使用的页面游戏，非常有意思，可惜的是现在只有前3关是免费的，并且后面的关卡收费略高。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/ad474c02a4009087af9a282f4a61893b_hd.png" alt="VIM大冒险"></p><p>vim-adventures（VIM大冒险）的截图</p><p>当然，土豪可以买来玩玩，还是很不错的（虽然我只是玩过免费的前3关）。反正我觉得还是使用linux自带的vimtutor比较经济实惠，毕竟是免费的，直接在CLI输入vimtutor就可以了。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/ffd307295737cee654d29b1f6bfbbf11_hd.png" alt="vimtutor"></p><p>这个自带的教程对于vim入门学习很不错，但是全是英文的，英文不好的看起来多多少少会有点吃力（毕竟现在是学vim，不是学英文，英文不好的就量力而行了。），但是莫慌，网上也有vimtutor的中文版：<a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/yff1030/article/details/8791376" target="_blank" rel="noopener">VimTutor中文版</a>。</p><p>为了便于练习，我在VimTutor中文版的基础上，我进行了一些修改，把多余的解释性话语删掉，添加了一点点新的内容，自己编写了一些小练习，提高练习的效率。当然，修改的过程也是完全在vim中进行的，同时也锻炼了自己对vim的使用。</p><p>下面是我修改后的vim练习，如果有需要就自行复制到vim中。这里只是vim最最常用的部分指令，多练习几遍就可以较为熟悉了。（注意，这只是vim部分常用指令的练习，解释、介绍性的语句已经被我删除，请学习了基本的命令，再进行练习。）</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">   第一讲第一节∶移动光标</span><br><span class="line"></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="number">000</span>*<span class="number">000</span>*<span class="number">000000</span>*<span class="number">0000</span>*<span class="number">0000000</span> <span class="number">0000</span>*<span class="number">00</span>*<span class="number">00000</span> <span class="number">00000</span>*<span class="number">00000</span>*       <span class="number">0</span></span><br><span class="line"><span class="number">000</span> <span class="number">000</span>      <span class="number">0</span> <span class="number">00</span>   <span class="number">0000000</span> <span class="number">0000</span> <span class="number">00</span>       <span class="number">00000</span> <span class="number">000000000000</span> <span class="number">0</span></span><br><span class="line"><span class="number">000</span>   <span class="number">000000</span> <span class="number">0</span>    <span class="number">000</span>        <span class="number">000</span> <span class="number">00000000</span> <span class="number">00000</span>              <span class="number">0</span></span><br><span class="line"><span class="number">00000</span> <span class="number">0</span>*   <span class="number">0</span> <span class="number">0</span>  <span class="number">000000000000</span> <span class="number">000</span> <span class="number">00000000</span> <span class="number">00</span>    <span class="number">000000000000</span> <span class="number">0</span></span><br><span class="line"><span class="number">0000</span>  <span class="number">0000</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">00</span>*       <span class="number">00</span> <span class="number">00</span>  <span class="number">0</span>      <span class="number">0</span> <span class="number">00</span> <span class="number">000000000</span>       <span class="number">0</span></span><br><span class="line"><span class="number">0000</span> <span class="number">00000</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">000000000</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>  <span class="number">000000</span> <span class="number">00</span> <span class="number">000000000</span> <span class="number">00000</span> <span class="number">0</span></span><br><span class="line"><span class="number">0000</span> <span class="number">00000</span> <span class="number">0</span> <span class="number">00</span> <span class="number">00</span>*   <span class="number">00</span>  <span class="number">00</span> <span class="number">0</span>  <span class="number">0</span>         <span class="number">00</span> <span class="number">0</span>*        <span class="number">00</span> *<span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0000</span>         <span class="number">00</span> <span class="number">00000</span> <span class="number">00</span> <span class="number">00000</span> <span class="number">000</span> <span class="number">000000000</span> <span class="number">000000000000</span> <span class="number">00</span> <span class="number">0</span></span><br><span class="line"><span class="number">000000000</span> <span class="number">00000</span> <span class="number">000</span>   <span class="number">00</span>   <span class="number">000</span> <span class="number">000</span> <span class="number">000000000</span> <span class="number">000000000000</span>    <span class="number">0</span></span><br><span class="line"><span class="number">0</span>         <span class="number">00000</span> <span class="number">000</span> <span class="number">000000</span> <span class="number">000</span>      <span class="number">00000000</span> <span class="number">0000</span>*<span class="number">000000000</span> <span class="number">00</span></span><br><span class="line"><span class="number">0</span> <span class="number">0000000</span> <span class="number">00000</span> <span class="number">000</span> <span class="number">0</span>*  <span class="number">00</span> <span class="number">000</span> <span class="number">0000</span> <span class="number">000</span>      <span class="number">0000</span> <span class="number">000000000</span> <span class="number">00</span></span><br><span class="line"><span class="number">0</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00000</span> <span class="number">000</span> <span class="number">000</span> <span class="number">00</span> <span class="number">000</span> <span class="number">0000</span> <span class="number">000</span> <span class="number">0000000</span>   <span class="number">00000000</span>  <span class="number">00</span></span><br><span class="line"><span class="number">0</span> <span class="number">00</span> <span class="number">0</span> <span class="number">00</span>       <span class="number">000</span> <span class="number">000</span> <span class="number">00</span>     <span class="number">0000</span>     <span class="number">000000</span>  <span class="number">00000</span>      <span class="number">000</span></span><br><span class="line"><span class="number">0</span> <span class="number">00</span>*<span class="number">0</span> <span class="number">000000000000</span> <span class="number">000</span> <span class="number">00000000000</span> <span class="number">000</span> <span class="number">00000</span>  <span class="number">000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span> <span class="number">0000</span> <span class="number">000000000000</span> <span class="number">000</span> <span class="number">00000000000</span> <span class="number">000</span>       <span class="number">0000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>           <span class="number">0000000</span> <span class="number">000</span>      <span class="number">000000</span> <span class="number">00000000000000000</span>        <span class="number">0</span></span><br><span class="line"><span class="number">00000000000</span>         <span class="number">00000000</span>        <span class="number">000000000</span>      <span class="number">000000000</span> <span class="number">0</span></span><br><span class="line"><span class="number">00</span> *<span class="number">0000000</span> <span class="number">0000</span> <span class="number">0000000000000000000000000000</span> <span class="number">0000</span> <span class="number">0000</span>*   <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span>       <span class="number">0000</span> <span class="number">00000000000000000000000</span>      <span class="number">0000</span> <span class="number">0000000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">00</span>    <span class="number">0000000000</span>                         <span class="number">000000000</span>           <span class="number">0</span></span><br><span class="line"><span class="number">00000000000000000000000000</span> start <span class="number">00000000000000000000000000000</span></span><br><span class="line"><span class="number">00000000000000000000000000000</span>*<span class="number">00000000000000000000000000000000</span></span><br><span class="line">---&gt;</span><br><span class="line"></span><br><span class="line">迷宫小游戏：</span><br><span class="line">把光标移动到---&gt;处，向上搜索*号(?*),此时迷宫中的*应该会被着色，如果没有，请按输入:<span class="keyword">set</span> hlsearch 高亮搜索结果</span><br><span class="line">然后从start下面的*开始，使用hjkl在空格中移动，把迷宫中所有的*替换(r)成空格。</span><br><span class="line">（输入:<span class="keyword">set</span> <span class="keyword">nohlsearch</span>可以关闭搜索高亮）</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">   第一讲第二节∶VIM的进入和退出</span><br><span class="line"></span><br><span class="line">  末行模式关闭文件</span><br><span class="line">  :q  退出</span><br><span class="line">  :<span class="keyword">wq</span> 保存并退出</span><br><span class="line">  :q! 不保存并退出</span><br><span class="line">  :<span class="keyword">w</span> 保存</span><br><span class="line">  :w! 强行保存</span><br><span class="line">  :<span class="keyword">wq</span> 相当于 :<span class="keyword">x</span></span><br><span class="line"></span><br><span class="line">  编辑模式下退出</span><br><span class="line">  ZZ: 保存并退出</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">   第一讲第三节∶文本编辑之删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ** 在正常(Normal)模式下，可以按下 <span class="keyword">x</span> 键来删除光标所在位置的字符。**</span><br><span class="line">参照下面的句子修改上面的句子，使上下一致：(配合<span class="keyword">w</span>、<span class="keyword">e</span>、<span class="number">0</span>、$、<span class="keyword">b</span>、B等移动指令来移动光标，提高速度)</span><br><span class="line"></span><br><span class="line">Great miinds haave purrpose, oothers havee wisshes.</span><br><span class="line">Great minds have purpose, others have wishes.</span><br><span class="line"></span><br><span class="line">If you fiind aa path wiith noo obsttaclles, it prrobabbly dooesn’t leead annywhere.</span><br><span class="line">If you <span class="keyword">find</span> <span class="keyword">a</span> path with <span class="keyword">no</span> obstacles, it probably doesn’t lead anywhere.</span><br><span class="line"></span><br><span class="line">Sommmetimes yoour pllans don’t wwwork out bbecause God haas betterr ones.</span><br><span class="line">Sometimes your plans don’t work out because God <span class="built_in">has</span> better ones.</span><br><span class="line"></span><br><span class="line">You caan’t have aa better tomorrow <span class="keyword">if</span> yyou doon’t sttop thinking aboout yesteerday.</span><br><span class="line">You can’t have <span class="keyword">a</span> better tomorrow <span class="keyword">if</span> you don’t <span class="keyword">stop</span> thinking about yesterday.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">       第一讲第四节∶文本编辑之插入</span><br><span class="line"></span><br><span class="line">   ** 在正常(Normal)模式下，可以按下 i 键来在光标所在位置插入字符。**</span><br><span class="line">参照下面的句子修改上面的句子，使上下一致：((配合<span class="keyword">w</span>、<span class="keyword">e</span>、<span class="number">0</span>、$、<span class="keyword">b</span>、B等移动指令来移动光标，提高速度)</span><br><span class="line"></span><br><span class="line">Gat mi have <span class="keyword">pu</span>, others h whes.</span><br><span class="line">Great minds have purpose, others have wishes.</span><br><span class="line"></span><br><span class="line">If <span class="keyword">y</span> <span class="keyword">find</span> <span class="keyword">a</span> <span class="keyword">p</span> <span class="keyword">wi</span> <span class="keyword">no</span> obsta, it <span class="keyword">pro</span> doesn’t <span class="keyword">le</span> <span class="keyword">an</span>.</span><br><span class="line">If you <span class="keyword">find</span> <span class="keyword">a</span> path with <span class="keyword">no</span> obstacles, it probably doesn’t lead anywhere.</span><br><span class="line"></span><br><span class="line">Som your pl don’t work out <span class="keyword">be</span> God <span class="built_in">has</span> <span class="keyword">be</span> ones.</span><br><span class="line">Sometimes your plans don’t work out because God <span class="built_in">has</span> better ones.</span><br><span class="line"></span><br><span class="line">You can’t h <span class="keyword">a</span> <span class="keyword">b</span> tom <span class="keyword">if</span> you don’t <span class="keyword">stop</span> thin <span class="keyword">ab</span> yest.</span><br><span class="line">You can’t have <span class="keyword">a</span> better tomorrow <span class="keyword">if</span> you don’t <span class="keyword">stop</span> thinking about yesterday.</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">   第二讲第一节∶删除类命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     ** 输入 dw 可以从光标处删除至一个单字/单词的末尾。**</span><br><span class="line"></span><br><span class="line">  练习：搜索并删除下列句子中的“”HAHA“”（不区分大小写）</span><br><span class="line"></span><br><span class="line">Great minds have HAHa purpose, others hAHA have wishes.</span><br><span class="line"></span><br><span class="line">If you <span class="keyword">find</span> <span class="keyword">a</span> path with <span class="keyword">no</span> HaHA obstacles, it probably HAHA doesn’t lead anywhere.</span><br><span class="line"></span><br><span class="line">Sometimes HAaA your plans don’t work out because HAHA God <span class="built_in">has</span> better ones.</span><br><span class="line"></span><br><span class="line">You can’t have <span class="keyword">a</span> better HaHA tomorrow <span class="keyword">if</span> you don’t <span class="keyword">stop</span> thinking HAhA about yesterday. </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">        第二讲第二节∶其他删除类命令</span><br><span class="line"></span><br><span class="line">   ** 输入 d$ 从当前光标删除到行末,d^从当前光标到行首**</span><br><span class="line"></span><br><span class="line">    练习：删除每行中第一个，后的内容，删除后通过撤销恢复原状，然后删除每一行第一个，前的内容。</span><br><span class="line"></span><br><span class="line">   Somebody typed the end of this <span class="built_in">line</span> twice, end of this <span class="built_in">line</span> twice.</span><br><span class="line"></span><br><span class="line">   Great minds have purpose, others have wishes.</span><br><span class="line"></span><br><span class="line">   If you <span class="keyword">find</span> <span class="keyword">a</span> path with <span class="keyword">no</span> obstacles, it probably doesn’t lead anywhere.</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">       第二讲第三节∶关于命令和对象</span><br><span class="line"></span><br><span class="line">  删除命令 d 的格式如下∶</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">number</span>]   d object     或者     d  [<span class="keyword">number</span>]   object</span><br><span class="line"></span><br><span class="line">  一个简短的对象列表∶</span><br><span class="line">    <span class="keyword">w</span> - 从当前光标当前位置直到单字/单词末尾，包括空格。</span><br><span class="line">    <span class="keyword">e</span> - 从当前光标当前位置直到单字/单词末尾，但是 *不* 包括空格。</span><br><span class="line">    $ - 从当前光标当前位置直到当前行末。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">  第二讲第四节∶对象命令的特殊情况</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ** 输入 dd 可以删除整一个当前行。 **</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>. 请将光标移动到本节中下面的短句段落中的第二行。</span><br><span class="line">  <span class="number">2</span>. 输入 dd 删除该行。</span><br><span class="line">  <span class="number">3</span>. 然后移动到第四行。</span><br><span class="line">  <span class="number">4</span>. 接着输入 <span class="number">2</span>dd 删除两行。</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>)  Roses are <span class="keyword">red</span>,</span><br><span class="line">      <span class="number">2</span>)  Mud <span class="keyword">is</span> fun,</span><br><span class="line">      <span class="number">3</span>)  Violets are blue,</span><br><span class="line">      <span class="number">4</span>)  I have <span class="keyword">a</span> car,</span><br><span class="line">      <span class="number">5</span>)  Clocks tell time,</span><br><span class="line">      <span class="number">6</span>)  Sugar <span class="keyword">is</span> sweet</span><br><span class="line">      <span class="number">7</span>)  And <span class="keyword">so</span> are you.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    第二讲第五节∶撤消类命令</span><br><span class="line"></span><br><span class="line">  ** 输入 <span class="keyword">u</span> 来撤消最后执行的命令，输入 U 来修正整行,CTRL-R撤销掉撤销动作**</span><br><span class="line"></span><br><span class="line">  练习：修正句子中的错误，修正好后使用U来恢复一整行。</span><br><span class="line"></span><br><span class="line">---&gt; Fiix the errors oon thhis <span class="built_in">line</span> <span class="built_in">and</span> reeplace them witth <span class="keyword">undo</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    第三讲第一节∶置入类命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ** 输入 <span class="keyword">p</span> 将最后一次删除的内容置入光标之后 **</span><br><span class="line"></span><br><span class="line">    将所有的行依序放置到正确的位置上。</span><br><span class="line"></span><br><span class="line">     d) Can you learn too?</span><br><span class="line">     <span class="keyword">b</span>) Violets are blue,</span><br><span class="line">     <span class="keyword">c</span>) Intelligence <span class="keyword">is</span> learned,</span><br><span class="line">     <span class="keyword">a</span>) Roses are <span class="keyword">red</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">         第三讲第二节∶替换类命令</span><br><span class="line">    请练习第一讲第一节</span><br><span class="line">    r:替换单字符</span><br><span class="line">    R:进入替换模式</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">   第三讲第三节∶更改类命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ** 要改变一个单字/单词的部分或者全部，请输入 <span class="keyword">cw</span> **</span><br><span class="line"></span><br><span class="line">   练习：修正下列错误</span><br><span class="line"></span><br><span class="line">---&gt; This lubw <span class="built_in">has</span> <span class="keyword">a</span> few wptfd that mrrf changing usf the <span class="keyword">change</span> <span class="keyword">command</span>.</span><br><span class="line">---&gt; This <span class="built_in">line</span> <span class="built_in">has</span> <span class="keyword">a</span> few words that need changing using the <span class="keyword">change</span> <span class="keyword">command</span>.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">         第三讲第四节∶使用<span class="keyword">c</span>指令的其他更改类命令</span><br><span class="line"></span><br><span class="line">      ** 更改类指令可以使用同删除类命令所使用的对象参数。**</span><br><span class="line">         <span class="keyword">cc</span>剪切一行并进入编辑模式</span><br><span class="line"></span><br><span class="line">    练习：使用 <span class="keyword">c</span>$ 使得该行剩下的部分更正得同第二行一样。</span><br><span class="line"></span><br><span class="line">---&gt; The end of this <span class="built_in">line</span> needs some <span class="keyword">help</span> <span class="keyword">to</span> <span class="keyword">make</span> it like the second.</span><br><span class="line">---&gt; The end of this <span class="built_in">line</span> needs <span class="keyword">to</span> <span class="keyword">be</span> corrected using the  <span class="keyword">c</span>$  <span class="keyword">command</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">       第四讲第一节∶定位及文件状态</span><br><span class="line"></span><br><span class="line">    <span class="keyword">vim</span> +# :打开文件，并定位于第#行 </span><br><span class="line">    <span class="keyword">vim</span> +  :打开文件，定位至最后一行</span><br><span class="line">    <span class="keyword">vim</span> +/PATTERN :打开文件，定位至第一次被PATTERN匹配到的行的行首</span><br><span class="line">    #G:跳转至第#行</span><br><span class="line">    G:最后一行</span><br><span class="line">    g<span class="variable">g:</span>第一行</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">   第四讲第二节∶搜索类命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     ** 输入 / 以及尾随的字符串可以用以在当前文件中查找该字符串。 输入？向上查找**</span><br><span class="line"></span><br><span class="line">    练习：找出errroor，并改为error。</span><br><span class="line"></span><br><span class="line">---&gt; When the <span class="built_in">search</span> reaches the end of the <span class="keyword">file</span> it will <span class="keyword">continue</span> at the start.</span><br><span class="line"></span><br><span class="line">  "errroor" is not the way to spell error;  errroor is an error.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">     第四讲第三节∶配对括号的查找</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       ** 按 % 可以查找配对的括号 )、]、&#125;。**</span><br><span class="line"></span><br><span class="line">---&gt; This ( <span class="keyword">is</span> <span class="keyword">a</span> test <span class="built_in">line</span> with (<span class="string">'s, ['</span>s ] <span class="built_in">and</span> &#123;<span class="string">'s &#125; in it. ))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">        第四讲第四节∶修正错误的方法之一</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ** 输入 :s/old/new/g 可以替换 old 为 new。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   练习：把thee替换为HEHE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---&gt; the best time to see thee flowers is in thee spring.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  要替换两行之间出现的每个匹配串，请输入 :#,#s/old/new/g (#,#代表的是</span></span><br><span class="line"><span class="string">  两行的行号)。输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">  第五讲第一节∶在 VIM 内执行外部命令的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ** 输入 :! 然后紧随著输入一个外部命令可以执行该外部命令。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    练习：</span></span><br><span class="line"><span class="string">      :!dir</span></span><br><span class="line"><span class="string">      :!ls </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">        第五讲第二节∶关于保存文件的更多信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      ** 要将对文件的改动保存到文件中，请输入 :w FILENAME 。**</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      练习：把当前文件另存为VIMTEST到家目录。并通过在VIM内执行外部命令删除它。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">      第五讲第三节∶一个具有选择性的保存命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      ** 要保存文件的部分内容，请输入 :#,# w FILENAME **</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">      练习：把当前文件的40-50行保存到家目录的VIMTEST，并且通过在VIM内执行外部部命令cat该文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">     第五讲第四节∶提取和合并文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     ** 要向当前文件中插入另外的文件的内容，请输入 :r FILENAME **</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     练习：把第五讲第三节的VIMTEST文件插入到该行的下一行,并删除VIMTEST。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    第六讲第一节∶打开类命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ** 输入 o 将在光标的下方打开新的一行并进入插入模式。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    练习：在下面的句子上/下一行前面插入“”Hello World！“”</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Open up a line above this by typing Shift-O while the cursor is on this line.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">   第六讲第二节∶光标后插入类命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       ** 输入 a 将可在光标之后插入文本。 **</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---&gt; This line will allow you to practice</span></span><br><span class="line"><span class="string">---&gt; This line will allow you to practice appending text to the end of a line.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">      第六讲第三节∶另外一个置换类命令的版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ** 输入大写的 R 可连续替换多个字符。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---&gt; To make the first line the same as the last on this page use the keys.</span></span><br><span class="line"><span class="string">---&gt; To make the first line the same as the second, type R and the new text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">      翻页操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Ctrl+f: 向下翻一屏</span></span><br><span class="line"><span class="string">   Ctrl+b: 向上翻一屏</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Ctrl+d: 向下翻半屏</span></span><br><span class="line"><span class="string">   Ctrl+u: 向上翻半屏</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   练习：通过翻页操作，把第100行、200行、300行复制到该行下面。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础练习</title>
      <link href="/2019/05/09/mysql/mysql-ji-chu-lian-xi/"/>
      <url>/2019/05/09/mysql/mysql-ji-chu-lian-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/v2-eb778ded7f5927497bd06fd9a6fe15e8_1200x500.jpg" alt="Mysql练习攻略"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录和退出数据库</span></span><br><span class="line">mysql -u root -p    <span class="comment">#输入密码 -P指定端口，-D指定数据库 ，--prompt 修改提示符</span></span><br><span class="line">exit      <span class="comment">#quit，\q</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have%'</span>;  <span class="comment">#查看存储引擎信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'storage_engine'</span>;  <span class="comment">#查看默认存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">WARNINGS</span> \G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库创建，删除，进入数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`testdatabase`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`testdatabase`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = <span class="string">'utf8'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> testdatabase <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = <span class="string">'utf8'</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`testdatabase`</span>;</span><br><span class="line"><span class="keyword">USE</span> testdatabase;   <span class="comment">#这里不应该使用 `XX` 括住名称</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;  <span class="comment">#注释符号</span></span><br><span class="line"><span class="keyword">help</span> <span class="string">'SELECT'</span>;</span><br><span class="line"><span class="keyword">help</span> <span class="string">'INT'</span>;</span><br><span class="line"><span class="keyword">help</span> <span class="string">'+'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#表的创建和删除，创建表同时设置属性</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> testestable(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> ZEROFILL PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>, <span class="comment">#检索效率 CHAR&gt;VARCHAR&gt;TEXT</span></span><br><span class="line">    age <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">brithday <span class="built_in">DATE</span>,  <span class="comment">#1000-01-01~9999-12-31 3个字节</span></span><br><span class="line">    sex <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0代表男,1代表女'</span>,</span><br><span class="line">address TINYTEXT,</span><br><span class="line">married ENUM(<span class="string">'是'</span>,<span class="string">'否'</span>,<span class="string">'保密'</span>),   <span class="comment">#最多65535个值</span></span><br><span class="line">    fav_food <span class="keyword">SET</span>(<span class="string">'apple'</span>,<span class="string">'orange'</span>,<span class="string">'fish'</span>,<span class="string">'meat'</span>,<span class="string">'cake'</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,   <span class="comment">#最多64个成员</span></span><br><span class="line">    score <span class="built_in">DECIMAL</span>(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CHECK</span>(score &gt; <span class="number">0</span>)</span><br><span class="line">    ) <span class="keyword">ENGINE</span> = <span class="string">'InnoDB'</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = <span class="string">'utf8'</span>;</span><br><span class="line"><span class="comment"># InnoDB(支持事务、崩溃修复、并发控制，适合频繁更新删除)</span></span><br><span class="line"><span class="comment"># MyISAM(适合对数据的存储和读取，空间使用比较低)、</span></span><br><span class="line"><span class="comment"># MEMORY(速度快、安全性差)</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> testestable \G;</span><br><span class="line">DESC testestable;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> testestable \G;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> testestable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#key键：</span></span><br><span class="line">  <span class="comment">#主键：唯一标识一条记录，不能有重复的，不允许为空,用来保证数据完整性</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test1(</span><br><span class="line">username <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(username)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#外键：外键是另一表的主键, 一个表可以有多个外键, 可以是空值,用来和其他表建立联系用的</span></span><br><span class="line">  <span class="comment">#外键连接必须连接的是主表的主键，如果连接主表主键的一部分，必须连接主键的第一个字段</span></span><br><span class="line">  <span class="comment">#外键关联的主从表字段数据类型必须完全一样</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test2(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">username <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">level</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">    <span class="comment">#CONSTRAINT uname FOREIGN KEY(username) REFERENCES test1(username)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表：</span></span><br><span class="line">    <span class="comment">#修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">RENAME</span> temp;</span><br><span class="line"><span class="keyword">SHOW</span>  <span class="keyword">TABLES</span>;</span><br><span class="line">DESC temp;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> temp <span class="keyword">RENAME</span> <span class="keyword">TO</span> test1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表属性数据类型</span></span><br><span class="line">DESC test1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">MODIFY</span> <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line">DESC test1;</span><br><span class="line"><span class="keyword">INSERT</span>  test1 <span class="keyword">VALUES</span>(<span class="string">'FreezeJ'</span>,<span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="comment">#ALTER TABLE test1 MODIFY username int;  #有值的情况下转换字段类型失败，因为字符串类型无法自动转型为整数类型</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">WARNINGS</span> <span class="keyword">LIMIT</span> <span class="number">1</span>;  <span class="comment">#查看第一条错误</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test1;  <span class="comment">#删除表中所有元素</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">MODIFY</span> username <span class="built_in">int</span>;</span><br><span class="line">DESC test1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">MODIFY</span> username <span class="built_in">CHAR</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改表属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">CHANGE</span> <span class="keyword">password</span> passwd <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加字段</span></span><br><span class="line">DESC test1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">ADD</span> sex <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">after</span> passwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">DROP</span> sex;  <span class="comment">#删除字段会直接删除，不管有没有内容，也不会要求确认</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#修改属性排列顺序</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">MODIFY</span> username <span class="built_in">CHAR</span>(<span class="number">10</span>) <span class="keyword">AFTER</span> passwd;  <span class="comment">#会修改username的类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">MODIFY</span> username <span class="built_in">CHAR</span>(<span class="number">10</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#索引：</span></span><br><span class="line">  <span class="comment">#创建带索引的数据库表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test3(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">age <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_id(<span class="keyword">id</span>)</span><br><span class="line">);    <span class="comment">#唯一索引，唯一索引指的是被索引的字段值唯一</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test3 \G;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在已存在表上添加索引</span></span><br><span class="line"><span class="comment">#create [unique|fulltext|spatial] index indexname on tablename (columnname [(length)] [ASC|DESC]);</span></span><br><span class="line">    <span class="comment">#Alter语句添加索引</span></span><br><span class="line">    <span class="comment">#Alter table tablename add [unique|fulltext|spatial] index indexname (columename [(length)] [ASC|DESC]);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_username <span class="keyword">ON</span> test1(username);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_passwd(passwd);</span><br><span class="line"><span class="comment">#查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> test1 \G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_username <span class="keyword">ON</span> test1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_passwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">num</span> <span class="built_in">INTEGER</span> <span class="keyword">UNSIGNED</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">age <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">address <span class="built_in">CHAR</span>(<span class="number">50</span>),</span><br><span class="line">room <span class="built_in">CHAR</span>(<span class="number">5</span>),</span><br><span class="line"><span class="keyword">class</span> <span class="built_in">TINYINT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'1代表女'</span>,</span><br><span class="line">teach_class <span class="built_in">TINYINT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'DRJ'</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'AAAA'</span>, <span class="string">'6-208'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'LYC'</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="string">'AAAA'</span>, <span class="string">'6-210'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'LZY'</span>, <span class="number">25</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="string">'BBBB'</span>, <span class="string">'6-208'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'WJX'</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'CCCC'</span>, <span class="string">'6-207'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">'YJH'</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'DDDD'</span>, <span class="string">'6-208'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">'WL'</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'CCCC'</span>, <span class="string">'6-208'</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'YYY'</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'QQQ'</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'WWW'</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'EEE'</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">'RRR'</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">MODIFY</span> sex <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">COMMENT</span> <span class="string">'0代表男'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新属性</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'ZXB'</span>, <span class="keyword">num</span> = <span class="number">27</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除属性</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'WL'</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">'WL'</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'CCCC'</span>, <span class="string">'6-208'</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用查询语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, address <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> room <span class="keyword">LIKE</span> <span class="string">'__208'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, room <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> room;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = (<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">AS</span> <span class="string">'宿舍成员'</span> <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> room;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> age <span class="keyword">AS</span> <span class="string">'年龄分布'</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student.name <span class="keyword">AS</span> <span class="string">'学生名字'</span>,student.class <span class="keyword">AS</span> <span class="string">'班级'</span>, teacher.name <span class="keyword">AS</span> <span class="string">'老师姓名'</span></span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">JOIN</span> teacher</span><br><span class="line"><span class="keyword">ON</span> student.class = teacher.teach_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">UNION</span>     <span class="comment">#UNION自动去重复，UNION ALL可以不去重复</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">#聚集函数</span></span><br><span class="line"><span class="comment">#AVG() - 返回平均值</span></span><br><span class="line"><span class="comment">#COUNT() - 返回行数</span></span><br><span class="line"><span class="comment">#FIRST() - 返回第一个记录的值</span></span><br><span class="line"><span class="comment">#LAST() - 返回最后一个记录的值</span></span><br><span class="line"><span class="comment">#MAX() - 返回最大值</span></span><br><span class="line"><span class="comment">#MIN() - 返回最小值</span></span><br><span class="line"><span class="comment">#SUM() - 返回总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">AS</span> <span class="string">'总人数'</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_room <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, room</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> room = <span class="string">'6-208'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span>  <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_room;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">7</span>,<span class="string">'WJZ'</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="string">'GGGG'</span>, <span class="string">'6-208'</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_room;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PEP8整理以及注意点</title>
      <link href="/2019/05/09/other/pep8-zheng-li-yi-ji-zhu-yi-dian/"/>
      <url>/2019/05/09/other/pep8-zheng-li-yi-ji-zhu-yi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="PEP8整理以及注意点"><a href="#PEP8整理以及注意点" class="headerlink" title="PEP8整理以及注意点"></a>PEP8整理以及注意点</h1><blockquote><p>使用PEP8要求代码风格，使代码更加统一整洁。</p></blockquote><h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>大写加下划线：</p><ul><li><p>USER_CONSTANT</p></li><li><p>PI</p></li><li><p>START_TIME</p></li></ul><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><p>小写和一个前导下划线：</p><ul><li><p>_private_value</p></li><li><p>_money</p></li><li><p>_rate</p></li></ul><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><p>小写，两个前导下划线和两个后置下划线：</p><ul><li><p>__class__</p></li><li><p>__name__</p></li><li><p>__doc__</p></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>小写和一个前导下划线：</p><ul><li><p>def _secrete(self):</p></li><li><p>def _print_name(self):</p></li><li><p>def _save_time(self):</p></li></ul><h4 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4><p>小写和两个前置下划线，两个后置下划线：</p><ul><li><p>def __add__(self):</p></li><li><p>def __init__(self):</p></li><li><p>def __del__(self):</p></li></ul><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>小写和下划线，缺省值等号两边没有空格:</p><ul><li><p>def connect(self, user=None):</p></li><li><p>def save_time(self, time_now=0) ——&gt;（注意，尽量不要把可变值设置为默认参数，即time_now=time.time()或者start_list=[]）</p></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类总是使用大驼峰命名格式，常见的一个方法是使用表示其类型或者特性的后缀</p><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p>可以使用一个Base或Abstract前缀：</p><ul><li>BaseCookie(object)</li><li>AbstractCookie(object)</li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>不带下划线的小写字母，若是实现协议的模块，通常使用lib后缀</p><ul><li><p>import os</p></li><li><p>import sys</p></li><li><p>import time</p></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ol><li><p>不要使用断言来实现静态类型检测</p></li><li><p>不要滥用*args和**kwargs</p></li></ol><p><strong>使用has或is前缀命名布尔元素</strong></p><ul><li><p>is_connect = True</p></li><li><p>has_member = False</p></li></ul><p><strong>使用复数形式命名序列</strong></p><ul><li>members = [‘user_1’,’user_2’]</li></ul><p><strong>避免通用名称和现有名称</strong></p><p>如：list、dict、sequence、element</p><p>还有os、sys、time等</p><h3 id="代码长度"><a href="#代码长度" class="headerlink" title="代码长度"></a>代码长度</h3><p>一个函数不要超过30行代码</p><p>一个类不要超过200行代码，不要超过10个方法</p><p>一个模块不要超过500行代码</p><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><p><strong>验证脚本是否符合pep8：</strong></p><p>可以安装一个 pep8 脚本用于验证你的代码风格是否符合 PEP8。</p><p>>&gt;easy_install pep8</p><p>>&gt;pep8 -r –ignoire E501 Test.py</p><p>这个命令行的意思是，重复打出错误，并且忽略 501 错误(代码超过 79 行)。</p><p><strong>yapf自动规范Python代码的脚本</strong></p><p><strong>pylint Python代码规范化分析工具</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YAML语法</title>
      <link href="/2019/05/09/other/yaml-yu-fa/"/>
      <url>/2019/05/09/other/yaml-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h1><blockquote><p>很多地方都会使用YAML作为配置文件，如filebeat配置、Ansible、Salt等，本文整理了YAML的部分语法，作为参考，方便查阅。</p><p>转自<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/07/yaml.html</a>，略有补充和修改。</p></blockquote><p>YAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p><p>YAML 还有一个小的怪癖. 所有的 YAML 文件(无论和 Ansible 有没有关系)开始行都应该是 <strong>—</strong>. 这是 YAML 格式的一部分, 表明一个文件的开始.</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p><strong>大小写敏感</strong></p></li><li><p>使用<strong>缩进</strong>表示层级关系</p></li><li><p>缩进时不允许使用Tab键，<strong>只允许使用空格</strong>。</p></li><li><p>缩进的空格数目不重要，只要相同层级的元素<strong>左侧对齐</strong>即可</p></li><li><p># 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>YAML 支持的数据结构有三种:</strong></p><p><strong>对象</strong>：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</p><p><strong>数组</strong>：一组按次序排列的值，又称为序列（sequence） / 列表（list）</p><p><strong>纯量</strong>（scalars）：单个的、不可再分的值</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>注意对象后面没有引号，有引号为字符串</p><p>animal : pets</p><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p><p>hash: { name: Steve, foo: bar } </p><p>字典也可以使用缩进形式来表示, 如果你喜欢这样的话:</p><p># 一位职工的记录</p><p>{name: Example Developer, job: Developer, skill: Elite}</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>一组连词线开头的行，构成一个数组。</p><p>- Cat</p><p>- Dog</p><p>- Goldfish</p><p>数组也可以采用行内表示法。</p><p>animal: [Cat, Dog]</p><h4 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Ruby</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Perl</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Python</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"><span class="attr">  YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line"><span class="attr">  Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line"><span class="attr">  Python:</span> <span class="string">python.org</span> </span><br><span class="line"><span class="attr">  Perl:</span> <span class="string">use.perl.org</span></span><br></pre></td></tr></table></figure><p><strong>对应：</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span> </span><br><span class="line"><span class="attr">  languages:</span> <span class="string">[</span> <span class="string">'Ruby'</span><span class="string">,</span> <span class="string">'Perl'</span><span class="string">,</span> <span class="string">'Python'</span> <span class="string">],</span></span><br><span class="line"><span class="attr">  websites:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">     YAML:</span> <span class="string">'yaml.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Ruby:</span> <span class="string">'ruby-lang.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Python:</span> <span class="string">'python.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Perl:</span> <span class="string">'use.perl.org'</span> </span><br><span class="line">     <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：左对齐的都是同一层级的，不是单独的。</strong></p><h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4><p>纯量是最基本的、不可再分的值。</p><p><strong>纯量包括：</strong></p><ul><li><p>字符串  </p></li><li><p>布尔值  isSet: true</p></li><li><p>整数 number: 12</p></li><li><p>浮点数 number: 12.30</p></li><li><p>Null  null用~表示：parent: ~ </p></li><li><p>时间  时间采用 ISO8601 格式：iso8601: 2001-12-14t21:59:43.10-05:00 </p></li><li><p>日期 日期采用复合 iso8601 格式的年、月、日表示：date: 1976-07-31</p></li></ul><p>YAML 允许使用<strong>两个感叹号</strong>，强制转换数据类型。</p><p>e: !!str 123</p><p>f: !!str true</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p><p>str: ‘labor’’s day’ </p><p>多行字符串可以使用 <strong>|</strong> 保留换行符，也可以使用 <strong>&gt;</strong> 折叠换行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><code>{ this: &#39;Foo\nBar\n&#39;, that: &#39;Foo Bar\n&#39; }</code></p><p>+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line">  <span class="string">Foo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line">  <span class="string">Foo</span></span><br></pre></td></tr></table></figure><p>结果：</p><p>{ s1: ‘Foo\n’, s2: ‘Foo\n\n\n’, s3: ‘Foo’ }</p><p><strong>&amp;</strong>用来建立锚点（defaults），<strong>&lt;&lt;</strong>表示合并到当前数据，<strong>*</strong>用来引用锚点。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_development</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span>  <span class="comment"># 这里使用default替换并插入</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_test</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span>     <span class="comment"># 这里使用default替换并插入</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell语法整理</title>
      <link href="/2019/05/09/linux/shell-yu-fa-zheng-li/"/>
      <url>/2019/05/09/linux/shell-yu-fa-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="shell语法整理"><a href="#shell语法整理" class="headerlink" title="shell语法整理"></a>shell语法整理</h1><blockquote><p>Shell语法有很多技巧和不同的使用方法，本文对常用的一些语法、技巧进行整理，便于查阅。</p></blockquote><h2 id="语法整理"><a href="#语法整理" class="headerlink" title="语法整理"></a>语法整理</h2><p><strong>路径操作</strong></p><ul><li>dirname：获取目录</li><li>basename：获取文件名</li><li>realpath：获取完整路径（对于不同系统，不一定有这个命令）</li></ul><p><strong>“”和’’与 `` 在shell变量中的区别</strong>（双引、单引、反引）:</p><ul><li>双引：允许通过$符引用其他变量</li><li>单引：禁止引用其他变量符，视为普通字符</li><li>反引：将命令执行的结果输出给变量</li></ul><h3 id="条件测试类型"><a href="#条件测试类型" class="headerlink" title="条件测试类型"></a>条件测试类型</h3><ul><li>整数测试</li><li>字符测试</li><li>文件测试</li></ul><p><strong>条件测试的表达式</strong></p><ul><li>[ expression ]  空格不能省略    命令测试法（一个中括号是bash的命令），有时候不好使。</li><li>[[ expression ]]                        关键字测试法（两个中括号是bash的关键字），推荐使用这种表达式。</li><li>test expression</li></ul><h4 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h4><ul><li>-eq: 测试两个整数是否相等；比如 $A -eq $B</li><li>-ne: 测试两个整数是否不等；不等，为真；相等，为假； not equal</li><li>-gt: 测试一个数是否大于另一个数；大于，为真；否则，为假；</li><li>-lt: 测试一个数是否小于另一个数；小于，为真；否则，为假；</li><li>-ge: 大于或等于</li><li>-le：小于或等于</li></ul><h4 id="字符测试"><a href="#字符测试" class="headerlink" title="字符测试"></a>字符测试</h4><ul><li>==：测试是否相等，相等为真，不等为假</li><li>!=: 测试是否不等，不等为真，等为假</li><li>=~: 测试包含关系，包含为真</li><li>> （在ASCII码表中的先后顺序，从左至右逐字比较）使用[[，在[中使用不靠谱</li><li>&lt;</li><li>-n string: 测试指定字符串是否为空，空则真，不空则假</li><li>-z string: 测试指定字符串是否不空，不空为真，空则为假</li></ul><h4 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h4><ul><li><p>-e FILE：测试文件是否存在</p></li><li><p>-f FILE: 测试文件是否为普通文件</p></li><li><p>-d FILE: 测试指定路径是否为目录</p></li><li><p>-r FILE: 测试当前用户对指定文件是否有读取权限；</p></li><li><p>-w 是否可写</p></li><li><p>-x  是否可执行</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ -e /etc/inittab ]  # 判断/etc/inittab是否存在</span><br><span class="line">[ -x /etc/rc.d/rc.sysinit ]    # 判断/etc/rc.d/rc.sysinit是否有执行权限</span><br><span class="line">[ ! -e /etc/inittab ] # 取反</span><br></pre></td></tr></table></figure><h4 id="组合调试条件"><a href="#组合调试条件" class="headerlink" title="组合调试条件"></a>组合调试条件</h4><ul><li>-a：与</li><li>-o：或</li><li>！：非</li></ul><p>如：<br><code>if [ $# -gt 1 -a $# -le 3 ]    # 参数个数大于1小于等于3</code><br>或者<br><code>if [ $# -gt 1 ] &amp;&amp; [ $# -le 3 ]</code></p><hr><p><strong>命令的间逻辑关系：短路与或</strong><br>短路与： &amp;&amp;</p><ul><li>第一个条件为假时，第二条件不用再判断，最终结果已经有；</li><li>第一个条件为真时，第二条件必须得判断；</li></ul><p>短路或： ||</p><ol><li>逻辑是从左到右全部判断</li><li>短路是能判断结果就停止</li></ol><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>A=3<br>B=6</p><ol><li>let 算术运算表达式<br><code>let C=$A+$B</code></li><li>$[算术运算表达式]<br><code>C=$[$A+$B]</code></li><li>$((算术运算表达式))<br><code>C=$(($A+$B))</code></li><li>expr 算术运算表达式，表达式中各操作数及运算符之间要有空格，而且要使用命令引用<br>C=`expr \$A + \$B` </li></ol><p>圆整：丢弃小数点后的内容，不是四舍五入</p><h3 id="bash变量的类型"><a href="#bash变量的类型" class="headerlink" title="bash变量的类型"></a>bash变量的类型</h3><ul><li>本地变量(局部变量)</li><li>环境变量</li><li>位置变量: <pre><code>$0：脚本名$1, $2, ...shift   踢掉第一个参数，第二个变成第一个，第三个变成第二个，以此类推shift x 表示踢掉几个</code></pre></li><li>特殊变量：<pre><code>$?：退出状态码$#：参数的个数$*：参数列表(如果使用引号括起来，对于&quot;$*&quot;来说，参数会合并到一起形成一份数据)$@：参数列表</code></pre></li></ul><h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if condition; then</span><br><span class="line">    statements</span><br><span class="line">elif condition; then</span><br><span class="line">    statements</span><br><span class="line">else</span><br><span class="line">    statements</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="case判断语句"><a href="#case判断语句" class="headerlink" title="case判断语句"></a>case判断语句</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $var in</span><br><span class="line">      pattern1)       </span><br><span class="line">          command</span><br><span class="line">          ;;</span><br><span class="line">      pattern2)</span><br><span class="line">          command</span><br><span class="line">          ;;            </span><br><span class="line">      *)</span><br><span class="line">          command</span><br><span class="line">          ;;</span><br><span class="line">esac </span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个分支使用两个分号结束，结尾以<span class="keyword">esac</span>结束</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>while循环和for循环属于“当型循环”，而until属于“直到型循环”。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>循环</span></span><br><span class="line">a=(a b c d e f)  # a为一个数组</span><br><span class="line">for x in $a; do</span><br><span class="line">    echo $x</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for x in &#123;1..9&#125;;do</span><br><span class="line">  echo $x</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for x in `seq 10`; do </span><br><span class="line">  echo $x; </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建选择菜单，无限循环</span></span><br><span class="line">select a in 1 2 3 4 5 6 7; do </span><br><span class="line">  echo you choice $a</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>循环</span></span><br><span class="line">while true; do</span><br><span class="line">    语句</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> until循环</span></span><br><span class="line">i=0  </span><br><span class="line">until [[ "$i" -gt 5 ]]    #直到大于5  </span><br><span class="line">do  </span><br><span class="line">    let "square=i*i"  </span><br><span class="line">    echo "$i * $i = $square"  </span><br><span class="line">    let "i++"  </span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">f=/home/config.ini</span><br><span class="line">while read -r b; do echo $b+'dada'; done &lt; "$f" #一行一行读取文件</span><br><span class="line">while read b; do echo $b+'dada'; done &lt; $f</span><br><span class="line">while read b; do echo "your input is $b"; done #读入键入的内容</span><br><span class="line">cat 1.txt |while read line; do echo $line; done #读取文件</span><br><span class="line">for x in `cat 1.txt`; do echo $x; done #按空格和回车读取文件</span><br><span class="line"></span><br><span class="line">yes | rm -i * # 自动回答y或者其他  比如yes good，自动回答good</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义一个函数的两种方式：</span></span><br><span class="line">function FUNCNAME &#123;</span><br><span class="line">  command</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FUNCNAME() &#123;</span><br><span class="line">  command</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用方式：</span></span><br><span class="line">FUNCNAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义执行状态返回值：</span></span><br><span class="line">return x # x的范围为0-255</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接受参数的函数：</span></span><br><span class="line">./a.sh m n </span><br><span class="line"><span class="meta">$</span><span class="bash">1: m</span></span><br><span class="line"><span class="meta">$</span><span class="bash">2: n</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#: 2</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><blockquote><p>参考<a href="https://www.cnblogs.com/gaochsh/p/6901809.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaochsh/p/6901809.html</a></p></blockquote><h2 id="技巧整理"><a href="#技巧整理" class="headerlink" title="技巧整理"></a>技巧整理</h2><p><strong>执行一个命令，但不保存在命令历史记录中</strong> <code>&lt;space&gt;command</code> <strong>使用空格开头不会记录历史</strong></p><p>hash  查看命令缓存   centos6还可以查看命令命中次数</p><p>sh -v install.sh #查看执行的代码</p><p>sh -n install.sh #语法检查，没有错误不显示内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2019/05/01/linux/linux-chang-yong-ming-ling/"/>
      <url>/2019/05/01/linux/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><blockquote><p>转自博客<a href="http://www.cnblogs.com/bindong/p/5789502.html" target="_blank" rel="noopener">http://www.cnblogs.com/bindong/p/5789502.html</a>，并做了部分补充、修改和整理，侵删。</p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Linux提供了大量的命令，利用它可以有效地完成大量的工作，如磁盘操作、文件存取、目录操作、进程管理、文件权限设定等。所以，在Linux系统上工作离不开使用系统提供的命令。要想真正理解Linux系统，就必须从Linux命令学起，通过基础的命令学习可以进一步理解Linux系统。</p><p>不同Linux发行版的命令数量不一样，但Linux发行版本最少的命令也有200多个。这里笔者把比较重要和使用频率最多的命令，按照它们在系统中的作用分成下面六个部分一一介绍。</p><ul><li><p>安装和登录命令：login、shutdown、halt、reboot、install、mount、umount、chsh、exit、last；</p></li><li><p>文件处理命令：file、mkdir、grep、dd、find、mv、ls、diff、cat、ln；</p></li><li><p>系统管理相关命令：df、top、free、at、lp、adduser、groupadd、kill、crontab；</p></li><li><p>网络操作命令：ifconfig、ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、 nslookup；</p></li><li><p>系统安全相关命令：passwd、su、umask、chgrp、chmod、chown、chattr、sudo ps、who；</p></li><li><p>其它命令：tar、unzip、gunzip、unarj、mtools、man、unendcode、uudecode。</p></li></ul><p>本文以Mandrake Linux 9.1(Kenrel 2.4.21)为例，介绍Linux下的安装和登录命令。</p><h2 id="安装与登陆命令"><a href="#安装与登陆命令" class="headerlink" title="安装与登陆命令"></a>安装与登陆命令</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>1.作用</p><p>login的作用是登录系统，它的使用权限是所有用户。</p><p>2.格式</p><p>login [name][－p ][－h 主机名称]</p><p>3.主要参数</p><p>－p:通知login保持现在的环境参数。</p><p>－h:用来向远程登录的之间传输用户名。</p><p>如果选择用命令行模式登录Linux的话，那么看到的第一个Linux命令就是login：。</p><p>一般界面是这样的：</p><p>Manddrake Linux release 9.1(Bamboo) for i586</p><p>renrel 2.4.21－0.13mdk on i686 / tty1</p><p>localhost login:root</p><p>password:</p><p>上面代码中，第一行是Linux发行版本号，第二行是内核版本号和登录的虚拟控制台，我们在第三行输入登录名，按“Enter”键在Password后输入账户密码，即可登录系统。出于安全考虑，输入账户密码时字符不会在屏幕上回显，光标也不移动。</p><p>登录后会看到下面这个界面（以超级用户为例）：</p><p>[root@localhost root]#</p><p>last login:Tue ,Nov 18 10:00:55 on vc/1</p><p>上面显示的是登录星期、月、日、时间和使用的虚拟控制台。</p><p>4.应用技巧</p><p>Linux是一个真正的多用户操作系统，可以同时接受多个用户登录，还允许一个用户进行多次登录。这是因为Linux和许多版本的Unix一样，提供了虚拟控制台的访问方式，允许用户在同一时间从控制台（系统的控制台是与系统直接相连的监视器和键盘）进行多次登录。每个虚拟控制台可以看作是一个独立的工作站，工作台之间可以切换。虚拟控制台的切换可以通过按下Alt键和一个功能键来实现，通常使用F1-F6 。</p><p>例如，用户登录后，按一下“Alt+F2”键，用户就可以看到上面出现的“login:”提示符，说明用户看到了第二个虚拟控制台。然后只需按“Alt+F1”键，就可以回到第一个虚拟控制台。一个新安装的Linux系统允许用户使用“Alt+F1”到“Alt+F6”键来访问前六个虚拟控制台。<strong>虚拟控制台最有用的是，当一个程序出错造成系统死锁时，可以切换到其它虚拟控制台工作，关闭这个程序。</strong></p><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>1.作用</p><p>shutdown命令的作用是关闭计算机，它的使用权限是超级用户。</p><p>2.格式</p><p>shutdown [－h][－i][－k][－m][－t]</p><p>3.重要参数</p><p>－t：在改变到其它运行级别之前，告诉init程序多久以后关机。</p><p>－k：并不真正关机，只是送警告信号给每位登录者。</p><p>－h：关机后关闭电源。</p><p>－c：cancel current process取消目前正在执行的关机程序。所以这个选项当然没有时间参数，但是可以输入一个用来解释的讯息，而这信息将会送到每位使用者。</p><p>－F：在重启计算机时强迫fsck。</p><p>－time：设定关机前的时间。</p><p>－m: 将系统改为单用户模式。</p><p>－i：关机时显示系统信息。</p><p>4.命令说明</p><p>shutdown</p><p>命令可以安全地将系统关机。<strong>有些用户会使用直接断掉电源的方式来关闭Linux系统，这是十分危险的。</strong>因为Linux与Windows不同，其后台运行着许多进程，所以强制关机可能会导致进程的数据丢失，使系统处于不稳定的状态，甚至在有的系统中会损坏硬件设备（硬盘）。在系统关机前使用shutdown命令，系统管理员会通知所有登录的用户系统将要关闭，并且login指令会被冻结，即新的用户不能再登录。</p><h3 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h3><p>1.作用</p><p>halt命令的作用是关闭系统，它的使用权限是超级用户。</p><p>2.格式</p><p>halt [－n] [－w] [－d] [－f] [－i] [－p]</p><p>3.主要参数说明</p><p>－n：防止sync系统调用，它用在用fsck修补根分区之后，以阻止内核用老版本的超级块覆盖修补过的超级块。</p><p>－w：并不是真正的重启或关机,只是写wtmp（/var/log/wtmp）纪录。</p><p>－f：强迫关机，不呼叫shutdown这个指令。没有调用shutdown，而强制关机或重启。</p><p>－i：关机（或重启）前，关掉所有的网络接口。</p><p>－p: 当关机的时候顺便做关闭电源的动作。</p><p>－d：关闭系统，但不留下纪录。　</p><p>4.命令说明</p><p>halt就是调用shutdown－h。halt执行时，杀死应用进程，执行<strong>sync</strong>(将存于buffer中的资料强制写入硬盘中)系统调用，文件系统写操作完成后就会停止内核。若系统的运行级别为0或6，则关闭系统；否则以shutdown指令（加上－h参数）来取代。　</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>1.作用</p><p>reboot命令的作用是重新启动计算机，它的使用权限是系统管理者。</p><p>2.格式</p><p>reboot [－n] [－w] [－d] [－f] [－i]</p><p>3.主要参数</p><p>－n: 在重开机前不做将记忆体资料写回硬盘的动作。</p><p>－w: 并不会真的重开机，只是把记录写到/var/log/wtmp文件里。(/var/log/wtmp是一个二进制文件，记录每个用户的登录次数和持续时间等信息，可以用last命令查看)</p><p>－d: 不把记录写到/var/log/wtmp文件里（－n这个参数包含了－d）。</p><p>－i: 在重开机之前先把所有与网络相关的装置停止。</p><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>1.作用</p><p>install命令的作用是安装或升级软件或备份数据，它的使用权限是所有用户。与cp命令类似，均可以将文件或目录拷贝到指定的路径；但是<strong>install命令可以控制目标文件的属性</strong>。</p><p>2.格式</p><p>(1)install [选项]… 来源 目的地</p><p>(2)install [选项]… 来源… 目录</p><p>(3)install －d [选项]… 目录…</p><p>在前两种格式中，会将复制至或将多个文件复制至已存在的，同时设定权限模式及所有者/所属组。在第三种格式中，会创建所有指定的目录及它们的主目录。长选项必须用的参数在使用短选项时也是必须的。</p><p>3.主要参数</p><p>–backup[=CONTROL]：为每个已存在的目的地文件进行备份。</p><p>－b：类似 –backup，但不接受任何参数。</p><p>－c：(此选项不作处理)。</p><p>－d，–directory：所有参数都作为目录处理，而且会创建指定目录的所有主目录。</p><p>－D：创建前的所有主目录，然后将复制至 ；在第一种使用格式中有用。</p><p>－g，–group=组：自行设定所属组，而不是进程目前的所属组。</p><p>－m，–mode=模式：自行设定权限模式 (像chmod)，而不是rwxr－xr－x。</p><p>－o，–owner=所有者：自行设定所有者 (只适用于超级用户)。</p><p>－p，–preserve－timestamps：以文件的访问/修改时间作为相应的目的地文件的时间属性。</p><p>－s，–strip：用strip命令删除symbol table，只适用于第一及第二种使用格式。</p><p>－S，–suffix=后缀：自行指定备份文件的。</p><p>－v，–verbose：处理每个文件/目录时印出名称。</p><p>–help：显示此帮助信息并离开。</p><p>–version：显示版本信息并离开。</p><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p>1.作用</p><p>mount命令的作用是加载文件系统，它的用权限是超级用户或/etc/fstab中允许的使用者。</p><p>2.格式</p><p>mount －a [－fv] [－t vfstype] [－n] [－rw] [－F] device dir</p><p>3.主要参数</p><p>－h：显示辅助信息。</p><p>－v：显示信息，通常和－f用来除错。</p><p>－a：将/etc/fstab中定义的所有文件系统挂上。</p><p>－F：这个命令通常和－a一起使用，它会为每一个mount的动作产生一个行程负责执行。在系统需要挂上大量NFS文件系统时可以加快加载的速度。</p><p>－f：通常用于除错。它会使mount不执行实际挂上的动作，而是模拟整个挂上的过程，通常会和－v一起使用。</p><p>－t vfstype：显示被加载文件系统的类型。</p><p>－n：一般而言，mount挂上后会在/etc/mtab中写入一笔资料，在系统中没有可写入文件系统的情况下，可以用这个选项取消这个动作。</p><p>4.应用技巧</p><p>在Linux和Unix系统上，所有文件都是作为一个大型树（以/为根）的一部分访问的。要访问CD-ROM上的文件，需要将CD-ROM设备挂装在文件树中的某个挂载点。如果发行版安装了自动挂装包，那么这个步骤可自动进行。在Linux中，如果要使用硬盘、光驱等储存设备，就得先将它加载，当储存设备挂上了之后，就可以把它当成一个目录来访问。挂上一个设备使用mount命令。在使用mount这个指令时，至少要先知道下列三种信息：要加载对象的文件系统类型、要加载对象的设备名称及要将设备加载到哪个目录下。</p><p>（1）Linux可以识别的文件系统</p><ul><li><p>Windows 95/98常用的FAT 32文件系统：vfat ；</p></li><li><p>Win NT/2000 的文件系统：ntfs ；</p></li><li><p>OS/2用的文件系统：hpfs；</p></li><li><p>Linux用的文件系统：ext2、ext3；</p></li><li><p>CD-ROM光盘用的文件系统：iso9660。</p></li></ul><p>虽然vfat是指FAT 32系统，但事实上它也兼容FAT 16的文件系统类型。</p><p>（2）确定设备的名称</p><p>在Linux中，设备名称通常都存在/dev里。这些设备名称的命名都是有规则的，可以用“推理”的方式把设备名称找出来。例如，/dev/hda1这个IDE设备，hd是Hard Disk(硬盘)的，sd是SCSI Device，fd是Floppy Device(或是FloppyDisk?)。a代表第一个设备，通常IDE接口可以接上4个IDE设备(比如4块硬盘)。所以要识别IDE硬盘的方法分别就是hda、hdb、hdc、hdd。hda1中的“1”代表hda的第一个硬盘分区(partition)，hda2代表hda的第二主分区，第一个逻辑分区从hda5开始，依此类推。此外，可以直接检查/var/log/messages文件，在该文件中可以找到计算机开机后系统已辨认出来的设备代号。</p><p>（3）查找挂接点</p><p>在决定将设备挂接之前，先要查看一下计算机是不是有个/mnt的空目录，该目录就是专门用来当作挂载点(Mount Point)的目录。建议在/mnt里建几个/mnt/cdrom、/mnt/floppy、/mnt/mo等目录，当作目录的专用挂载点。举例而言，如要挂载下列5个设备，其执行指令可能如下 (假设都是Linux的ext2系统，如果是Windows XX请将ext2改成vfat)：</p><p>软盘 ===&gt;mount －t ext2 /dev/fd0 /mnt/floppy</p><p>cdrom ===&gt;mount －t iso9660 /dev/hdc /mnt/cdrom</p><p>SCSI cdrom ===&gt;mount －t iso9660 /dev/sdb /mnt/scdrom</p><p>SCSI cdr ===&gt;mount －t iso9660 /dev/sdc /mnt/scdr</p><p>不过目前大多数较新的Linux发行版本（包括红旗 Linux、中软Linux、Mandrake Linux等）都可以自动挂装文件系统，但Red Hat Linux除外。</p><h3 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h3><p>1.作用</p><p>umount命令的作用是卸载一个文件系统，它的使用权限是超级用户或/etc/fstab中允许的使用者。</p><p>2.格式</p><p>unmount －a [－fFnrsvw] [－t vfstype] [－n] [－rw] [－F] device dir</p><p>3.使用说明</p><p>umount</p><p>命令是mount命令的逆操作，它的参数和使用方法和mount命令是一样的。Linux挂装CD-ROM后，会锁定CD—ROM，这样就不能用CD-ROM面板上的Eject按钮弹出它。但是，当不再需要光盘时，如果已将/cdrom作为符号链接，请使用umount/cdrom来卸装它。仅当无用户正在使用光盘时，该命令才会成功。该命令包括了将带有当前工作目录当作该光盘中的目录的终端窗口。</p><h3 id="chsh"><a href="#chsh" class="headerlink" title="chsh"></a>chsh</h3><p>1.作用</p><p>chsh命令的作用是更改使用者shell设定，它的使用权限是所有使用者。</p><p>2.格式</p><p>chsh [ －s ] [ －list] [ –help ] [ －v ] [ username ]</p><p>3.主要参数</p><p>－l：显示系统所有Shell类型。</p><p>－v：显示Shell版本号。</p><p>4.应用技巧</p><p>前面介绍了Linux下有多种Shell，一般缺省的是Bash，如果想更换Shell类型可以使用chsh命令。先输入账户密码，然后输入新Shell类型，如果操作正确系统会显示“Shell change”。其界面一般如下：</p><p>Changing fihanging shell for cao</p><p>Password:</p><p>New shell [/bin/bash]: /bin/tcsh</p><p>上面代码中，[ ]内是目前使用的Shell。普通用户只能修改自己的Shell，超级用户可以修改全体用户的Shell。要想查询系统提供哪些Shell，可以使用chsh -l 命令。</p><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>1.作用</p><p>exit命令的作用是退出系统，它的使用权限是所有用户。</p><p>2.格式</p><p>exit</p><p>3.参数</p><p>exit命令没有参数，运行后退出系统进入登录界面。</p><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>1.作用</p><p>last命令的作用是显示近期用户或终端的登录情况，它的使用权限是所有用户。通过last命令查看该程序的log，管理员可以获知谁曾经或企图连接系统。</p><p>2.格式</p><p>last [-n] [－f file] [－t tty]  [-h 节点] [－i IP][-1][－y][ID]</p><p>3.主要参数</p><p>－n：指定输出记录的条数。</p><p>－f file：指定用文件file作为查询用的log文件。</p><p>－t tty：只显示指定的虚拟控制台上登录情况。</p><p>－h 节点：只显示指定的节点上的登录情况。</p><p>－i IP：只显示指定的IP上登录的情况。</p><p>－1：用IP来显示远端地址。</p><p>－y：显示记录的年、月、日。</p><p>－ID：知道查询的用户名。</p><p>－x:显示系统关闭、用户登录和退出的历史。</p><p>动手练习</p><p>上面介绍了Linux安装和登录命令，下面介绍几个实例，动手练习一下刚才讲过的命令。</p><p>1.一次运行多个命令</p><p>在一个命令行中可以执行多个命令，用分号将各个命令隔开即可，例如：</p><p>＃last －x；halt</p><p>上面代码表示在显示系统关闭、用户登录和退出的历史后关闭计算机。</p><p>2.利用mount挂装文件系统访问Windows系统</p><p>许多Linux发行版本现在都可以自动加载Vfat分区来访问Windows系统，而Red Hat各个版本都没有自动加载Vfat分区，因此还需要进行手工操作。</p><p>mount可以将Windows分区作为Linux的一个“文件”挂接到Linux的一个空文件夹下，从而将Windows的分区和/mnt这个目录联系起来。因此，只要访问这个文件夹就相当于访问该分区了。首先要在/mnt下建立winc文件夹，在命令提示符下输入下面命令：</p><p>＃mount -t vfat /dev/hda1 /mnt/winc</p><p>即表示将Windows的C分区挂到Liunx的/mnt/winc目录下。这时，在/mnt/winc目录下就可以看到Windows中C盘的内容了。使用类似的方法可以访问Windows系统的D、E盘。在Linux系统显示Windows的分区一般顺序这样的：hda1为C盘、hda5为D盘、hda6为E盘……以此类推。上述方法可以查看Windows系统有一个很大的问题，就是Windows中的所有中文文件名或文件夹名全部显示为问号“？”，而英文却可以正常显示。我们可以通过加入一些参数让它显示中文。还以上面的操作为例，此时输入命令：</p><p>＃mount -t vfat -o iocharset=cp936 /dev/hda1 /mnt/winc</p><p>现在它就可以正常显示中文了。</p><p>3.使用mount加挂闪盘上的文件系统</p><p>在Linux下使用闪盘非常简单。Linux对USB设备有很好的支持，当插入闪盘后，闪盘被识别为一个SCSI盘，通常输入以下命令：</p><p>＃ mount /dev/sda1 /usb</p><p>就能够加挂闪盘上的文件系统。</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>Linux命令与Shell</p><p>所谓Shell，就是命令解释程序，它提供了程序设计接口，可以使用程序来编程。学习Shell对于Linux初学者理解Linux系统是非常重要的。</p><p>Linux系统的Shell作为操作系统的外壳，为用户提供了使用操作系统的接口。Shell是命令语言、命令解释程序及程序设计语言的统称，是用户和Linux内核之间的接口程序。如果把Linux内核想象成一个球体的中心，Shell就是围绕内核的外层。当从Shell或其它程序向Linux传递命令时，内核会做出相应的反应。Shell在Linux系统的作用和MS DOS下的COMMAND.COM和Windows 95/98 的explorer.exe相似。Shell虽然不是系统核心的一部分，只是系统核心的一个外延，但它能够调用系统内核的大部分功能。因此，可以说Shell是Unux/Linux最重要的实用程序。</p><p>Linux中的Shell有多种类型，其中最常用的是Bourne Shell(sh)、C Shell(csh)和Korn Shell(ksh)。大多数Linux发行版本缺省的Shell是Bourne Again Shell，它是Bourne Shell的扩展，简称bash，与Bourne Shell完全向后兼容，并且在Bourne Shell的基础上增加了很多特性。bash放在/bin/bash中，可以提供如命令补全、命令编辑和命令历史表等功能。它还包含了很多C Shell和Korn Shell中的优点，有灵活和强大的编程接口，同时又有很友好的用户界面。Linux系统中200多个命令中有40个是bash的内部命令，主要包括exit、less、lp、kill、 cd、pwd、fc、fg等。</p><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><p>Linux系统信息存放在文件里，文件与普通的公务文件类似。每个文件都有自己的名字、内容、存放地址及其它一些管理信息，如文件的用户、文件的大小等。文件可以是一封信、一个通讯录，或者是程序的源语句、程序的数据，甚至可以包括可执行的程序和其它非正文内容。</p><p>Linux文件系统具有良好的结构，系统提供了很多文件处理程序。这里主要介绍常用的文件处理命令。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>1.作用 file通过探测文件内容判断文件类型，使用权限是所有用户。</p><p>2.格式</p><p>file [options] 文件名</p><p>3.[options]主要参数</p><p>-v：在标准输出后显示版本信息，并且退出。</p><p>-z：探测压缩过的文件类型。</p><p>-L：允许符合连接。</p><p>-f name：从文件namefile中读取要分析的文件名列表。</p><p>4.简单说明</p><p>使用file命令可以知道某个文件究竟是二进制（ELF格式）的可执行文件, 还是Shell Script文件，或者是其它的什么格式。file能识别的文件类型有目录、Shell脚本、英文文本、二进制可执行文件、C语言源文件、文本文件、DOS的可执行文件。</p><p>5.应用实例</p><p>如果我们看到一个没有后缀的文件grap，可以使用下面命令：</p><p>$ file grap</p><p>grap： English text</p><p>此时系统显示这是一个英文文本文件。需要说明的是，file命令不能探测包括图形、音频、视频等多媒体文件类型。</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>1.作用</p><p>mkdir命令的作用是建立名称为dirname的子目录，与MS DOS下的md命令类似，它的使用权限是所有用户。</p><p>2.格式</p><p>mkdir [options] 目录名</p><p>3.[options]主要参数</p><p>－m, –mode=模式：设定权限，与chmod类似。</p><p>－p, –parents：需要时创建上层目录；如果目录早已存在，则不当作错误。</p><p>－v, –verbose：每次创建新目录都显示信息。</p><p>－-version：显示版本信息后离开。</p><p>4.应用实例</p><p>在进行目录创建时可以设置目录的权限，此时使用的参数是“－m”。假设要创建的目录名是“tsk”，让所有用户都有rwx(即读、写、执行的权限)，那么可以使用以下命令：</p><p>$ mkdir －m 777 tsk</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>1.作用</p><p>grep命令可以指定文件中搜索特定的内容，并将含有这些内容的行标准输出。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><p>2.格式</p><p>grep [options]</p><p>3.主要参数</p><p>[options]主要参数：</p><p>－c：只输出匹配行的计数。</p><p>－i：不区分大小写（只适用于单字符）。</p><p>－h：查询多文件时不显示文件名。</p><p>－l：查询多文件时只输出包含匹配字符的文件名。</p><p>－n：显示匹配行及行号。</p><p>－s：不显示不存在或无匹配文本的错误信息。</p><p>－v：显示不包含匹配文本的所有行。</p><p>pattern正则表达式主要参数：</p><p>/：忽略正则表达式中特殊字符的原有含义。</p><p>^：匹配正则表达式的开始行。</p><p>$: 匹配正则表达式的结束行。</p><p>/：到匹配正则表达式的行结束。</p><p>[ ]：单个字符，如[A]即A符合要求 。</p><p>[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</p><p>。：所有的单个字符。</p><p>* ：有字符，长度可以为0。</p><p>正则表达式是Linux/Unix系统中非常重要的概念。正则表达式（也称为“regex”或“regexp”）是一个可以描述一类字符串的模式（Pattern）。如果一个字符串可以用某个正则表达式来描述，我们就说这个字符和该正则表达式匹配（Match）。这和DOS中用户可以使用通配符“*”代表任意字符类似。在Linux系统上，正则表达式通常被用来查找文本的模式，以及对文本执行“搜索－替换”操作和其它功能。</p><p>4.应用实例</p><p>查询DNS服务是日常工作之一，这意味着要维护覆盖不同网络的大量IP地址。有时IP地址会超过2000个。如果要查看nnn.nnn网络地址，但是却忘了第二部分中的其余部分，只知到有两个句点，例如nnn nn..。要抽取其中所有nnn.nnn IP地址，使用[0－9 ]/{3/}/.[0－0/{3/}/。含义是任意数字出现3次，后跟句点，接着是任意数字出现3次，后跟句点。</p><p>$grep ‘[0－9 ]/{3 /}/.[0－0/{3/}/‘ ipfile</p><p>补充说明，grep家族还包括fgrep和egrep。fgrep是fix grep，允许查找字符串而不是一个模式；egrep是扩展grep，支持基本及扩展的正则表达式，但不支持/q模式范围的应用及与之相对应的一些更加规范的模式。</p><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p>1.作用</p><p>dd命令用来复制文件，并根据参数将数据转换和格式化。</p><p>2.格式</p><p>dd [options]</p><p>3.[opitions]主要参数</p><p>bs=字节：强迫 ibs=及obs=。</p><p>cbs=字节：每次转换指定的。</p><p>conv=关键字：根据以逗号分隔的关键字表示的方式来转换文件。</p><p>count=块数目：只复制指定的输入数据。</p><p>ibs=字节：每次读取指定的。</p><p>if=文件：读取内容，而非标准输入的数据。</p><p>obs=字节：每次写入指定的。</p><p>of=文件：将数据写入，而不在标准输出显示。</p><p>seek=块数目：先略过以obs为单位的指定的输出数据。</p><p>skip=块数目：先略过以ibs为单位的指定的输入数据。</p><p>4.应用实例</p><p>dd命令常常用来制作Linux启动盘。先找一个可引导内核，令它的根设备指向正确的根分区，然后使用dd命令将其写入软盘：</p><p>$ rdev vmlinuz /dev/hda</p><p>$dd if＝vmlinuz of＝/dev/fd0</p><p>上面代码说明，使用rdev命令将可引导内核vmlinuz中的根设备指向/dev/hda，请把“hda”换成自己的根分区，接下来用dd命令将该内核写入软盘。</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>1.作用</p><p>find命令的作用是在目录中搜索文件，它的使用权限是所有用户。</p><p>2.格式</p><p>find [path][options][expression]</p><p>path指定目录路径，系统从这里开始沿着目录树向下查找文件。它是一个路径列表，相互用空格分离，如果不写path，那么默认为当前目录。</p><p>3.主要参数</p><p>[options]参数：</p><p>－depth：使用深度级别的查找过程方式，在某层指定目录中优先查找文件内容。</p><p>－maxdepth levels：表示至多查找到开始目录的第level层子目录。level是一个非负数，如果level是0的话表示仅在当前目录中查找。</p><p>－mindepth levels：表示至少查找到开始目录的第level层子目录。</p><p>－mount：不在其它文件系统（如Msdos、Vfat等）的目录和文件中查找。</p><p>－version：打印版本。</p><p>[expression]是匹配表达式，是find命令接受的表达式，find命令的所有操作都是针对表达式的。它的参数非常多，这里只介绍一些常用的参数。</p><p> –name：支持统配符*和?。</p><p>－atime n：搜索在过去n天读取过的文件。</p><p>－ctime n：搜索在过去n天修改过的文件。</p><p>－group grpoupname：搜索所有组为grpoupname的文件。</p><p>－user 用户名：搜索所有文件属主为用户名（ID或名称）的文件。</p><p>－size n：搜索文件大小是n个block的文件。</p><p>－print：输出搜索结果，并且打印。</p><p>4.应用技巧</p><p>find命令查找文件的几种方法：</p><p>（1）根据文件名查找</p><p>例如，我们想要查找一个文件名是lilo.conf的文件，可以使用如下命令：</p><p>find / －name lilo.conf</p><p>find命令后的“/”表示搜索整个硬盘。</p><p>（2）快速查找文件</p><p>根据文件名查找文件会遇到一个实际问题，就是要花费相当长的一段时间，特别是大型Linux文件系统和大容量硬盘文件放在很深的子目录中时。如果我们知道了这个文件存放在某个目录中，那么只要在这个目录中往下寻找就能节省很多时间。比如smb.conf文件，从它的文件后缀“.conf”可以判断这是一个配</p><p>置文件，那么它应该在/etc目录内，此时可以使用下面命令：</p><p>find /etc －name smb.conf</p><p>这样，使用“快速查找文件”方式可以缩短时间。</p><p>（3）根据部分文件名查找方法</p><p>有时我们知道只某个文件包含有abvd这4个字，那么要查找系统中所有包含有这4个字符的文件可以输入下面命令：</p><p>find / －name ‘*abvd*‘</p><p>输入这个命令以后，Linux系统会将在/目录中查找所有的包含有abvd这4个字符的文件（其中*是通配符），比如abvdrmyz等符合条件的文件都能显示出来。</p><p>(4) 使用混合查找方式查找文件</p><p>find命令可以使用混合查找的方法，例如，我们想在/etc目录中查找大于500000字节，并且在24小时内修改的某个文件，则可以使用-and (与)把两个查找参数链接起来组合成一个混合的查找方式。</p><p>find /etc -size +500000c -and -mtime +1</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>1.作用</p><p>mv命令用来为文件或目录改名，或者将文件由一个目录移入另一个目录中，它的使用权限是所有用户。该命令如同DOS命令中的ren和move的组合。</p><p>2.格式</p><p>mv[options] 源文件或目录 目标文件或目录</p><p>3.[options]主要参数</p><p>－i：交互方式操作。如果mv操作将导致对已存在的目标文件的覆盖，此时系统询问是否重写，要求用户回答“y”或“n”，这样可以避免误覆盖文件。</p><p>－f：禁止交互操作。mv操作要覆盖某个已有的目标文件时不给任何指示，指定此参数后i参数将不再起作用。</p><p>4.应用实例</p><p>（1）将/usr/cbu中的所有文件移到当前目录（用“.”表示）中：</p><p>$ mv /usr/cbu/* .</p><p>（2）将文件cjh.txt重命名为wjz.txt：</p><p>$ mv cjh.txt wjz.txt　</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>1.作用</p><p>ls命令用于显示目录内容，类似DOS下的dir命令，它的使用权限是所有用户。</p><p>2.格式</p><p>ls [options][filename]</p><p>3.options主要参数</p><p>－a, –all：不隐藏任何以“.” 字符开始的项目。</p><p>－A, –almost－all：列出除了“ . ”及 “.. ”以外的任何项目。</p><p> –author：印出每个文件著作者。</p><p>－b, –escape：以八进制溢出序列表示不可打印的字符。</p><p> –block－size=大小：块以指定的字节为单位。</p><p>－B, –ignore－backups：不列出任何以 ~ 字符结束的项目。</p><p>－f：不进行排序，－aU参数生效，－lst参数失效。</p><p>－F, –classify：加上文件类型的指示符号 (*/=@| 其中一个)。</p><p>－g：like －l, but do not list owner。</p><p>－G, –no－group：inhibit display of group information。</p><p>－i, –inode：列出每个文件的inode号。</p><p>－I, –ignore=样式：不印出任何符合Shell万用字符的项目。</p><p>－k：即–block－size=1K。</p><p>－l：使用较长格式列出信息。</p><p>－L, –dereference：当显示符号链接的文件信息时，显示符号链接所指示的对象，而并非符号链接本身的信息。</p><p>－m：所有项目以逗号分隔，并填满整行行宽。</p><p>－n, –numeric－uid－gid：类似－l，但列出UID及GID号。</p><p>－N, –literal：列出未经处理的项目名称，例如不特别处理控制字符。</p><p>－p, –file－type：加上文件类型的指示符号 (/=@| 其中一个)。</p><p>－Q, –quote－name：将项目名称括上双引号。</p><p>－r, –reverse：依相反次序排列。</p><p>－R, –recursive：同时列出所有子目录层。</p><p>－s, –size：以块大小为序。</p><p>  - h, –human-readable: 设置大小可读性</p><p>4.应用举例</p><p>ls</p><p>命令是Linux系统使用频率最多的命令，它的参数也是Linux命令中最多的。使用ls命令时会有几种不同的颜色，其中蓝色表示是目录，绿色表示是可执行文件，红色表示是压缩文件，浅蓝色表示是链接文件，加粗的黑色表示符号链接，灰色表示是其它格式文件。ls最常使用的是ls- l，文件类型开头是由10个字符构成的字符串。其中第一个字符表示文件类型，它可以是下述类型之一：－（普通文件）、d（目录）、l（符号链接）、b（块设备文件）、c（字符设备文件）。后面的9个字符表示文件的访问权限，分为3组，每组3位。第一组表示文件属主的权限，第二组表示同组用户的权限，第三组表示其他用户的权限。每一组的三个字符分别表示对文件的读（r）、写（w）和执行权限（x）。对于目录，表示进入权限。s表示当文件被执行时，把该文件的UID或GID赋予执行进程的UID（用户ID）或GID（组ID）。t表示设置标志位（留在内存，不被换出）。如果该文件是目录，那么在该目录中的文件只能被超级用户、目录拥有者或文件属主删除。如果它是可执行文件，那么在该文件执行后，指向其正文段的指针仍留在内存。这样再次执行它时，系统就能更快地装入该文件。接着显示的是文件大小、生成时间、文件或命令名称。</p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>1.作用</p><p>diff命令用于两个文件之间的比较，并指出两者的不同，它的使用权限是所有用户。</p><p>2.格式</p><p>diff [options] 源文件 目标文件</p><p>3.[options]主要参数</p><p>-a：将所有文件当作文本文件来处理。</p><p>-b：忽略空格造成的不同。</p><p>-B：忽略空行造成的不同。</p><p>-c：使用纲要输出格式。</p><p>-H：利用试探法加速对大文件的搜索。</p><p>-I：忽略大小写的变化。</p><p>-n –rcs：输出RCS格式。</p><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>1.作用</p><p>cmp（“compare”的缩写）命令用来简要指出两个文件是否存在差异，它的使用权限是所有用户。</p><p>2.格式</p><p>cmp[options] 文件名</p><p>3.[options]主要参数</p><p>-l: 将字节以十进制的方式输出，并方便将两个文件中不同的以八进制的方式输出。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>1.作用</p><p>cat（“concatenate”的缩写）命令用于连接并显示指定的一个和多个文件的有关信息，它的使用权限是所有用户。</p><p>2.格式</p><p>cat [options] 文件1 文件2……</p><p>3.[options]主要参数</p><p>－n：由第一行开始对所有输出的行数编号。</p><p>－b：和－n相似，只不过对于空白行不编号。</p><p>－s：当遇到有连续两行以上的空白行时，就代换为一行的空白行。</p><p>4.应用举例</p><p>（1）cat命令一个最简单的用处是显示文本文件的内容。例如，我们想在命令行看一下README文件的内容，可以使用命令：</p><p>$ cat README　</p><p>（2）有时需要将几个文件处理成一个文件，并将这种处理的结果保存到一个单独的输出文件。cat命令在其输入上接受一个或多个文件，并将它们作为一个单独的文件打印到它的输出。例如，把README和INSTALL的文件内容加上行号（空白行不加）之后，将内容附加到一个新文本文件File1 中：</p><p>$ cat README INSTALL File1</p><p>（3）cat还有一个重要的功能就是可以对行进行编号，见图2所示。这种功能对于程序文档的编制，以及法律和科学文档的编制很方便，打印在左边的行号使得参考文档的某一部分变得容易，这些在编程、科学研究、业务报告甚至是立法工作中都是非常重要的。</p><p>对行进行编号功能有-b（只能对非空白行进行编号）和-n（可以对所有行进行编号）两个参数：</p><p>$ cat -b /etc/named.conf</p><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>1.作用</p><p>ln命令用来在文件之间创建链接，它的使用权限是所有用户。</p><p>2.格式</p><p>ln [options] 源文件 [链接名]</p><p>3.参数</p><p>－f：链结时先将源文件删除。</p><p>－d：允许系统管理者硬链结自己的目录。</p><p>－s：进行软链结(Symbolic Link)。</p><p>－b：将在链结时会被覆盖或删除的文件进行备份。</p><p>链接有两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。硬连接指通过索引节点来进行的连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件才会被真正删除。与硬连接相对应，Lnux系统中还存在另一种连接，称为符号连接（Symbilc Link），也叫软连接。软链接文件有点类似于Windows的快捷方式。它实际上是特殊文件的一种。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><p>动手练习</p><p>上面我们介绍了Linux文件处理命令，下面介绍几个实例，大家可以动手练习一下刚才讲过的命令。</p><p>1.利用符号链接快速访问关键目录</p><p>符号链接是一个非常实用的功能。假设有一些目录或文件需要频繁使用，但由于Linux的文件和目录结构等原因，这个文件或目录在很深的子目录中。比如，Apache Web服务器文档位于系统的/usr/local/httpd/htdocs中，并且不想每次都要从主目录进入这样一个长的路径之中(实际上，这个路径也非常不容易记忆)。</p><p>为了能方便地进入Web服务器(/usr/local/httpd/htdocs)文档所在的目录，在主目录下可以使用以下命令：</p><p>$ ln -s /usr/local/httpd/htdocs gg</p><p>这样每次进入gg目录就可访问Web服务器的文档，以后如果不再访问Web服务器的文档时，删除gg即可，而真正的Web服务器的文档并没有删除。</p><p>2.使用dd命令将init.rd格式的root.ram内容导入内存</p><p>dd if=/dev/fd0 of=floppy.fd</p><p>dd if=root.ram of=/dev/ram0 #</p><p>3.grep命令系统调用</p><p>grep是Linux/Unix中使用最广泛的命令之一，许多Linux系统内部都可以调用它。</p><p>(1)如果要查询目录列表中的目录，方法如下：</p><p>$ ls -l | grep ‘∧d’</p><p>(2)如果在一个目录中查询不包含目录的所有文件，方法如下：</p><p>$ ls -l | grep ‘∧[∧d]’</p><p>(3)用find命令调用grep，如所有C源代码中的“Chinput”，方法如下：</p><p>$find /ZhXwin -name *.c -exec grep -q -s Chinput {} /;-print</p><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><p>Linux必学的系统管理命令</p><p>对于Linux系统来说，无论是中央处理器、内存、磁盘驱动器、键盘、鼠标，还是用户等都是文件，Linux系统管理的命令是它正常运行的核心。熟悉了Linux常用的文件处理命令以后，这一讲介绍对系统和用户进行管理的命令。</p><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>1.作用</p><p>df命令用来检查文件系统的磁盘空间占用情况，使用权限是所有用户。</p><p>2.格式</p><p>df [options]</p><p>3.主要参数</p><p>－s：对每个Names参数只给出占用的数据块总数。</p><p>－a：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定－s，也不指定－a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。</p><p>－k：以1024字节为单位列出磁盘空间使用情况。</p><p>－x：跳过在不同文件系统上的目录不予统计。</p><p>－l：计算所有的文件大小，对硬链接文件则计算多次。</p><p>－i：显示inode信息而非块使用量。</p><p>－h：以容易理解的格式印出文件系统大小，例如136KB、254MB、21GB。</p><p>－P：使用POSIX输出格式。</p><p>－T：显示文件系统类型。</p><p>4.说明</p><p>df命令被广泛地用来生成文件系统的使用统计数据，它能显示系统中所有的文件系统的信息，包括总容量、可用的空闲空间、目前的安装点等。</p><p>超级权限用户使用df命令时会发现这样的情况：某个分区的容量超过了100％。这是因为Linux系统为超级用户保留了10％的空间，由其单独支配。也就是说，对于超级用户而言，他所见到的硬盘容量将是110％。这样的安排对于系统管理而言是有好处的，当硬盘被使用的容量接近100％时系统管理员还可以正常工作。</p><p>5.应用实例</p><p>Linux支持的文件系统非常多，包括JFS、ReiserFS、ext、ext2、ext3、ISO9660、XFS、Minx、vfat、MSDOS等。使用df -T命令查看磁盘空间时还可以得到文件系统的信息：</p><p>＃df －T</p><p>文件系统 类型 容量 已用 可用 已用% 挂载点</p><p>/dev/hda7 reiserfs 5.2G 1.6G 3.7G 30% /</p><p>/dev/hda1 vfat 2.4G 1.6G 827M 66% /windows/C</p><p>/dev/hda5 vfat 3.0G 1.7G 1.3G 57% /windows/D</p><p>/dev/hda9 vfat 3.0G 2.4G 566M 82% /windows/E</p><p>/dev/hda10 NTFS 3.2G 573M 2.6G 18% /windows/F</p><p>/dev/hda11 vfat 1.6G 1.5G 23M 99% /windows/G</p><p>从上面除了可以看到磁盘空间的容量、使用情况外，分区的文件系统类型、挂载点等信息也一览无遗。</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>1.作用</p><p>top命令用来显示执行中的程序进程，使用权限是所有用户。</p><p>2.格式</p><p>top [－] [d delay] [q] [c] [S] [s] [n]</p><p>3.主要参数</p><p>d：指定更新的间隔，以秒计算。</p><p>q：没有任何延迟的更新。如果使用者有超级用户，则top命令将会以最高的优先序执行。</p><p>c：显示进程完整的路径与名称。</p><p>S：累积模式，会将己完成或消失的子行程的CPU时间累积起来。</p><p>s：安全模式。</p><p>i：不显示任何闲置(Idle)或无用(Zombie)的行程。</p><p>n：显示更新的次数，完成后将会退出top。</p><p>4.说明</p><p>top命令是Linux系统管理的一个主要命令，通过它可以获得许多信息。第一行表示的项目依次为当前时间、系统启动时间、当前系统登录用户数目、平均负载。第二行显示的是所有启动的进程、目前运行的、挂起(Sleeping)的和无用(Zombie)的进程。第三行显示的是目前CPU的使用情况，包括系统占用的比例、用户使用比例、闲置(Idle)比例。第四行显示物理内存的使用情况，包括总的可以使用的内存、已用内存、空闲内存、缓冲区占用的内存。第五行显示交换分区使用情况，包括总的交换分区、使用的、空闲的和用于高速缓存的大小。第六行显示的项目最多，下面列出了详细解释。</p><p>PID（Process ID）：进程标示号。</p><p>USER：进程所有者的用户名。</p><p>PR：进程的优先级别。</p><p>NI：进程的优先级别数值。</p><p>VIRT：进程占用的虚拟内存值。</p><p>RES：进程占用的物理内存值。</p><p>SHR：进程使用的共享内存值。</p><p>S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数。</p><p>%CPU：该进程占用的CPU使用率。</p><p>%MEM：该进程占用的物理内存和总内存的百分比。</p><p>TIME＋：该进程启动后占用的总的CPU时间。</p><p>Command：进程启动的启动命令名称，如果这一行显示不下，进程会有一个完整的命令行。</p><p>top命令使用过程中，还可以使用一些交互的命令来完成其它参数的功能。这些命令是通过快捷键启动的。</p><p>：立刻刷新。</p><p>P：根据CPU使用大小进行排序。</p><p>T：根据时间、累计时间排序。</p><p>q：退出top命令。</p><p>m：切换显示内存信息。</p><p>t：切换显示进程和CPU状态信息。</p><p>c：切换显示命令名称和完整命令行。</p><p>M：根据使用内存大小进行排序。</p><p>W：将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</p><p>可以看到，top命令是一个功能十分强大的监控系统的工具，对于系统管理员而言尤其重要。但是，它的缺点是会消耗很多系统资源。</p><p>5.应用实例</p><p>使用top命令可以监视指定用户，缺省情况是监视所有用户的进程。如果想查看指定用户的情况，在终端中按“U”键，然后输入用户名，系统就会切换为指定用户的进程运行界面。</p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>1.作用</p><p>free命令用来显示内存的使用情况，使用权限是所有用户。</p><p>2.格式</p><p>free [－b|－k|－m] [－o] [－s delay] [－t] [－V]</p><p>3.主要参数</p><p>－b －k －m：分别以字节（KB、MB）为单位显示内存使用情况。</p><p>－s delay：显示每隔多少秒数来显示一次内存使用情况。</p><p>－t：显示内存总和列。</p><p>－o：不显示缓冲区调节列。</p><p>4.应用实例</p><p>free命令是用来查看内存使用情况的主要命令。和top命令相比，它的优点是使用简单，并且只占用很少的系统资源。通过－S参数可以使用free命令不间断地监视有多少内存在使用，这样可以把它当作一个方便实时监控器。</p><p>＃free －b －s5</p><p>使用这个命令后终端会连续不断地报告内存使用情况（以字节为单位），每5秒更新一次。</p><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p>1.作用</p><p>at命令用来在指定时刻执行指定的命令序列。</p><p>2.格式</p><p>at [－V] [－q x] [－f file] [－m] time</p><p>3.主要参数</p><p>－V：显示标准错误输出。</p><p>－q：许多队列输出。</p><p>－f：从文件中读取作业。</p><p>－m：执行完作业后发送电子邮件到用户。</p><p>time：设定作业执行的时间。time格式有严格的要求，由小时、分钟、日期和时间的偏移量组成，其中日期的格式为MM.DD.YY，MM是分钟，DD是日期，YY是指年份。偏移量的格式为时间＋偏移量，单位是minutes、hours和days。</p><p>4.应用实例</p><p>＃at －f data 15:30 +2 days</p><p>上面命令表示让系统在两天后的17：30执行文件data中指明的作业。</p><h3 id="lp"><a href="#lp" class="headerlink" title="lp"></a>lp</h3><p>1.作用</p><p>lp是打印文件的命令，使用权限是所有用户。</p><p>2.格式</p><p>lp [－c][－d][－m][－number][－title][-p]</p><p>3.主要参数</p><p>－c：先拷贝文件再打印。</p><p>－d：打印队列文件。</p><p>－m：打印结束后发送电子邮件到用户。</p><p>－number：打印份数。</p><p>－title：打印标题。</p><p>－p：设定打印的优先级别，最高为100。</p><p>4.应用实例</p><p>（1）使用lp命令打印多个文件</p><p>＃lp 2 3 4</p><p>request id is 11 (3 file(s))</p><p>其中2、3、4分别是文件名；“request id is 11 (3 file(s)) ”表示这是第11个打印命令，依次打印这三个文件。</p><p>（2）设定打印优先级别</p><p>＃lp lp -d LaserJet -p 90 /etc/aliases</p><p>通过添加“-p 90”，规定了打印作业的优先级为90。它将在优先级低于90的打印作业之前打印，包括没有设置优先级的作业，缺省优先级是50</p><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>1.作用</p><p>useradd命令用来建立用户帐号和创建用户的起始目录，使用权限是超级用户。</p><p>2.格式</p><p>useradd [－d home] [－s shell] [－c comment] [－m [－k template]] [－f inactive] [－e expire ] [－p passwd] [－r] name</p><p>3.主要参数</p><p>－c：加上备注文字，备注文字保存在passwd的备注栏中。　</p><p>－d：指定用户登入时的启始目录。</p><p>－D：变更预设值。</p><p>－e：指定账号的有效期限，缺省表示永久有效。</p><p>－f：指定在密码过期后多少天即关闭该账号。</p><p>－g：指定用户所属的群组。</p><p>－G：指定用户所属的附加群组。</p><p>－m：自动建立用户的登入目录。</p><p>－M：不要自动建立用户的登入目录。</p><p>－n：取消建立以用户名称为名的群组。</p><p>－r：建立系统账号。</p><p>－s：指定用户登入后所使用的shell。</p><p>－u：指定用户ID号。</p><p>4.说明</p><p>useradd可用来建立用户账号，它和adduser命令是相同的。账号建好之后，再用passwd设定账号的密码。使用useradd命令所建立的账号，实际上是保存在/etc/passwd文本文件中。</p><p>5.应用实例</p><p>建立一个新用户账户，并设置ID：</p><p>＃useradd caojh －u 544</p><p>需要说明的是，设定ID值时尽量要大于500，以免冲突。因为Linux安装后会建立一些特殊用户，一般0到499之间的值留给bin、mail这样的系统账号。</p><h3 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h3><p>1.作用</p><p>groupadd命令用于将新组加入系统。</p><p>2.格式</p><p>groupadd [－g gid] [－o]] [－r] [－f] groupname</p><p>3.主要参数</p><p>－g gid：指定组ID号。</p><p>－o：允许组ID号，不必惟一。</p><p>－r：加入组ID号，低于499系统账号。</p><p>－f：加入已经有的组时，发展程序退出。</p><p>4.应用实例</p><p>建立一个新组，并设置组ID加入系统：</p><p>＃groupadd －g 344 cjh</p><p>此时在/etc/passwd文件中产生一个组ID（GID）是344的项目。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>1.作用</p><p>kill命令用来中止一个进程。</p><p>2.格式</p><p>kill [ －s signal | －p ] [ －a ] pid …</p><p>kill －l [ signal ]</p><p>3.参数</p><p>－s：指定发送的信号。</p><p>－p：模拟发送信号。</p><p>－l：指定信号的名称列表。</p><p>pid：要中止进程的ID号。</p><p>Signal：表示信号。</p><p>4.说明</p><p>进程是Linux系统中一个非常重要的概念。Linux是一个多任务的操作系统，系统上经常同时运行着多个进程。我们不关心这些进程究竟是如何分配的，或者是内核如何管理分配时间片的，所关心的是如何去控制这些进程，让它们能够很好地为用户服务。</p><p>Linux操作系统包括三种不同类型的进程，每种进程都有自己的特点和属性。交互进程是由一个Shell启动的进程。交互进程既可以在前台运行，也可以在后台运行。</p><p>批处理进程和终端没有联系，是一个进程序列。监控进程（也称系统守护进程）时Linux系统启动时启动的进程，并在后台运行。例如，httpd是著名的Apache服务器的监控进程。</p><p>kill命令的工作原理是，向Linux系统的内核发送一个系统操作信号</p><p>和某个程序的进程标识号，然后系统内核就可以对进程标识号指定的进程进行操作。比如在top命令中，我们看到系统运行许多进程，有时就需要使用kill中止某些进程来提高系统资源。在讲解安装和登陆命令时，曾提到系统多个虚拟控制台的作用是当一个程序出错造成系统死锁时，可以切换到其它虚拟控制台工作关闭这个程序。此时使用的命令就是kill，因为kill是大多数Shell内部命令可以直接调用的。</p><p>5.应用实例</p><p>（1）强行中止（经常使用杀掉）一个进程标识号为324的进程：</p><p>＃kill －9 324</p><p>（2）解除Linux系统的死锁</p><p>在Linux中有时会发生这样一种情况：一个程序崩溃，并且处于死锁的状态。此时一般不用重新启动计算机，只需要中止(或者说是关闭)这个有问题的程序即可。当kill处于X-Window界面时，主要的程序(除了崩溃的程序之外)一般都已经正常启动了。此时打开一个终端，在那里中止有问题的程序。比如，如果Mozilla浏览器程序出现了锁死的情况，可以使用kill命令来中止所有包含有Mozolla浏览器的程序。首先用top命令查处该程序的PID，然后使用kill命令停止这个程序：</p><p>＃kill －SIGKILL XXX</p><p>其中，XXX是包含有Mozolla浏览器的程序的进程标识号。</p><p>（3）使用命令回收内存</p><p>我们知道内存对于系统是非常重要的，回收内存可以提高系统资源。kill命令可以及时地中止一些“越轨”的程序或很长时间没有响应的程序。例如，使用top命令发现一个无用 (Zombie) 的进程，此时可以使用下面命令：</p><p>＃kill －9 XXX</p><p>其中，XXX是无用的进程标识号。</p><p>然后使用下面命令：</p><p>＃free</p><p>此时会发现可用内存容量增加了。</p><p>（4）killall命令</p><p>Linux下还提供了一个killall命令，可以直接使用进程的名字而不是进程标识号，例如：</p><p>＃ killall -HUP inetd</p><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>1.作用</p><p>使用crontab命令可以修改crontab配置文件，然后该配置由cron公用程序在适当的时间执行，该命令使用权限是所有用户。</p><p>2.格式</p><p>crontab [ －u user ] 文件</p><p>crontab [ －u user ] { －l | －r | －e }</p><p>3.主要参数</p><p>－e：执行文字编辑器来设定时程表，内定的文字编辑器是vi。</p><p>－r：删除目前的时程表。</p><p>－l：列出目前的时程表。</p><p>crontab文件的格式为“M H D m d cmd”。其中，M代表分钟（0～59），H代表小时（0～23），D代表天（1～31），m代表月（1～12），d代表一星期内的天（0～6，0为星期天）。cmd表示要运行的程序，它被送入sh执行，<strong>这个Shell只有USER、HOME、SHELL三个环境变量</strong>，所以指令需要使用绝对路径。查看crontab执行日志可以查看/var/log/cron文件。</p><p>4.说明</p><p>和at命令相比，crontab命令适合完成固定周期的任务。</p><p>5.应用实例</p><p>设置一个定时、定期的系统提示：</p><p>[cao @www cao]#crontab －e</p><p>此时系统会打开一个vi编辑器。</p><p>如果输入以下内容：35 17 <em> </em> 5 wall “Tomorrow is Saturday I will go CS”，然后存盘退出。这时在/var/spool/cron/目录下会生产一个cao的文件，内容如下：</p><p># DO NOT EDIT THIS FILE － edit the master and reinstall.</p><p># (/tmp/crontab.2707 installed on Thu Jan 1 22:01:51 2004)</p><p># (Cron version – $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</p><p>35 17 <em> </em> 5 wall “Tomorrow is Saturday I will play CS “</p><p>这样每个星期五17：35系统就会弹出一个终端，提醒星期六可以打打CS了！</p><p>动手练习</p><p>1.联合使用kill和top命令观察系统性能的变化</p><p>首先启动一个终端运行top命令，然后再启动一个终端使用kill命令。</p><p>这时利用上面介绍的kill命令来中止一些程序：</p><p>＃kill SIGKILL XXX</p><p>然后再看top命令终端的变化，包括内存容量、CPU使用率、系统负载等。注意，有些进程是不能中止的，不过学习Linux命令时可以试试，看看系统有什么反应。</p><p>2.使用at和halt命令定时关机</p><p>首先设定关机时间是17:35，输入下面代码：</p><p>＃at 17:35</p><p>warning: commands will be executed using (in order) a) $SHELL b) login shell c) /bin/sh</p><p>at&gt;halt `-i －p</p><p>at&gt;</p><p>job 6 at 2004－01－01 17:35</p><p>此时实际上就已经进入Linux系统的Shell，并且编写一个最简单程序：halt －i－p。上面Shell中的文本结束符号表示按“Ctrl＋D”组合键关闭命令，提交任务退出Shell。“Job 6 at 2004－01－01 17:35”表示系统接受第6个at命令，在“2004－01－01 17:35”时执行命令：先把所有网络相关的装置停止，关闭系统后关闭电源。</p><p>3.用crontab命令实现每天定时的病毒扫描</p><p>前面已经介绍了一个简单的crontab命令操作，这里看一些更重要的操作。</p><p>（1）建立一个文件，文件名称自己设定，假设为caoproject：</p><p>＃crontab －e</p><p>（2）文件内容如下：</p><p>05 09 <em> </em> * antivir</p><p>用vi编辑后存盘退出。antivir是一个查杀Linux病毒的软件，当然需要时先安装在系统中。</p><p>（3）使用crontab命令添加到任务列表中：</p><p>＃crontab caoproject</p><p>这样系统内所有用户在每天的9点05分会自动进行病毒扫描。</p><p>4.用kill使修改的配置文件马上生效</p><p>Windows用户一般都知道，重要配置文件修改后往往都要重新启动计算机才能使修改生效。而Linux由于采用了模块化设计，可以自己根据需要实时设定服务。这里以网络服务inetd为例介绍一些操作技巧。</p><h3 id="inetd"><a href="#inetd" class="headerlink" title="inetd"></a>inetd</h3><p>是一个监听守护进程，监听与提供互联网服务进程（如rlogin、telnet、ftp、rsh）进行连接的要求，并扩展所需的服务进程。默认情况下，</p><p>inetd监听的这些daemon均列于/etc</p><p>/inetd.conf文件中。编辑/etc/inetd.conf文件，可以改变inetd启动服务器守护进程的选项，然后驱使inetd以</p><p>SIGHUP（signal 1）向当前的inetd进程发送信号，使inetd重读该文件。这一过程由kill命令来实现。</p><p>用vi或其它编辑器修改inetd.conf后，首先使用下面命令：</p><p>＃ps -ef |grep inetd</p><p>上面代码表明查询inetd.conf的进程号(PID)，这里假设是1426，然后使用下面命令：</p><p>＃ kill -1426 inetd</p><p>这样配置文件就生效了。</p><p>这一讲介绍的系统管理命令都是比较重要的，特别是crontab命令和quota命令使用起来会有一定难度，需要多做一些练习。另外，使用kill命令要注意“－9“这个参数，练习时最好不要运行一些重要的程序。</p><h2 id="网络操作命令"><a href="#网络操作命令" class="headerlink" title="网络操作命令"></a>网络操作命令</h2><p>因为Linux系统是在Internet上起源和发展的，它与生俱来拥有强大的网络功能和丰富的网络应用软件，尤其是TCP/IP网络协议的实现尤为成熟。</p><p>Linux的网络命令比较多，其中一些命令像ping、ftp、telnet、route、netstat等在其它操作系统上也能看到，但也有一些Unix/Linux系统独有的命令，如ifconfig、finger、mail等。Linux网络操作命令的一个特点是，命令参数选项和功能很多，一个命令往往还可以实现其它命令的功能。</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>1.作用</p><p>ifconfig用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。</p><p>2.格式</p><p>ifconfig -interface [options] address</p><p>3.主要参数</p><p>-interface：指定的网络接口名，如eth0和eth1。</p><p>up：激活指定的网络接口卡。</p><p>down：关闭指定的网络接口。</p><p>broadcast address：设置接口的广播地址。</p><p>pointopoint：启用点对点方式。</p><p>address：设置指定接口设备的IP地址。</p><p>netmask address：设置接口的子网掩码。</p><p>4.应用说明</p><p>ifconfig是用来设置和配置网卡的命令行工具。为了手工配置网络，这是一个必须掌握的命令。使用该命令的好处是无须重新启动机器。要赋给eth0接口IP地址207.164.186.2，并且马上激活它，使用下面命令：</p><p>#ifconfig eth0 210.34.6.89 netmask 255.255.255.128 broadcast 210.34.6.127</p><p>该命令的作用是设置网卡eth0的IP地址、网络掩码和网络的本地广播地址。若运行不带任何参数的ifconfig命令，这个命令将显示机器所有激活接口的</p><p>信息。带有“-a”参数的命令则显示所有接口的信息，包括没有激活的接口。注意，用ifconfig命令配置的网络设备参数，机器重新启动以后将会丢失。</p><p>如果要暂停某个网络接口的工作，可以使用down参数：</p><p>#ifconfig eth0 down</p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>1.作用</p><p>ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户。几乎所有的Linux发行版本都支持该命令。</p><p>2.格式</p><p>ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]</p><p>3.主要参数</p><p>OPTIONS是修改ip行为或改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。目前，ip支持如表1所示选项。</p><p>OBJECT是要管理者获取信息的对象。目前ip认识的对象见表2所示。</p><p>表1 ip支持的选项</p><p>-V,-Version 打印ip的版本并退出。</p><p>-s,-stats,-statistics 输出更为详尽的信息。如果这个选项出现两次或多次，则输出的信息将更为详尽。</p><p>-f,-family 这个选项后面接协议种类，包括inet、inet6或link，强调使用的协议种类。如果没有足够的信息告诉ip使用的协议种类，ip就会使用默认值inet或any。link比较特殊，它表示不涉及任何网络协议。</p><p>-4 是-family inet的简写。</p><p>-6 是-family inet6的简写。</p><p>-0 是-family link的简写。</p><p>-o,-oneline 对每行记录都使用单行输出，回行用字符代替。如果需要使用wc、grep等工具处理ip的输出，则会用到这个选项。</p><p>-r,-resolve 查询域名解析系统，用获得的主机名代替主机IP地址</p><p>COMMAND</p><p>设置针对指定对象执行的操作，它和对象的类型有关。一般情况下，ip支持对象的增加(add)、删除(delete)和展示(show或list)。有些对象不支持这些操作，或者有其它的一些命令。对于所有的对象，用户可以使用help命令获得帮助。这个命令会列出这个对象支持的命令和参数的语法。如果没有指定对象的操作命令，ip会使用默认的命令。一般情况下，默认命令是list，如果对象不能列出，就会执行help命令。</p><p>ARGUMENTS</p><p>是命令的一些参数，它们倚赖于对象和命令。ip支持两种类型的参数：flag和parameter。flag由一个关键词组成；parameter由一个关键词加一个数值组成。为了方便，每个命令都有一个可以忽略的默认参数。例如，参数dev是ip link命令的默认参数，因此ip link ls eth0等于ip link ls dev eth0。我们将在后面的详细介绍每个命令的使用，命令的默认参数将使用default标出。</p><p>4.应用实例</p><p>添加IP地址192.168.2.2/24到eth0网卡上：</p><p>#ip addr add 192.168.1.1/24 dev eth0</p><p>丢弃源地址属于192.168.2.0/24网络的所有数据报：</p><p>#ip rule add from 192.168.2.0/24 prio 32777 reject</p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>1.作用</p><p>ping检测主机网络接口状态，使用权限是所有用户。</p><p>2.格式</p><p>ping [-dfnqrRv][-c][-i][-I][-l][-p][-s][-t] IP地址</p><p>3.主要参数</p><p>-d：使用Socket的SO_DEBUG功能。</p><p>-c：设置完成要求回应的次数。</p><p>-f：极限检测。</p><p>-i：指定收发信息的间隔秒数。</p><p>-I：网络界面使用指定的网络界面送出数据包。</p><p>-l：前置载入，设置在送出要求信息之前，先行发出的数据包。</p><p>-n：只输出数值。</p><p>-p：设置填满数据包的范本样式。</p><p>-q：不显示指令执行过程，开头和结尾的相关信息除外。</p><p>-r：忽略普通的Routing Table，直接将数据包送到远端主机上。</p><p>-R：记录路由过程。</p><p>-s：设置数据包的大小。</p><p>-t：设置存活数值TTL的大小。</p><p>-v：详细显示指令的执行过程。</p><p>ping命令是使用最多的网络指令，通常我们使用它检测网络是否连通，它使用ICMP协议。但是有时会有这样的情况，我们可以浏览器查看一个网页，但是却无法ping通，这是因为一些网站处于安全考虑安装了防火墙。另外，也可以在自己计算机上试一试，通过下面的方法使系统对ping没有反应：</p><p># echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>1.作用</p><p>检查整个Linux网络状态。</p><p>2.格式</p><p>netstat [-acCeFghilMnNoprstuvVwx][-A][–ip]</p><p>3.主要参数</p><p>-a–all：显示所有连线中的Socket。</p><p>-A：列出该网络类型连线中的IP相关地址和网络类型。</p><p>-c–continuous：持续列出网络状态。</p><p>-C–cache：显示路由器配置的快取信息。</p><p>-e–extend：显示网络其它相关信息。</p><p>-F–fib：显示FIB。</p><p>-g–groups：显示多重广播功能群组组员名单。</p><p>-h–help：在线帮助。</p><p>-i–interfaces：显示网络界面信息表单。</p><p>-l–listening：显示监控中的服务器的Socket。</p><p>-M–masquerade：显示伪装的网络连线。</p><p>-n–numeric：直接使用IP地址，而不通过域名服务器。</p><p>-N–netlink–symbolic：显示网络硬件外围设备的符号连接名称。</p><p>-o–timers：显示计时器。</p><p>-p–programs：显示正在使用Socket的程序识别码和程序名称。</p><p>-r–route：显示Routing Table。</p><p>-s–statistice：显示网络工作信息统计表。</p><p>-t–tcp：显示TCP传输协议的连线状况。</p><p>-u–udp：显示UDP传输协议的连线状况。</p><p>-v–verbose：显示指令执行过程。</p><p>-V–version：显示版本信息。</p><p>-w–raw：显示RAW传输协议的连线状况。</p><p>-x–unix：和指定“-A unix”参数相同。</p><p>–ip–inet：和指定“-A inet”参数相同。</p><p>4.应用实例</p><p>netstat主要用于Linux察看自身的网络状况，如开启的端口、在为哪些用户服务，以及服务的状态等。此外，它还显示系统路由表、网络接口状态等。可以说，它是一个综合性的网络状态的察看工具。在默认情况下，netstat只显示已建立连接的端口。如果要显示处于监听状态的所有端口，使用-a参数即可：</p><p>#netstat -a</p><p>Active Internet connections (only servers)</p><p>Proto Recv-Q Send-Q Local Address Foreign Address State</p><p>tcp 0 0 <em>:32768 </em>:* LISTEN</p><p>tcp 0 0 <em>:32769 </em>:* LISTEN</p><p>tcp 0 0 <em>:nfs </em>:* LISTEN</p><p>tcp 0 0 <em>:32770 </em>:* LISTEN</p><p>tcp 0 0 <em>:868 </em>:* LISTEN</p><p>tcp 0 0 <em>:617 </em>:* LISTEN</p><p>tcp 0 0 <em>:mysql </em>:* LISTEN</p><p>tcp 0 0 <em>:netbios-ssn </em>:* LISTEN</p><p>tcp 0 0 <em>:sunrpc </em>:* LISTEN</p><p>tcp 0 0 <em>:10000 </em>:* LISTEN</p><p>tcp 0 0 <em>:http </em>:* LISTEN</p><p>……</p><p>上面显示出，这台主机同时提供HTTP、FTP、NFS、MySQL等服务。</p><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>1.作用</p><p>telnet表示开启终端机阶段作业，并登入远端主机。telnet是一个Linux命令，同时也是一个协议（远程登陆协议）。</p><p>2.格式</p><p>telnet [-8acdEfFKLrx][-b][-e][-k][-l][-n][-S][-X][主机名称IP地址]</p><p>3.主要参数</p><p>-8：允许使用8位字符资料，包括输入与输出。</p><p>-a：尝试自动登入远端系统。</p><p>-b：使用别名指定远端主机名称。</p><p>-c：不读取用户专属目录里的.telnetrc文件。</p><p>-d：启动排错模式。</p><p>-e：设置脱离字符。</p><p>-E：滤除脱离字符。</p><p>-f：此参数的效果和指定“-F”参数相同。</p><p>-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。</p><p>-k：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。</p><p>-K：不自动登入远端主机。</p><p>-l：指定要登入远端主机的用户名称。</p><p>-L：允许输出8位字符资料。</p><p>-n：指定文件记录相关信息。</p><p>-r：使用类似rlogin指令的用户界面。</p><p>-S：服务类型，设置telnet连线所需的IP TOS信息。</p><p>-x：假设主机有支持数据加密的功能，就使用它。</p><p>-X：关闭指定的认证形态。</p><p>4.应用说明</p><p>用户使用telnet命令可以进行远程登录，并在远程计算机之间进行通信。用户通过网络在远程计算机上登录，就像登录到本地机上执行命令一样。为了通过telnet登录到远程计算机上，必须知道远程机上的合法用户名和口令。虽然有些系统确实为远程用户提供登录功能，但出于对安全的考虑，要限制来宾的操作权限，因此，这种情况下能使用的功能是很少的。</p><p>telnet只为普通终端提供终端仿真，而不支持X-Window等图形环境。当允许远程用户登录时，系统通常把这些用户放在一个受限制的Shell中，以防系统被怀有恶意的或不小心的用户破坏。用户还可以使用telnet从远程站点登录到自己的计算机上，检查电子邮件、编辑文件和运行程序，就像在本地登录一样。</p><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><p>1.作用</p><p>ftp命令进行远程文件传输。FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身，所以ftp既是协议又是一个命令。</p><p>2.格式</p><p>ftp [-dignv][主机名称IP地址]</p><p>3.主要参数</p><p>-d：详细显示指令执行过程，便于排错分析程序执行的情形。</p><p>-i：关闭互动模式，不询问任何问题。</p><p>-g：关闭本地主机文件名称支持特殊字符的扩充特性。</p><p>-n：不使用自动登陆。</p><p>-v：显示指令执行过程。</p><p>4.应用说明</p><p>ftp命令是标准的文件传输协议的用户接口，是在TCP/IP网络计算机之间传输文件简单有效的方法，它允许用户传输ASCⅡ文件和二进制文件。为了使用ftp来传输文件，用户必须知道远程计算机上的合法用户名和口令。这个用户名/口令的组合用来确认ftp会话，并用来确定用户对要传输的文件进行什么样的访问。</p><p>另外，用户需要知道对其进行ftp会话的计算机名字的IP地址。用户可以通过使用ftp客户程序，连接到另一台计算机上；可以在目录中上下移动、列出目录内容；可以把文件从远程计算机机拷贝到本地机上；还可以把文件从本地机传输到远程系统中。ftp内部命令有72个，下面列出主要几个内部命令：</p><p>ls：列出远程机的当前目录。</p><p>cd：在远程机上改变工作目录。</p><p>lcd：在本地机上改变工作目录。</p><p>close：终止当前的ftp会话。</p><p>hash：每次传输完数据缓冲区中的数据后就显示一个#号。</p><p>get（mget）：从远程机传送指定文件到本地机。</p><p>put（mput）：从本地机传送指定文件到远程机。</p><p>quit：断开与远程机的连接，并退出ftp。</p><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><p>1.作用</p><p>route表示手工产生、修改和查看路由表。</p><p>2.格式</p><p># route [-add][-net|-host] targetaddress [-netmask Nm][dev]If]</p><p># route [－delete][-net|-host] targetaddress [gw Gw] [-netmask Nm] [dev]If]</p><p>3.主要参数</p><p>-add：增加路由。</p><p>-delete：删除路由。</p><p>-net：路由到达的是一个网络，而不是一台主机。</p><p>-host：路由到达的是一台主机。</p><p>-netmask Nm：指定路由的子网掩码。</p><p>gw：指定路由的网关。</p><p>[dev]If：强迫路由链指定接口。</p><p>4.应用实例</p><p>route命令是用来查看和设置Linux系统的路由信息，以实现与其它网络的通信。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。</p><p>在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。使用下面命令可以增加一个默认路由：</p><p>route add 0.0.0.0 192.168.1.1</p><h3 id="rlogin"><a href="#rlogin" class="headerlink" title="rlogin"></a>rlogin</h3><p>1.作用</p><p>rlogin用来进行远程注册。</p><p>2.格式</p><p>rlogin [ -8EKLdx ] [ -e char ] [-k realm ] [ - l username ] host</p><p>3.主要参数</p><p>-8：此选项始终允许8位输入数据通道。该选项允许发送格式化的ANSI字符和其它的特殊代码。如果不用这个选项，除非远端的不是终止和启动字符，否则就去掉奇偶校验位。</p><p>-E：停止把任何字符当作转义字符。当和-8选项一起使用时，它提供一个完全的透明连接。</p><p>-K：关闭所有的Kerberos确认。只有与使用Kerberos 确认协议的主机连接时才使用这个选项。</p><p>-L：允许rlogin会话在litout模式中运行。要了解更多信息，请查阅tty联机帮助。</p><p>-d：打开与远程主机进行通信的TCP sockets的socket调试。要了解更多信息，请查阅setsockopt的联机帮助。</p><p>-e：为rlogin会话设置转义字符，默认的转义字符是“～”。</p><p>-k：请求rlogin获得在指定区域内远程主机的Kerberos许可，而不是获得由krb_realmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。</p><p>-x：为所有通过rlogin会话传送的数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。</p><p>4.使用说明</p><p>如果在网络中的不同系统上都有账号，或者可以访问别人在另一个系统上的账号，那么要访问别的系统中的账号，首先就要注册到系统中，接着通过网络远程注册到账号所在的系统中。rlogin可以远程注册到别的系统中，它的参数应是一个系统名。</p><h3 id="rcp"><a href="#rcp" class="headerlink" title="rcp"></a>rcp</h3><p>1.作用</p><p>rcp代表远程文件拷贝，用于计算机之间文件拷贝，使用权限是所有用户。</p><p>2.格式</p><p>rcp [-px] [-k realm] file1 file2 rcp [-px] [-r] [-k realm] file</p><p>3.主要参数</p><p>-r：递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录。</p><p>-p：试图保留源文件的修改时间和模式，忽略umask。</p><p>-k：请求rcp获得在指定区域内的远程主机的Kerberos许可，而不是获得由krb_relmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。</p><p>-x：为传送的所有数据打开DES加密。</p><h3 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h3><p>1.作用</p><p>finger用来查询一台主机上的登录账号的信息，通常会显示用户名、主目录、停滞时间、登录时间、登录Shell等信息，使用权限为所有用户。</p><p>2.格式</p><p>finger [选项] [使用者] [用户@主机]</p><p>3.主要参数</p><p>-s：显示用户注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。</p><p>-l：除了用-s选项显示的信息外，还显示用户主目录、登录Shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。</p><p>-p：除了不显示.plan文件和.project文件以外，与-l选项相同。</p><p>4.应用实例</p><p>在计算机上使用finger：</p><p>[root@localhost root]# Finger</p><p>Login Name Tty Idle Login Time Office Office Phone</p><p>root root tty1 2 Dec 15 11</p><p>root root pts/0 1 Dec 15 11</p><p>root root *pts/1 Dec 15 11</p><p>5.应用说明</p><p>如果要查询远程机上的用户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网络主机需要运行finger守护进程的支持。</p><h3 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h3><p>1.作用</p><p>mail作用是发送电子邮件，使用权限是所有用户。此外，mail还是一个电子邮件程序。</p><p>2.格式</p><p>mail [-s subject] [-c address] [-b address]</p><p>mail -f [mailbox]mail [-u user]</p><p>3.主要参数</p><p>-b address：表示输出信息的匿名收信人地址清单。</p><p>-c address：表示输出信息的抄送（）收信人地址清单。</p><p>-f [mailbox]：从收件箱者指定邮箱读取邮件。</p><p>-s subject：指定输出信息的主体行。</p><p>[-u user]：端口指定优化的收件箱读取邮件。</p><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>1.作用</p><p>nslookup命令的功能是查询一台机器的IP地址和其对应的域名。使用权限所有用户。它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的IP地址对应的域名。</p><p>2.格式</p><p>nslookup ［IP地址/域名］</p><p>3.应用实例</p><p>（1）在本地计算机上使用nslookup命令</p><p>$ nslookup</p><p>Default Server: name.cao.com.cn</p><p>Address: 192.168.1.9</p><p>></p><p>在符号“&gt;”后面输入要查询的IP地址域名，并回车即可。如果要退出该命令，输入“exit”，并回车即可。</p><p>（2）使用nslookup命令测试named</p><p>输入下面命令：</p><p>nslookup</p><p>然后就进入交换式nslookup环境。如果named正常启动，则nslookup会显示当前DNS服务器的地址和域名，否则表示named没能正常启动。</p><p>下面简单介绍一些基本的DNS诊断。</p><p>检查正向DNS解析，在nslookup提示符下输入带域名的主机名，如hp712.my.com，nslookup应能显示该主机名对应的IP地址。如果只输入hp712，nslookup会根据/etc/resolv.conf的定义，自动添加my.com域名，并回答对应的IP地址。</p><p>检查反向DNS解析，在nslookup提示符下输入某个IP地址，如192.22.33.20，nslookup应能回答该IP地址所对应的主机名。</p><p>检查MX邮件地址记录在nslookup提示符下输入：</p><p>set q=mx</p><p>然后输入某个域名，输入my.com和mail.my.com，nslookup应能够回答对应的邮件服务器地址，即support.my.com和support2.my.com。</p><p>动手练习</p><p>1.危险的网络命令</p><p>互联网的发展使安全成为一个不能忽视的问题，finger、ftp、rcp和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，嗅探器可以非常容易地截获这些口令和数据。而且，这些服务程序的安全验证方式也是有弱点的，很容易受到“中间服务器”方式的攻击。这里笔者把一些不安全的命令根据危险等级列出，见表3所示。</p><p>现在ftp、telnet可以被SSH命令代替绑定在端口22上，其连接采用协商方式，使用RSA加密。身份鉴别完成之后，后面的所有流量都使用IDEA进行加密。SSH（Secure　Shell）程序可以通过网络登录到远程主机，并执行命令。rcp、rlogin等远程调用命令也逐渐被VNC软件代替。</p><p>2.在一张网卡上绑定多个IP地址</p><p>在Linux下，可以使用ifconfig方便地绑定多个IP地址到一张网卡。例如，eth0接口的原有IP地址为192.168.0 .254，可以执行下面命令：</p><p>ifconfig eth0:0 192.168.0.253 netmask 255.255.255.0</p><p>ifconfig eth0:1 192.168.0.252 netmask 255.255.255.0</p><p>……</p><p>3.修改网卡MAC地址</p><p>首先必须关闭网卡设备，命令如下：</p><p>/sbin/ifconfig eth0 down</p><p>修改MAC地址，命令如下：</p><p>/sbin/ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE</p><p>重新启用网卡：</p><p>/sbin/ifconfig eht0 up</p><p>这样网卡的MAC地址就更改完成了。每张网卡的MAC地址是惟一，但不是不能修改的，只要保证在网络中的MAC地址的惟一性就可以了。</p><p>4.初步部署IPv6</p><p>IPv4技术在网络发展中起到了巨大的作用，不过随着时间的流逝它无论在网络地址的提供、服务质量、安全性等方面都越来越力不从心，IPv6呼之欲出。Linux是所有操作系统中最先支持IPv6的，一般Linux基于2.4内核的Linux发行版本都可以直接使用IPv6，不过主要发行版本没有加载IPv6模块，可以使用命令手工加载，需要超级用户的权限。</p><p>(1)加载IPv6模块</p><p>使用命令检测，其中inet6 addr: fe80::5054:abff:fe34:5b09/64，就是eth0网卡的IPv6地址。</p><p># modprobe IPv6</p><p>＃ifconfig</p><p>eth0 Link encap:Ethernet HWaddr 52:54:AB:34:5B:09</p><p>inet addr:192.168.1.2 Bcast:192.168.1.255 Mask:255.255.255.0</p><p>inet6 addr: fe80::5054:abff:fe34:5b09/64 Scope:Link</p><p>UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</p><p>RX packets:0 errors:0 dropped:0 overruns:0 frame:0</p><p>TX packets:21 errors:0 dropped:0 overruns:0 carrier:0</p><p>collisions:0 txqueuelen:100</p><p>RX bytes:0 (0.0 b) TX bytes:1360 (1.3 Kb)</p><p>Interrupt:5 Base address:0xec00</p><p>(2)使用ping命令检测网卡的IPv6地址是否有效</p><p>#ping6 -I eth0 -c 2 fe80::200:e8ff:fea0:2586</p><p>和IPv4不一样，使用ping6命令时必须指定一个网卡界面，否则系统不知道将数据包发送到哪个网络设备。I表示Interface、eth0是第一个网卡，－c表示回路，2表示ping6操作两次。结果见图1所示。</p><p>图1 IPv6网络下的ping6命令</p><p>(3)使用ip命令在IPv6下为eth0增加一个IP地址</p><p>#ip -6 addr add 3ffe:ffff:0:f101::1/64 dev eth0</p><p>使用ifconfig命令，查看网卡是否出现第二个IPv6地址。</p><p>Linux网络的主要优点是能够实现资源和信息的共享，并且用户可以远程访问信息。Linux提供了一组强有力的网络命令来为用户服务，这些工具能够帮助用户进行网络设定、检查网络状况、登录到远程计算机上、传输文件和执行远程命令等。</p><p>上面介绍了Linux中比较重要的网络命令，其实Linux还有许多命令需要学习。Linux网络操作命令的一个特点就是命令参数选项很多，并不要求全部记住，关键在于理解命令的主要用途和学会使用帮助信息。</p><h2 id="网络安全命令"><a href="#网络安全命令" class="headerlink" title="网络安全命令"></a>网络安全命令</h2><p>虽然Linux和Windows NT/2000系统一样是一个多用户的系统，但是它们之间有不少重要的差别。对于很多习惯了Windows系统的管理员来讲，如何保证Linux操作系统安全、可靠将会面临许多新的挑战。本文将重点介绍Linux系统安全的命令。</p><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>1.作用</p><p>passwd命令原来修改账户的登陆密码，使用权限是所有用户。</p><p>2.格式</p><p>passwd [选项] 账户名称</p><p>3.主要参数</p><p>-l：锁定已经命名的账户名称，只有具备超级用户权限的使用者方可使用。</p><p>-u：解开账户锁定状态，只有具备超级用户权限的使用者方可使用。</p><p>-x, –maximum=DAYS：最大密码使用时间（天），只有具备超级用户权限的使用者方可使用。</p><p>-n, –minimum=DAYS：最小密码使用时间（天），只有具备超级用户权限的使用者方可使用。</p><p>-d：删除使用者的密码, 只有具备超级用户权限的使用者方可使用。</p><p>-S：检查指定使用者的密码认证种类, 只有具备超级用户权限的使用者方可使用。</p><p>4.应用实例</p><p>$ passwd</p><p>Changing password for user cao.</p><p>Changing password for cao</p><p>(current) UNIX password:</p><p>New UNIX password:</p><p>Retype new UNIX password:</p><p>passwd: all authentication tokens updated successfully.</p><p>从上面可以看到，使用passwd命令需要输入旧的密码，然后再输入两次新密码。</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>1.作用</p><p>su的作用是变更为其它使用者的身份，超级用户除外，需要键入该使用者的密码。</p><p>2.格式</p><p>su [选项]… [-] [USER [ARG]…]</p><p>3.主要参数</p><p>-f ， –fast：不必读启动文件（如 csh.cshrc 等），仅用于csh或tcsh两种Shell。</p><p>-l ， –login：加了这个参数之后，就好像是重新登陆为该使用者一样，大部分环境变量（例如HOME、SHELL和USER等）都是以该使用者（USER）为主，并且工作目录也会改变。如果没有指定USER，缺省情况是root。</p><p>-m， -p ，–preserve-environment：执行su时不改变环境变数。</p><p>-c command：变更账号为USER的使用者，并执行指令（command）后再变回原来使用者。</p><p>USER：欲变更的使用者账号，ARG传入新的Shell参数。</p><p>4.应用实例</p><p>变更账号为超级用户，并在执行df命令后还原使用者。 su -c df root</p><h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><p>1.作用</p><p>umask设置用户文件和目录的文件创建缺省屏蔽值，若将此命令放入profile文件，就可控制该用户后续所建文件的存取许可。它告诉系统在创建文件时不给谁存取许可。使用权限是所有用户。</p><p>2.格式</p><p>umask [-p] [-S] [mode]</p><p>3.参数</p><p>－S：确定当前的umask设置。</p><p>－p：修改umask 设置。</p><p>[mode]：修改数值。</p><p>4.说明</p><p>传统Unix的umask值是022，这样就可以防止同属于该组的其它用户及别的组的用户修改该用户的文件。既然每个用户都拥有并属于一个自己的私有组，那么这种“组保护模式”就不在需要了。严密的权限设定构成了Linux安全的基础，在权限上犯错误是致命的。需要注意的是，umask命令用来设置进程所创建的文件的读写权限，最保险的值是0077，即关闭创建文件的进程以外的所有进程的读写权限，表示为-rw——-。在～/.bash_profile中，加上一行命令umask 0077可以保证每次启动Shell后, 进程的umask权限都可以被正确设定。</p><p>5.应用实例</p><p>umask -S</p><p>u=rwx,g=rx,o=rx</p><p>umask -p 177</p><p>umask -S</p><p>u=rw,g=,o=</p><p>上述5行命令，首先显示当前状态，然后把umask值改为177，结果只有文件所有者具有读写文件的权限，其它用户不能访问该文件。这显然是一种非常安全的设置。</p><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>1.作用</p><p>chgrp表示修改一个或多个文件或目录所属的组。使用权限是超级用户。</p><p>2.格式</p><p>chgrp [选项]… 组 文件…</p><p>或</p><p>chgrp [选项]… –reference=参考文件 文件…</p><p>将每个的所属组设定为。</p><p>3.参数</p><p>-c, –changes ：像 –verbose，但只在有更改时才显示结果。</p><p>–dereference：会影响符号链接所指示的对象，而非符号链接本身。</p><p>-h, –no-dereference：会影响符号链接本身，而非符号链接所指示的目的地(当系统支持更改符号链接的所有者，此选项才有效)。</p><p>-f, –silent, –quiet：去除大部分的错误信息。</p><p>–reference=参考文件：使用的所属组，而非指定的。</p><p>-R, –recursive：递归处理所有的文件及子目录。</p><p>-v, –verbose：处理任何文件都会显示信息。</p><p>4.应用说明</p><p>该命令改变指定指定文件所属的用户组。其中group可以是用户组ID，也可以是/etc/group文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</p><p>5.应用实例</p><p>改变/opt/local /book/及其子目录下的所有文件的属组为book，命令如下：</p><p>$ chgrp - R book /opt/local /book</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>1.作用</p><p>chmod命令是非常重要的，用于改变文件或目录的访问权限，用户可以用它控制文件或目录的访问权限，使用权限是超级用户。</p><p>2.格式</p><p>chmod命令有两种用法。一种是包含字母和操作符表达式的字符设定法（相对权限设定）；另一种是包含数字的数字设定法（绝对权限设定）。</p><p>（1）字符设定法</p><p>chmod [who] [+ | - | =] [mode] 文件名</p><p>操作对象who可以是下述字母中的任一个或它们的组合</p><p>u：表示用户，即文件或目录的所有者。</p><p>g：表示同组用户，即与文件属主有相同组ID的所有用户。</p><p>o：表示其它用户。</p><p>a：表示所有用户，它是系统默认值。</p><p>操作符号</p><p>+：添加某个权限。</p><p>-：取消某个权限。</p><p>=：赋予给定权限，并取消其它所有权限（如果有的话）。</p><p>设置mode的权限可用下述字母的任意组合</p><p>r：可读。</p><p>w：可写。</p><p>x：可执行。</p><p>X：只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x属性。</p><p>s：文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。</p><p>t：保存程序的文本到交换设备上。</p><p>u：与文件属主拥有一样的权限。</p><p>g：与和文件属主同组的用户拥有一样的权限。</p><p>o：与其它用户拥有一样的权限。</p><p>文件名：以空格分开的要改变权限的文件列表，支持通配符。</p><p>一个命令行中可以给出多个权限方式，其间用逗号隔开。</p><p>（2） 数字设定法</p><p>数字设定法的一般形式为： chmod [mode] 文件名</p><p>数字属性的格式应为3个0到7的八进制数，其顺序是(u)(g)(o)文件名，以空格分开的要改变权限的文件列表，支持通配符。数字表示的权限的含义如下：0001为所有者的执行权限；0002为所有者的写权限；0004为所有者的读权限；0010为组的执行权限；0020为组的写权限；0040为组的读权限；0100为其他人的执行权限；0200为其他人的写权限；0400为其他人的读权限；1000为粘贴位置位；2000表示假如这个文件是可执行文件，则为组ID为位置位，否则其中文件锁定位置位；4000表示假如这个文件是可执行文件，则为用户ID为位置位。</p><p>3.实例</p><p>如果一个系统管理员写了一个表格(tem)让所有用户填写，那么必须授权用户对这个文件有读写权限，可以使用命令：</p><p>＃chmod 666 tem</p><p>上面代码中，这个666数字是如何计算出来的呢？0002为所有者的写权限，0004为所有者的读权限，0020为组的写权限，0040为组的读权限，0200为其他人的写权限，0400为其他人的读权限，这6个数字相加就是666（注以上数字都是八进制数），结果见图1所示。</p><p>如果用字符权限设定使用下面命令：</p><p>＃chmod a =wx tem</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>1.作用</p><p>更改一个或多个文件或目录的属主和属组。使用权限是超级用户。</p><p>2.格式</p><p>chown [选项] 用户或组 文件</p><p>3.主要参数</p><p>–dereference：受影响的是符号链接所指示的对象，而非符号链接本身。</p><p>-h, –no-dereference：会影响符号链接本身，而非符号链接所指示的目的地(当系统支持更改符号链接的所有者，此选项才有效)。</p><p>–from=目前所有者:目前组只当每个文件的所有者和组符合选项所指定的，才会更改所有者和组。其中一个可以省略，这已省略的属性就不需要符合原有的属性。</p><p>-f, –silent, –quiet：去除大部分的错误信息。</p><p>-R, –recursive：递归处理所有的文件及子目录。</p><p>-v, –verbose：处理任何文件都会显示信息。</p><p>4.说明</p><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或用户ID；组可以是组名或组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的目录下以后，让用户拥有使用该文件的权限。</p><p>5.应用实例</p><p>1.把文件shiyan.c的所有者改为wan</p><p>$ chown wan shiyan.c</p><p>2.把目录/hi及其下的所有文件和子目录的属主改成wan，属组改成users。</p><p>$ chown - R wan.users /hi</p><h3 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h3><p>1.作用</p><p>修改ext2和ext3文件系统属性(attribute)，使用权限超级用户。</p><p>2.格式</p><p>chattr [-RV] [-+=AacDdijsSu] [-v version] 文件或目录</p><p>3.主要参数</p><p>－R：递归处理所有的文件及子目录。</p><p>－V：详细显示修改内容，并打印输出。</p><p>－：失效属性。</p><p>＋：激活属性。</p><p>= ：指定属性。</p><p>A：Atime，告诉系统不要修改对这个文件的最后访问时间。</p><p>S：Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</p><p>a：Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</p><p>i：Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</p><p>D：检查压缩文件中的错误。</p><p>d：No dump，在进行文件系统备份时，dump程序将忽略这个文件。</p><p>C：Compress，系统以透明的方式压缩这个文件。从这个文件读取时，返回的是解压之后的数据；而向这个文件中写入数据时，数据首先被压缩之后才写入磁盘。</p><p>s：Secure Delete，让系统在删除这个文件时，使用0填充文件所在的区域。</p><p>u：Undelete，当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件。</p><p>4.说明</p><p>chattr命令的作用很大，其中一些功能是由Linux内核版本来支持的，如果Linux内核版本低于2.2，那么许多功能不能实现。同样－D检查压缩文件中的错误</p><p>的功能，需要2.5.19以上内核才能支持。另外，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能</p><p>保护/、/dev、/tmp、/var目录。</p><p>5.应用实例</p><p>1.恢复/root目录,即子目录的所有文件</p><p># chattr -R +u/root</p><p>2.用chattr命令防止系统中某个关键文件被修改</p><p>在Linux下，有些配置文件(passwd ,fatab)是不允许任何人修改的，为了防止被误删除或修改，可以设定该文件的“不可修改位(immutable)”，命令如下：</p><p># chattr +i /etc/fstab</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>1.作用</p><p>sudo是一种以限制配置文件中的命令为基础，在有限时间内给用户使用，并且记录到日志中的命令，权限是所有用户。</p><p>2.格式</p><p>sudo [-bhHpV] [-s ] [-u ] [指令]</p><p>sudo [-klv]</p><p>3.主要参数</p><p>－b：在后台执行命令。</p><p>-h：显示帮助。</p><p>-H：将HOME环境变量设为新身份的HOME环境变量。</p><p>-k：结束密码的有效期，即下次将需要输入密码。</p><p>-l：列出当前用户可以使用的命令。</p><p>-p：改变询问密码的提示符号。</p><p>-s ：执行指定的Shell。</p><p>-u ：以指定的用户为新身份，不使用时默认为root。</p><p>-v：延长密码有效期5分钟。</p><p>4.说明</p><p>sudo</p><p>命令的配置在/etc/sudoers文件中。当用户使用sudo时，需要输入口令以验证使用者身份。随后的一段时间内可以使用定义好的命令，当使用配置文件中没有的命令时，将会有报警的记录。sudo是系统管理员用来允许某些用户以root身份运行部分/全部系统命令的程序。一个明显的用途是增强了站点的安全性，如果需要每天以超级用户的身份做一些日常工作，经常执行一些固定的几个只有超级用户身份才能执行的命令，那么用sudo是非常适合的。</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>1.作用</p><p>ps显示瞬间进程 (process) 的动态，使用权限是所有使用者。</p><p>2.格式</p><p>ps [options] [–help]</p><p>3.主要参数</p><p>ps的参数非常多, 此出仅列出几个常用的参数。</p><p>-A：列出所有的进程。</p><p>-l：显示长列表。</p><p>-m：显示内存信息。</p><p>-w：显示加宽可以显示较多的信息。</p><p>-e：显示所有进程。</p><p>a：显示终端上的所有进程,包括其它用户的进程。</p><p>-au：显示较详细的信息。</p><p>-aux：显示所有包含其它使用者的进程。</p><p>4.说明</p><p>要对进程进行监测和控制，首先要了解当前进程的情况，也就是需要查看当前进程。ps命令就是最基本、也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行、运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等。图2给出了ps-aux命令详解。大部分信息都可以通过执行该命令得到。最常用的三个参数是u、a、x。下面就结合这三个参数详细说明ps命令的作用：ps aux</p><p>USER表示进程拥有者；PID表示进程标示符；%CPU表示占用的CPU使用率；%MEM占用的物理内存使用率；VSZ表示占用的虚拟内存大小；RSS为进程占用的物理内存值；TTY为终端的次要装置号码。</p><p>STAT</p><p>表示进程的状态，其中D为不可中断的静止（I/O动作）；R正在执行中；S静止状态；T暂停执行；Z不存在，但暂时无法消除；W没有足够的内存分页可分配；高优先序的进程；N低优先序的进程；L有内存分页分配并锁在内存体内 (实时系统或I/O)。START为进程开始时间。TIME为执行的时间。COMMAND是所执行的指令。</p><p>4.应用实例</p><p>在进行系统维护时，经常会出现内存使用量惊人，而又不知道是哪一个进程占用了大量进程的情况。除了可以使用top命令查看内存使用情况之外，还可以使用下面的命令：</p><p>ps aux | sort +5n</p><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><p>1.作用</p><p>who显示系统中有哪些用户登陆系统，显示的资料包含了使用者ID、使用的登陆终端、上线时间、呆滞时间、CPU占用，以及做了些什么。 使用权限为所有用户。</p><p>2.格式</p><p>who - [husfV] [user]</p><p>3.主要参数</p><p>-h：不要显示标题列。</p><p>-u：不要显示使用者的动作/工作。</p><p>-s：使用简短的格式来显示。</p><p>-f：不要显示使用者的上线位置。</p><p>-V：显示程序版本。</p><p>4.说明</p><p>该命令主要用于查看当前在线上的用户情况。如果用户想和其它用户建立即时通信，比如使用talk命令，那么首先要确定的就是该用户确实在线上,不然talk进程就无法建立起来。又如，系统管理员希望监视每个登录的用户此时此刻的所作所为，也要使用who命令。who命令应用起来非常简单，可以比较准确地掌握用户的情况,所以使用非常广泛。</p><p>动手练习</p><p>1.使用Linux命令检测系统入侵者</p><p>安装过Mandrake Linux和Red Hat Linux的用户都会知道，Linux系统会内置三种不同级别（标准、高、更高）的防火墙，当进行了Linux服务器的安装和一些基本的设置后，服务器应该说是比较安全的，但是也会有黑客通过各种方法利用系统管理员的疏忽侵入系统。如何快速查找黑客非常重要。</p><p>一般来说，可以使用命令查询黑客是否入侵，如果黑客嗅探网络，那么它必须使网卡接口处于混杂模式，使用下面命令进行查询：</p><p>＃ifconfig -a</p><p>eth0 Link encap:Ethernet HWaddr 00:00:E8:A0:25:86</p><p>inet addr:192.168.1.7 Bcast:192.168.1.255 Mask:255.255.255.0</p><p>UP BROADCAST RUNNING PROMISCUOUS MTU:1500 Metric:1</p><p>……</p><p>从这个命令的输出中，可以看到上面讲到的这些概念。第一行的00:00:E8:A0:25:86是mac地址，第二行的192.168.1.7是IP地址，</p><p>第四行讲的是接收数据状态，这时正在被黑客嗅探。一般而言，网卡有几种接收数据帧的状态，如Broadcast、Multicast、Promiscuous等。Broadcast是指接收所有类型为广播报文的数据帧；Multicast是指接收特定的组播报文；Promiscuous则是通常说的混杂模式，是指对报文中的目的硬件地址不加任何检查、全部接收的工作模式。</p><p>2.限制su命令的滥用</p><p>我们知道，超级用户在Linux中有最大的权利，几乎所有黑客都想得到这个目标。Linux可以增加对切换到超级用户的限制。使用PAM（Pluggable Authentication Modules）可以禁止除在wheel组以外的任何人su成root，修改/etc/pam.d/su文件，除去屏蔽标识#。使用/usr/sbin/usermod G10 bjecadm将bjecadm这个账号加入gid为10的组，就是wheel组。命令如下：</p><p>/etc/pam.d/su # 使用密码验证＃</p><p>auth sufficient /lib/security/pam_wheel.so debug</p><p># 限制只有wheel组用户才可以切换到root＃</p><p>auth required /lib/security/pam_wheel.so use_uid</p><p>chmod -G10 bjecadm</p><p>另外，每当用户试图使用su命令进入系统用户时,命令将在<strong>/usr/adm/sulog</strong>文件中写一条信息,若该文件记录了大量试图用su进入root的无效操作信息,则表明了可能有人企图破译root口令。</p><p>Linux命令有着强大的功能。对于Linux系统管理员来说，往往只需要通过各种安全命令技巧，组合构成安全防线。从计算机安全的角度看，世界上没有绝对安全的计算机系统，Linux系统也不例外。</p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>在前面几讲中，我们把Linux命令按照在系统中的作用分成几个部分分别予以介绍。但是，还有一些命令不好划分，然而学习它们同样是比较重要的。</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>1.作用</p><p>tar命令是Unix/Linux系统中备份文件的可靠方法，几乎可以工作于任何环境中，它的使用权限是所有用户。</p><p>2.格式</p><p>tar [主选项+辅选项] 文件或目录</p><p>3.主要参数</p><p>使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。</p><p>主选项：</p><p>-c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。</p><p>-r 把要存档的文件追加到档案文件的未尾。例如用户已经做好备份文件，又发现还有一个目录或是一些文件忘记备份了，这时可以使用该选项，将忘记的目录或文件追加到备份文件中。</p><p>-t 列出档案文件的内容，查看已经备份了哪些文件。</p><p>-u 更新文件。就是说，用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最后。</p><p>-x 从档案文件中释放文件。</p><p>辅助选项：</p><p>-b 该选项是为磁带机设定的，其后跟一数字，用来说明区块的大小，系统预设值为20（20×512 bytes）。</p><p>-f 使用档案文件或设备，这个选项通常是必选的。</p><p>-k 保存已经存在的文件。例如把某个文件还原，在还原的过程中遇到相同的文件，不会进行覆盖。</p><p>-m 在还原文件时，把所有文件的修改时间设定为现在。</p><p>-M 创建多卷的档案文件，以便在几个磁盘中存放。</p><p>-v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。</p><p>-w 每一步都要求确认。</p><p>-z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。</p><p>4.应用说明</p><p>tar 是Tape Archive（磁带归档）的缩写，最初设计用于将文件打包到磁带上。如果下载过Linux的源代码，或许已经碰到过tar文件，请注意，不要忘了Linux是区分大小写的。例如，tar命令应该总是以小写的形式执行。命令行开关可以是大写、小写或大小写的混合。例如，-t和-T执行不同的功能。文件或目录名称可以混合使用大小写，而且就像命令和命令行开关一样是区分大小写的。</p><p>5.应用实例</p><p>tar是一个命令行的工具，没有图形界面。使用Konsole打开一个终端窗口，接下来是一个简单的备份命令（在/temp目录中创建一个back.tar的文件，/usr目录中所有内容都包含在其中。）：</p><p>$tar cvf - /usr &gt; /temp/back.tar</p><p>另外，tar命令支持前面第三讲中讲过的crontab命令，可以用crontab工具设置成基于时间的有规律地运行。例如，每晚6点把/usr目录备份到hda—第一个IDE接口的主驱动器 (总是位于第一个硬盘)中，只要将下面语句添加到root的crontab中即可：</p><p>$00 06 <em> </em> * tar cvf /dev/hda1/usrfiles.tar - /usr</p><p>一般情况下，以下这些目录是需要备份的：</p><p>/etc 包含所有核心配置文件，其中包括网络配置、系统名称、防火墙规则、用户、组，以及其它全局系统项。</p><p>/var 包含系统守护进程（服务）所使用的信息，包括DNS配置、DHCP租期、邮件缓冲文件、HTTP服务器文件、dB2实例配置等。</p><p>/home 包含所有默认用户的主目录，包括个人设置、已下载的文件和用户不希望失去的其它信息。</p><p>/root 根（root）用户的主目录。</p><p>/opt 是安装许多非系统文件的地方。IBM软件就安装在这里。OpenOffice、JDK和其它软件在默认情况下也安装在这里。</p><p>有些目录是可以不备份的：</p><p>/proc 应该永远不要备份这个目录。它不是一个真实的文件系统，而是运行内核和环境的虚拟化视图，包括诸如/proc/kcore这样的文件，这个文件是整个运行内存的虚拟视图。备份这些文件只是在浪费资源。</p><p>/dev 包含硬件设备的文件表示。如果计划还原到一个空白的系统，就可以备份/dev。然而，如果计划还原到一个已安装的Linux 系统，那么备份/dev是没有必要的。</p><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>1.作用</p><p>unzip命令位于/usr/bin目录中，它们和MS DOS下的pkzip、pkunzip及MS Windows中的Winzip软件功能一样，将文件压缩成.zip文件，以节省硬盘空间，当需要的时候再将压缩文件用unzip命令解开。该命令使用权限是所有用户。</p><p>2.格式</p><p>unzip [-cflptuvz][-agCjLMnoqsVX][-P ][.zip文件][文件][-d ][-x ]</p><p>3.主要参数</p><p>-c：将解压缩的结果显示到屏幕上，并对字符做适当的转换。</p><p>-f：更新现有的文件。</p><p>-l：显示压缩文件内所包含的文件。</p><p>-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。</p><p>-t：检查压缩文件是否正确。</p><p>-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其它文件解压缩到目录中。</p><p>-v：执行是时显示详细的信息。</p><p>-z：仅显示压缩文件的备注文字。</p><p>-a：对文本文件进行必要的字符转换。</p><p>-b：不要对文本文件进行字符转换。</p><p>-C：压缩文件中的文件名称区分大小写。</p><p>-j：不处理压缩文件中原有的目录路径。</p><p>-L：将压缩文件中的全部文件名改为小写。</p><p>-M：将输出结果送到more程序处理。</p><p>-n：解压缩时不要覆盖原有的文件。</p><p>-o：不必先询问用户，unzip执行后覆盖原有文件。</p><p>-P：使用zip的密码选项。</p><p>-q：执行时不显示任何信息。</p><p>-s：将文件名中的空白字符转换为底线字符。</p><p>-V：保留VMS的文件版本信息。</p><p>-X：解压缩时同时回存文件原来的UID/GID。</p><p>[.zip文件]：指定.zip压缩文件。</p><p>[文件]：指定要处理.zip压缩文件中的哪些文件。</p><p>-d：指定文件解压缩后所要存储的目录。</p><p>-x：指定不要处理.zip压缩文件中的哪些文件。</p><p>-Z unzip：-Z等于执行zipinfo指令。在Linux中，还提供了一个叫zipinfo的工具，能够察看zip压缩文件的详细信息。unzip最新版本是5.50。</p><h3 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h3><p>1.作用</p><p>gunzip命令作用是解压文件，使用权限是所有用户。</p><p>2.格式</p><p>gunzip [-acfhlLnNqrtvV][-s ][文件…]</p><p>或者</p><p>gunzip [-acfhlLnNqrtvV][-s ][目录]</p><p>3.主要参数</p><p>-a或–ascii：使用ASCII文字模式。</p><p>-c或–stdout或–to-stdout：把解压后的文件输出到标准输出设备。</p><p>-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在，以及该文件是否为符号连接。</p><p>-h或–help：在线帮助。</p><p>-l或–list：列出压缩文件的相关信息。</p><p>-L或–license：显示版本与版权信息。</p><p>-n或–no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理。</p><p>-N或–name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。</p><p>-q或–quiet：不显示警告信息。</p><p>-r或–recursive：递归处理，将指定目录下的所有文件及子目录一并处理。</p><p>-S或–suffix：更改压缩字尾字符串。</p><p>-t或–test：测试压缩文件是否正确无误。</p><p>-v或–verbose：显示指令执行过程。</p><p>-V或–version：显示版本信息。</p><p>4.说明</p><p>gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件，这些压缩文件预设最后的扩展名为“.gz”。事实上，gunzip就是gzip的硬连接，因此不论是压缩或解压缩，都可通过gzip指令单独完成。gunzip最新版本是1.3.3 。</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>1.作用</p><p>man命令用来提供在线帮助，使用权限是所有用户。在Linux系统中存储着一部联机使用的手册，以供用户在终端上查找。使用man命令可以调阅其中的帮助信息，非常方便和实用。</p><p>2.格式</p><p>man 命令名称</p><p>man [-acdfhkKtwW] [-m system] [-p string] [-C config_file] [-M path] [-P pager] [-S section_list] [section] name …</p><p>3.参数</p><p>-C config_file：指定设定文件man.conf，缺省值是/etc/man.conf。</p><p>-M path：指定了联机手册的搜寻路径, 如果没有指定则使用环境变数MANPATH的设定；如果没有使用MANPATH， 则会使用/usr/lib/man.conf内的设定；如果MANPATH是空字串，则表示使用缺省值。</p><p>-P pager：指定使用何种pager.man会优先使用此选项设定，然后是依环境变数MANPAGER设定，然后是环境变数PAGER；man缺省使用/usr/bin/less -is。</p><p>-S section_list man：所搜寻的章节列表(以冒号分隔)，此选项会覆盖环境变数MANSECT的设定。</p><p>-a man：缺省情况是在显示第一个找到的手册之后，就会停止搜寻，使用此选项会强迫man继续显示所有符合name的联机手册。</p><p>-c：即使有最新的cat page，也继续对联机手册重新作排版，本选项在屏幕的行列数改变时或已排版的联机手册损坏时特别有意义。</p><p>-d：不要真的显示联机手册，只显示除错讯息。</p><p>-D：同时显示联机手册与除错讯息。</p><p>-h：显示求助讯息然后结束程式 。</p><p>-K：对所有的联机手册搜寻所指定的字串。请注意，本功能回应速度可能很慢，如果指定section（区域）会对速度有帮助。</p><p>-m system：依所指定的system名称而指定另一组的联机手册。</p><p>man：是manual（手册）的缩写。在输入命令有困难时，可以立刻得到这个文档。例如, 如果使用ps命令时遇到困难，可以输入man ps得到帮助信息，此时会显示出ps的手册页（man page）。</p><p>由于手册页man page是用less程序来看的(可以方便地使屏幕上翻和下翻), 所以在man page里可以使用less的所有选项。</p><p>less中比较重要的功能键有:</p><p>[q] 退出；</p><p>[Enter] 一行行地下翻；</p><p>[Space] 一页页地下翻；</p><p>上翻一页；</p><p>[/] 后跟一个字符串和[Enter]来查找字符串；</p><p>[n] 发现上一次查找的下一个匹配。</p><p>4.阅读手册页</p><p>手册页在很少的空间里提供了很多的信息， 这里简单介绍一下大多数手册页中都有的部分内容。Linux手册页主要有九个部分：用户指令、系统调用、程序库、设备说明、文件格式、游戏、杂项、系统指令、内核.</p><p>5.应用实例</p><p>Linux命令中有一些基础的、重要的命令，例如ps、find、cat和ls等。下面来举一个综合应用的例子，由此可以看出man的地位在Linux中可谓至关重要。但是，man所显示的信息却不是普通的文本，如果直接将这些文字重定向到一个文本文件，就会发现在man中高亮显示的文字就变成了两个，而且有不计其数的制表符，使打印、编辑都变得非常不便。不过，使用下面这样一条语句就能得到ps命令打印。</p><p># man ps | col -b | lpr</p><p>这条命令同时运用了输出重定向和管道两种技巧，作用是将ps命令的帮助信息可以直接打印出来。更多的Man文件可以查看Linux Man</p><h3 id="unencode"><a href="#unencode" class="headerlink" title="unencode"></a>unencode</h3><p>1.作用</p><p>unencode命令可以把一个二进制文件表编码为一个文本文件，使用权限是所有用户。</p><p>2.格式</p><p>uuencode [-hv] [源文件] 目标文件</p><p>3.主要参数</p><p>－h：列出指令使用格式(help) 。</p><p>－v：列出版本信息。</p><p>4.应用说明</p><p>uuencode指令可以将二进制文件转化成可使用电子邮件发送的ASCII编码形式。uuencode编码后的资料都以 begin开始，以end作为结束，且通常其中的每一行的开始均为“M”，中间部分是编码过的文件，编码后的文件比源文件要大一些。</p><h3 id="uudecode"><a href="#uudecode" class="headerlink" title="uudecode"></a>uudecode</h3><p>1.作用</p><p>uudecode命令用来将uuencode编码后的档案还原，uudecode只会将begin与end标记之间的编码资料还原，程序会跳过标记以外的资料。它的使用权限为所有用户。</p><p>2.格式</p><p>uuencode [-hv] [file1 …]</p><p>3.主要参数</p><p>－h：列出指令使用格式(help)。</p><p>－v：列出版本信息。</p><p>4.应用实例</p><p>使用下面命令一次还原几个文件：</p><p>uuencode file1.uud file2.uud file3.uud</p><p>动手练习</p><p>1.在Linux命令行下发送邮件</p><p>虽然Linux桌面应用发展很快，但是命令行（Shell）在Linux中依然有很强的生命力。如果能确认电子邮件服务器支持8bit的字节，就可以直接使用下面命令：</p><p>cat ＜附件文件名＞ | mail ＜邮件地址＞</p><p>cat（cat是concatenate的缩写）命令是将几个文件处理成一个文件，并将这种处理的结果保存到一个单独的输出文件，这里我们用它来合并邮件的文本。</p><p>写好邮件名称，比如叫cjkmail，然后使用下面命令：</p><p>$uuencode ＜附件文件名＞ ＜附件文件名＞ &gt;&gt;cjkmail</p><p>这样就可以用vi编辑器写cjkmail文件，并在前面写上信的正文，然后寄出。</p><p>对方收到信后，把信中属于cjkmail中的内容拷贝出来，存为themail.uue。如果对方是在Windows下，就可以用WinRAR或WinZip解压，这样就可以看到附件。</p><p>如果对方也使用Linux，可以用uudecode命令还原：</p><p>$ undencode -o＜附件文件名＞ themail.uue</p><p>2.实现tar的分卷</p><p>笔者想把一个378MB的文件压缩成多个63MB的文件（笔者的USB为64MB），使用下面命令：</p><p>$tar czvf - dir | split -d -b 63m</p><p>然后合并命令：</p><p>$cat x* &gt; dir.tgz</p><p>以上例子实际是由三个命令组合完成的，即用tar打包，用split分割，用cat合并。“tar czvf - dir”的意思是把dir目录打包，并输出到标准输出（argv），这样就可以直接用管道输出给split。</p><p>3.连续执行一个命令</p><p>使用watch命令，可以反复执行命令。如果和ls配合，可以达到观察某文件大小变化的效果。</p><p>$watch ls －l file.name</p><p>4.用tar命令导出一个文件</p><p>有一个tar格式的DVD文件GLvPro6.4_linux.tar，因为该文件非常大（4.7GB），如果全部解压比较麻烦，可以用下面命令先导出readme.txt看看。</p><p>tar xvf GLvPro6.4_linux.tar readme.txt</p><p>这样readme.txt就单独被导出了。</p><p>5.用tar打包一个目录时只备份其中的几个子目录</p><p>tar cf –exclude home/cjh home/cao</p><p>这样home目录下只有cjh和cao两个子目录备份。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>持续集成、持续部署、持续交付</title>
      <link href="/2019/05/01/linux/chi-xu-ji-cheng-chi-xu-bu-shu-chi-xu-jiao-fu/"/>
      <url>/2019/05/01/linux/chi-xu-ji-cheng-chi-xu-bu-shu-chi-xu-jiao-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="持续集成、持续部署、持续交付"><a href="#持续集成、持续部署、持续交付" class="headerlink" title="持续集成、持续部署、持续交付"></a>持续集成、持续部署、持续交付</h1><p><strong>集成</strong>是指软件个人研发的部分向软件整体部分交付，以便尽早发现个人开发部分的问题；</p><p><strong>部署</strong>是代码尽快向可运行的开发/测试节交付，以便尽早测试；</p><p><strong>交付</strong>是指研发尽快向客户交付，以便尽早发现生产环境中存在的问题。</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><h2 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h2><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p><h2 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h2><p>持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><p><strong>而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。使得问题不会放大到其他部分和后面的环节。</strong></p><p>举个例子，你家装修厨房，其中一项是铺地砖，边角地砖要切割大小。如果一次全切割完再铺上去，发现尺寸有误的话浪费和返工时间就大了，不如切一块铺一块。这就是持续集成。</p><p>装修厨房有很多部分，每个部分都有检测手段，如地砖铺完了要测试漏水与否，线路铺完了要通电测试电路通顺，水管装好了也要测试冷水热水。如果全部装完了再测，出现问题可能会互相影响，比如电路不行可能要把地砖给挖开……。那么每完成一部分就测试，这是持续部署。</p><p>全部装修完了，你去验收，发现地砖颜色不合意，水池太小，灶台位置不对，返工吗？所以不如没完成一部分，你就去用一下试用验收，这就是持续交付。</p><p>参考连接：<a href="https://blog.csdn.net/peterxiaoq/article/details/73648732" target="_blank" rel="noopener">https://blog.csdn.net/peterxiaoq/article/details/73648732</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 如何维修墙上网络端口</title>
      <link href="/2019/04/29/life/ru-he-wei-xiu-qiang-shang-wang-luo-duan-kou/"/>
      <url>/2019/04/29/life/ru-he-wei-xiu-qiang-shang-wang-luo-duan-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="如何维修网络端口"><a href="#如何维修网络端口" class="headerlink" title="如何维修网络端口"></a>如何维修网络端口</h1><p>客户墙上端口由于老化、接触不良导致链路不通，可以直接使用转接头替换墙上的端口，这种方法方便快捷，但是不美观。那么墙上的端口又要怎么维修呢？</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1556693371436.png" alt="1556693371436"></p><p>先把这两个螺丝拧下来，把线盒拆开，剪掉连接线盒盖的网线，拿出线盒盖。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1556693408834.png" alt="1556693408834"></p><p>扣这里把这个金属扣子弄开</p><p><img src="http://note.youdao.com/yws/res/34310/1DED818E57934F10A019EB1487EBCA01" alt="img"></p><p>线盒盖的背面</p><p><img src="http://note.youdao.com/yws/res/34309/1F0D4C1389C8464A8C7917708C9A9BD2" alt="img"></p><p><img src="http://note.youdao.com/yws/res/34317/F9F5AB1975E94254BDB3DC636E7380C8" alt="img"></p><p>用螺丝刀拧侧面的卡扣，可以把盖子打开</p><p><img src="http://note.youdao.com/yws/res/34312/29AE0731CBA4484E83C6FB9E25177477" alt="img"></p><p>打开盖子后残留的网线就可以拿出来了</p><p><img src="http://note.youdao.com/yws/res/34315/ED7D46EA3DA849ED9902C1458032B627" alt="img"></p><p>这时候就可以把墙上的新一段网线，按顺序插回去（不能按紧盖子，要留空隙网线才能穿过去）</p><p><img src="http://note.youdao.com/yws/res/34316/39B0885CB8214F5D9B5D718338DD176F" alt="img"></p><p>注意顺序！！！橙色的格子就表示橙色，橙色的三角代表橙白，以此类推。按照数字下面的颜色是568B线序（常用），上面是568A</p><p><img src="http://note.youdao.com/yws/res/34311/2E9975B84AD342F199A2F9CC35284CC9" alt="img"></p><p>最后扣上这个扣子，把盖子装回墙上，测线通过就可以了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title> Django数据库防注入</title>
      <link href="/2019/04/28/django/django-shu-ju-ku-fang-zhu-ru/"/>
      <url>/2019/04/28/django/django-shu-ju-ku-fang-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-SQL防注入"><a href="#Django-SQL防注入" class="headerlink" title="Django SQL防注入"></a>Django SQL防注入</h1><p>SQL注入是所有网站建设都应该注意防范的东西，使用Django当然也不例外。下面介绍几个Django中防范SQL注入的方案。</p><p><strong>方案一</strong></p><p>总是使用Django自带的数据库API。它会根据你所使用的数据库服务器（例如PostSQL或者MySQL）的转换规则，自动转义特殊的SQL参数。这被运用到了整个Django的数据库API中，只有一些例外：</p><p>传给 extra() 方法的 where 参数。 (参考 附录 C。) 这个参数故意设计成可以接受原始的SQL。</p><p>使用底层数据库API的查询。</p><p><strong>方案二</strong></p><p>看下面的Python代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_contacts</span><span class="params">(request)</span>:</span></span><br><span class="line">  user = request.GET[*<span class="string">'username'</span>*]</span><br><span class="line">  sql = *<span class="string">"SELECT \* FROM user_contacts WHERE* *username* *= %s"</span>*</span><br><span class="line">  cursor = connection.cursor()</span><br><span class="line">  cursor.execute(sql, [user])  <span class="comment"># 通过传参的方式执行原生SQL</span></span><br><span class="line">  <span class="comment"># ... do something with the results</span></span><br></pre></td></tr></table></figure><p>请注意在cursor.execute() 的SQL语句中使用“%s”，而不要在SQL内直接添加参数。 如果你使用这项技术，数据库基础库将会自动添加引号，同时在必要的情况下转意你的参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Django小知识</title>
      <link href="/2019/04/28/django/django-xiao-zhi-shi/"/>
      <url>/2019/04/28/django/django-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="查看model列名"><a href="#查看model列名" class="headerlink" title="查看model列名"></a>查看model列名</h3><p>Billing_Cost.objects.get(id=1)._meta.fields</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1548238762146.png" alt="1548238762146"></p><h3 id="忽略模版渲染语法"><a href="#忽略模版渲染语法" class="headerlink" title="忽略模版渲染语法"></a>忽略模版渲染语法</h3><p>使用标签<code>verbatim   endverbatim</code></p><h3 id="Model只查询特定列的结果"><a href="#Model只查询特定列的结果" class="headerlink" title="Model只查询特定列的结果"></a>Model只查询特定列的结果</h3><p>Billing_Cost.objects.values(‘resource_type’,’change_time’).get(id=1)</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1548238973794.png" alt="1548238973794"></p><h3 id="Model查询排除特定列的结果"><a href="#Model查询排除特定列的结果" class="headerlink" title="Model查询排除特定列的结果"></a>Model查询排除特定列的结果</h3><p>Billing_Cost.objects.defer(‘resource_type’,’change_time’).values().get(id=1)</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1548239087634.png" alt="1548239087634"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> CSS选择器</title>
      <link href="/2019/04/28/javascript/css-xuan-ze-qi/"/>
      <url>/2019/04/28/javascript/css-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* group 1 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:silver; <span class="attribute">background</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:silver; <span class="attribute">background</span>:gray;&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>:white; <span class="attribute">background</span>:gray;&#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123;<span class="attribute">color</span>:silver; <span class="attribute">background</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">b</span> &#123;<span class="attribute">color</span>:gray; <span class="attribute">background</span>:white;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* group 2 */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h4</span> &#123;<span class="attribute">color</span>:silver;&#125;</span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;<span class="attribute">background</span>:gray;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">b</span> &#123;<span class="attribute">background</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">b</span> &#123;<span class="attribute">color</span>:gray;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* group 3 */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h4</span> &#123;<span class="attribute">color</span>:silver; <span class="attribute">background</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:silver;&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>:white;&#125;</span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;<span class="attribute">background</span>:gray;&#125;</span><br><span class="line"><span class="selector-tag">b</span> &#123;<span class="attribute">color</span>:gray; <span class="attribute">background</span>:white;&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#intro</span> &#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure><ol><li>只能在文档中使用一次</li><li>不能结合使用</li></ol><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.important</span> &#123;<span class="attribute">color</span>:red;&#125;  <span class="comment">/*结合元素选择器*/</span></span><br><span class="line"><span class="selector-class">.important</span><span class="selector-class">.warning</span> &#123;<span class="attribute">background</span>:silver;&#125;  <span class="comment">/*选择同时包含多个类*/</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href='http://baidu.com']</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class~="important"]</span> &#123;<span class="attribute">color</span>: red;&#125;  <span class="comment">/*根据部分属性值选择*/</span></span><br></pre></td></tr></table></figure><h2 id="后代选择器（派生选择）"><a href="#后代选择器（派生选择）" class="headerlink" title="后代选择器（派生选择）"></a>后代选择器（派生选择）</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">em</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure><p>后代选择器有一个易被忽视的方面，即<strong>两个元素之间的层次间隔可以是无限的</strong>。</p><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">strong</span> &#123;<span class="attribute">color</span>:red;&#125;  <span class="comment">/*父元素为h1的strong元素*/</span></span><br><span class="line"><span class="selector-tag">table</span><span class="selector-class">.company</span> <span class="selector-tag">td</span> &gt; <span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><p><strong>两个元素之间的层次间隔是一层。</strong></p><p>没有父类选择器，因为html渲染是从外层到里层的，根据子类影响父类，违背了渲染顺序。</p><h2 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;<span class="attribute">margin-top</span>:<span class="number">50px</span>;&#125;  <span class="comment">/*与h1相邻的p元素*/</span></span><br></pre></td></tr></table></figure><p><strong>两个元素在同一层</strong></p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="锚伪类"><a href="#锚伪类" class="headerlink" title="锚伪类"></a>锚伪类</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;<span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;<span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;<span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;<span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure><p>提示：<strong>在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</strong></p><p>提示：<strong>在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</strong></p><h3 id="first-child-伪类"><a href="#first-child-伪类" class="headerlink" title="first-child 伪类"></a>first-child 伪类</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;  <span class="comment">/* 选择作为第一个子元素的 p 元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-of-type</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;  <span class="comment">/* 指定父元素的首个 p 元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;  <span class="comment">/* 选择所有p元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125; <span class="comment">/* 匹配p元素的第一个li子元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line">&#125; <span class="comment">/* 匹配第一个p元素所有li元素*/</span></span><br></pre></td></tr></table></figure><p> :first-child 伪类来选择作为第一个子元素的 xxx 元素。(这个元素是其父元素的第一个子元素)</p><p>:first-of-type 伪元素选择的是指定父元素的首个 xxx 元素（这个元素可以不是其父元素的第一个子元素）</p><h2 id="选择器参考：-来自菜鸟教程"><a href="#选择器参考：-来自菜鸟教程" class="headerlink" title="选择器参考：(来自菜鸟教程)"></a>选择器参考：(来自<a href="https://www.runoob.com/cssref/css-selectors.html" target="_blank" rel="noopener">菜鸟教程</a>)</h2><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>CSS</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/cssref/selector_class.asp" target="_blank" rel="noopener">.<em>class</em></a></td><td>.intro</td><td>选择 class=”intro” 的所有元素。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_id.asp" target="_blank" rel="noopener">#<em>id</em></a></td><td>#firstname</td><td>选择 id=”firstname” 的所有元素。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_all.asp" target="_blank" rel="noopener">*</a></td><td>*</td><td>选择所有元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_element.asp" target="_blank" rel="noopener"><em>element</em></a></td><td>p</td><td>选择所有  &lt;p&gt;  元素。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_element_comma.asp" target="_blank" rel="noopener"><em>element</em>,<em>element</em></a></td><td>div,p</td><td>选择所有  &lt;div&gt;  元素和所有  &lt;p&gt;  元素。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_element_element.asp" target="_blank" rel="noopener"><em>element</em> <em>element</em></a></td><td>div p</td><td>选择  &lt;div&gt;  元素内部的所有  &lt;p&gt;  元素。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_element_gt.asp" target="_blank" rel="noopener"><em>element</em>&gt;<em>element</em></a></td><td>div&gt;p</td><td>选择父元素为  &lt;div&gt;  元素的所有  &lt;p&gt;  元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_element_plus.asp" target="_blank" rel="noopener"><em>element</em>+<em>element</em></a></td><td>div+p</td><td>选择紧接在  &lt;div&gt;  元素之后的所有  &lt;p&gt;  元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attribute.asp" target="_blank" rel="noopener">[<em>attribute</em>]</a></td><td>[target]</td><td>选择带有 target 属性所有元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attribute_value.asp" target="_blank" rel="noopener">[<em>attribute</em>=<em>value</em>]</a></td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp" target="_blank" rel="noopener">[<em>attribute</em>~=<em>value</em>]</a></td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_link.asp" target="_blank" rel="noopener">:link</a></td><td>a:link</td><td>选择所有未被访问的链接。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_visited.asp" target="_blank" rel="noopener">:visited</a></td><td>a:visited</td><td>选择所有已被访问的链接。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_active.asp" target="_blank" rel="noopener">:active</a></td><td>a:active</td><td>选择活动链接。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_hover.asp" target="_blank" rel="noopener">:hover</a></td><td>a:hover</td><td>选择鼠标指针位于其上的链接。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_focus.asp" target="_blank" rel="noopener">:focus</a></td><td>input:focus</td><td>选择获得焦点的 input 元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_first-letter.asp" target="_blank" rel="noopener">:first-letter</a></td><td>p:first-letter</td><td>选择每个  &lt;p&gt;  元素的首字母。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_first-line.asp" target="_blank" rel="noopener">:first-line</a></td><td>p:first-line</td><td>选择每个  &lt;p&gt;  元素的首行。</td><td>1</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_first-child.asp" target="_blank" rel="noopener">:first-child</a></td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个  &lt;p&gt;  元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_before.asp" target="_blank" rel="noopener">:before</a></td><td>p:before</td><td>在每个  <code>`</code>html &lt;p&gt;  元素的内容之前插入内容。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_after.asp" target="_blank" rel="noopener">:after</a></td><td>p:after</td><td>在每个  &lt;p&gt;  元素的内容之后插入内容。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_lang.asp" target="_blank" rel="noopener">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个  &lt;p&gt;  元素。</td><td>2</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_gen_sibling.asp" target="_blank" rel="noopener"><em>element1</em>~<em>element2</em></a></td><td>p~ul</td><td>选择前面有  &lt;p&gt;  元素的每个<code>`</code> &lt;ul&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attr_begin.asp" target="_blank" rel="noopener">[<em>attribute</em>^=<em>value</em>]</a></td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个  &lt;a&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attr_end.asp" target="_blank" rel="noopener">[<em>attribute</em>$=<em>value</em>]</a></td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有  &lt;a&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_attr_contain.asp" target="_blank" rel="noopener">[<em>attribute**=</em>value*]</a></td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个  &lt;a&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_first-of-type.asp" target="_blank" rel="noopener">:first-of-type</a></td><td>p:first-of-type</td><td>选择属于其父元素的首个  &lt;p&gt;  元素的每个  &lt;p&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_last-of-type.asp" target="_blank" rel="noopener">:last-of-type</a></td><td>p:last-of-type</td><td>选择属于其父元素的最后  &lt;p&gt;  元素的每个  &lt;p&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_only-of-type.asp" target="_blank" rel="noopener">:only-of-type</a></td><td>p:only-of-type</td><td>选择属于其父元素唯一的  &lt;p&gt;  元素的每个  &lt;p&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_only-child.asp" target="_blank" rel="noopener">:only-child</a></td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个  &lt;p&gt;  元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_nth-child.asp" target="_blank" rel="noopener">:nth-child(<em>n</em>)</a></td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_nth-last-child.asp" target="_blank" rel="noopener">:nth-last-child(<em>n</em>)</a></td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_nth-of-type.asp" target="_blank" rel="noopener">:nth-of-type(<em>n</em>)</a></td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp" target="_blank" rel="noopener">:nth-last-of-type(<em>n</em>)</a></td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_last-child.asp" target="_blank" rel="noopener">:last-child</a></td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 &lt;p&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_root.asp" target="_blank" rel="noopener">:root</a></td><td>:root</td><td>选择文档的根元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_empty.asp" target="_blank" rel="noopener">:empty</a></td><td>p:empty</td><td>选择没有子元素的每个 &lt;p&gt; 元素（包括文本节点）。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_target.asp" target="_blank" rel="noopener">:target</a></td><td>#news:target</td><td>选择当前活动的 #news 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_enabled.asp" target="_blank" rel="noopener">:enabled</a></td><td>input:enabled</td><td>选择每个启用的 &lt;input&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_disabled.asp" target="_blank" rel="noopener">:disabled</a></td><td>input:disabled</td><td>选择每个禁用的 &lt;input&gt; 元素</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_checked.asp" target="_blank" rel="noopener">:checked</a></td><td>input:checked</td><td>选择每个被选中的 &lt;input&gt; 元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_not.asp" target="_blank" rel="noopener">:not(<em>selector</em>)</a></td><td>:not(p)</td><td>选择非 &lt;p&gt; 元素的每个元素。</td><td>3</td></tr><tr><td><a href="http://www.w3school.com.cn/cssref/selector_selection.asp" target="_blank" rel="noopener">::selection</a></td><td>::selection</td><td>选择被用户选取的元素部分。</td><td>3</td></tr></tbody></table><p>一个有趣的练习网站： <a href="http://flukeout.github.io" target="_blank" rel="noopener">http://flukeout.github.io</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery基础知识</title>
      <link href="/2019/04/28/javascript/jquery-ji-chu/"/>
      <url>/2019/04/28/javascript/jquery-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery基础知识"><a href="#JQuery基础知识" class="headerlink" title="JQuery基础知识"></a>JQuery基础知识</h1><blockquote><p>来源：廖雪峰js教程 <a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">https://www.liaoxuefeng.com</a></p></blockquote><h3 id="jQuery能帮我们干这些事情："><a href="#jQuery能帮我们干这些事情：" class="headerlink" title="jQuery能帮我们干这些事情："></a>jQuery能帮我们干这些事情：</h3><ol><li>消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；</li><li>简洁的操作DOM的方法：写$(‘#test’)肯定比document.getElementById(‘test’)来得简洁；</li><li>轻松实现动画、修改CSS等各种操作。</li></ol><h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>\$是著名的jQuery符号。实际上，jQuery把所有功能全部封装在一个全局变量jQuery中，而\$也是一个合法的变量名，它是变量jQuery的别名：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery; <span class="comment">// jQuery(selector, context)</span></span><br><span class="line"><span class="built_in">window</span>.$; <span class="comment">// jQuery(selector, context)</span></span><br><span class="line">$ === jQuery; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span>($); <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure><p>\$本质上就是一个函数，但是函数也是对象，于是\$除了可以直接调用外，也可以有很多其他属性。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按ID查找</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#abc'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按Tag查找</span></span><br><span class="line"><span class="keyword">var</span> ps = $(<span class="string">'p'</span>); <span class="comment">// 返回所有&lt;p&gt;节点</span></span><br><span class="line">ps.length; <span class="comment">// 数一数页面有多少个&lt;p&gt;节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按Class查找</span></span><br><span class="line"><span class="keyword">var</span> a = $(<span class="string">'.red'</span>); <span class="comment">// 所有节点包含`class="red"`都将返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按属性查找</span></span><br><span class="line"><span class="keyword">var</span> email = $(<span class="string">'[name=email]'</span>); <span class="comment">// 找出&lt;??? name="email"&gt;</span></span><br><span class="line"><span class="keyword">var</span> passwordInput = $(<span class="string">'[type=password]'</span>); <span class="comment">// 找出&lt;??? type="password"&gt;</span></span><br><span class="line"><span class="keyword">var</span> a = $(<span class="string">'[items="A B"]'</span>); <span class="comment">// 找出&lt;??? items="A B"&gt;</span></span><br><span class="line"><span class="comment">//按属性查找还可以使用前缀查找或者后缀查找：</span></span><br><span class="line"><span class="keyword">var</span> icons = $(<span class="string">'[name^=icon]'</span>); <span class="comment">// 找出所有name属性值以icon开头的DOM</span></span><br><span class="line"><span class="comment">// 例如: name="icon-1", name="icon-2"</span></span><br><span class="line"><span class="keyword">var</span> names = $(<span class="string">'[name$=with]'</span>); <span class="comment">// 找出所有name属性值以with结尾的DOM</span></span><br><span class="line"><span class="comment">// 例如: name="startswith", name="endswith"</span></span><br><span class="line"><span class="keyword">var</span> icons = $(<span class="string">'[class^="icon-"]'</span>); <span class="comment">// 找出所有class包含至少一个以`icon-`开头的DOM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合查找</span></span><br><span class="line"><span class="keyword">var</span> emailInput = $(<span class="string">'input[name=email]'</span>);</span><br><span class="line"><span class="keyword">var</span> tr = $(<span class="string">'tr.red'</span>); <span class="comment">// 找出&lt;tr class="red ..."&gt;...&lt;/tr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项选择器</span></span><br><span class="line">$(<span class="string">'p,div'</span>); <span class="comment">// 把&lt;p&gt;和&lt;div&gt;都选出来</span></span><br><span class="line">$(<span class="string">'p.red,p.green'</span>); <span class="comment">// 把&lt;p class="red"&gt;和&lt;p class="green"&gt;都选出来</span></span><br></pre></td></tr></table></figure><p>jQuery的选择器不会返回undefined或者null, 如果无符合的对象，返回的jQuery对象是[]。</p><p>jQuery对象和DOM对象之间可以互相转化：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#abc'</span>); <span class="comment">// jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> divDom = div.get(<span class="number">0</span>); <span class="comment">// 假设存在div，获取第1个DOM元素</span></span><br><span class="line"><span class="keyword">var</span> another = $(divDom); <span class="comment">// 重新把DOM包装为jQuery对象</span></span><br></pre></td></tr></table></figure><h4 id="更高级的选择器"><a href="#更高级的选择器" class="headerlink" title="更高级的选择器"></a>更高级的选择器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"testing"</span>&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"lang"</span>&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"lang-javascript"</span>&gt;JavaScript&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li class="lang-python"&gt;Python&lt;/</span>li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"lang-lua"</span>&gt;Lua&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 层级选择器</span></span><br><span class="line"><span class="regexp">$('ul.lang li'); /</span><span class="regexp">/ 选出JavaScript、Python和Lua 3个节点</span></span><br><span class="line"><span class="regexp">$('ul.lang li.lang-javascript');</span></span><br><span class="line"><span class="regexp">$('div.testing li.lang-javascript');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子选择器 $('parent&gt;child')类似层级选择器，但是限定了层级关系必须是父子关系，就是&lt;child&gt;节点必须是&lt;parent&gt;节点的直属子节点。</span></span><br><span class="line"><span class="regexp">$('ul.lang&gt;li.lang-javascript'); /</span><span class="regexp">/ 可以选出[&lt;li class="lang-javascript"&gt;JavaScript&lt;/li&gt;]</span></span><br><span class="line"><span class="regexp">$('div.testing&gt;li.lang-javascript'); /</span><span class="regexp">/ [], 无法选出，因为&lt;div&gt;和&lt;li&gt;不构成父子关系</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 过滤器</span></span><br><span class="line"><span class="regexp">$('ul.lang li:first-child'); /</span><span class="regexp">/ 仅选出JavaScript</span></span><br><span class="line"><span class="regexp">$('ul.lang li:last-child'); /</span><span class="regexp">/ 仅选出Lua</span></span><br><span class="line"><span class="regexp">$('ul.lang li:nth-child(2)'); /</span><span class="regexp">/ 选出第N个元素，N从1开始</span></span><br><span class="line"><span class="regexp">$('ul.lang li:nth-child(even)'); /</span><span class="regexp">/ 选出序号为偶数的元素</span></span><br><span class="line"><span class="regexp">$('ul.lang li:nth-child(odd)'); /</span><span class="regexp">/ 选出序号为奇数的元素</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 查找和过滤</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 用find()从元素中查找</span></span><br><span class="line"><span class="regexp">var ul = $('ul.lang'); /</span><span class="regexp">/ 获得&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">var dy = ul.find('.dy'); /</span><span class="regexp">/ 获得JavaScript, Python, Scheme</span></span><br><span class="line"><span class="regexp">var swf = ul.find('#swift'); /</span><span class="regexp">/ 获得Swift</span></span><br><span class="line"><span class="regexp">var hsk = ul.find('[name=haskell]'); /</span><span class="regexp">/ 获得Haskell</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 用parent()向上查找</span></span><br><span class="line"><span class="regexp">var swf = $('#swift'); /</span><span class="regexp">/ 获得Swift</span></span><br><span class="line"><span class="regexp">var parent = swf.parent(); /</span><span class="regexp">/ 获得Swift的上层节点&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">var a = swf.parent('.red'); /</span><span class="regexp">/ 获得Swift的上层节点&lt;ul&gt;，同时传入过滤条件。如果ul不符合条件，返回空jQuery对象</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ next()和prev()向后向前查找</span></span><br><span class="line"><span class="regexp">var swift = $('#swift');</span></span><br><span class="line"><span class="regexp">swift.next(); /</span><span class="regexp">/ Scheme</span></span><br><span class="line"><span class="regexp">swift.next('[name=haskell]'); /</span><span class="regexp">/ 空的jQuery对象，因为Swift的下一个元素Scheme不符合条件[name=haskell]</span></span><br><span class="line"><span class="regexp">swift.prev(); /</span><span class="regexp">/ Python</span></span><br><span class="line"><span class="regexp">swift.prev('.dy'); /</span><span class="regexp">/ Python，因为Python同时符合过滤器条件.dy</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ filter()从中过滤</span></span><br><span class="line"><span class="regexp">var langs = $('ul.lang li'); /</span><span class="regexp">/ 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span><br><span class="line"><span class="regexp">var a = langs.filter('.dy'); /</span><span class="regexp">/ 拿到JavaScript, Python, Scheme</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 切片</span></span><br><span class="line"><span class="regexp">var langs = $('ul.lang li'); /</span><span class="regexp">/ 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span><br><span class="line"><span class="regexp">var js = langs.first(); /</span><span class="regexp">/ JavaScript，相当于$('ul.lang li:first-child')</span></span><br><span class="line"><span class="regexp">var haskell = langs.last(); /</span><span class="regexp">/ Haskell, 相当于$('ul.lang li:last-child')</span></span><br><span class="line"><span class="regexp">var sub = langs.slice(2, 4); /</span><span class="regexp">/ Swift, Scheme, 参数和数组的slice()方法一致</span></span><br></pre></td></tr></table></figure><h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改文本</span></span><br><span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).text(); <span class="comment">// 'Java &amp; JavaScript'</span></span><br><span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).text(<span class="string">'修改内容'</span>); <span class="comment">// 'Java &amp; JavaScript'</span></span><br><span class="line">$(<span class="string">'#test-ul li[name=book]'</span>).html(); <span class="comment">// 'Java &amp;amp; JavaScript'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改css</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>);</span><br><span class="line">div.css(<span class="string">'color'</span>); <span class="comment">// '#000033', 获取CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">'#336699'</span>); <span class="comment">// 设置CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">''</span>); <span class="comment">// 清除CSS属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改class</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>);</span><br><span class="line">div.hasClass(<span class="string">'highlight'</span>); <span class="comment">// false， class是否包含highlight</span></span><br><span class="line">div.addClass(<span class="string">'highlight'</span>); <span class="comment">// 添加highlight这个class</span></span><br><span class="line">div.removeClass(<span class="string">'highlight'</span>); <span class="comment">// 删除highlight这个class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示和隐藏DOM</span></span><br><span class="line"><span class="keyword">var</span> a = $(<span class="string">'a[target=_blank]'</span>);</span><br><span class="line">a.hide(); <span class="comment">// 隐藏</span></span><br><span class="line">a.show(); <span class="comment">// 显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取DOM信息</span></span><br><span class="line"><span class="comment">// 浏览器可视窗口大小:</span></span><br><span class="line">$(<span class="built_in">window</span>).width(); <span class="comment">// 800</span></span><br><span class="line">$(<span class="built_in">window</span>).height(); <span class="comment">// 600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML文档大小:</span></span><br><span class="line">$(<span class="built_in">document</span>).width(); <span class="comment">// 800</span></span><br><span class="line">$(<span class="built_in">document</span>).height(); <span class="comment">// 3500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个div的大小:</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>);</span><br><span class="line">div.width(); <span class="comment">// 600</span></span><br><span class="line">div.height(); <span class="comment">// 300</span></span><br><span class="line">div.width(<span class="number">400</span>); <span class="comment">// 设置CSS属性 width: 400px，是否生效要看CSS是否有效</span></span><br><span class="line">div.height(<span class="string">'200px'</span>); <span class="comment">// 设置CSS属性 height: 200px，是否生效要看CSS是否有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// attr()和removeAttr()方法用于操作DOM节点的属性</span></span><br><span class="line"><span class="comment">// &lt;div id="test-div" name="Test" start="1"&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>);</span><br><span class="line">div.attr(<span class="string">'data'</span>); <span class="comment">// undefined, 属性不存在</span></span><br><span class="line">div.attr(<span class="string">'name'</span>); <span class="comment">// 'Test'</span></span><br><span class="line">div.attr(<span class="string">'name'</span>, <span class="string">'Hello'</span>); <span class="comment">// div的name属性变为'Hello'</span></span><br><span class="line">div.removeAttr(<span class="string">'name'</span>); <span class="comment">// 删除name属性</span></span><br><span class="line">div.attr(<span class="string">'name'</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// prop()方法和attr()类似，但是HTML5规定有一种属性在DOM节点中可以没有值，只有出现与不出现两种，例如：</span></span><br><span class="line"><span class="comment">// &lt;input id="test-radio" type="radio" name="test" checked value="1"&gt;</span></span><br><span class="line"><span class="comment">// 对于checked，使用prop会更好。</span></span><br><span class="line"><span class="comment">// 判断是否被选中</span></span><br><span class="line"><span class="keyword">var</span> radio = $(<span class="string">'#test-radio'</span>);</span><br><span class="line">radio.is(<span class="string">':checked'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> select = $(<span class="string">'#test-select'</span>);</span><br><span class="line">select.is(<span class="string">':selected'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作表单</span></span><br><span class="line"><span class="comment">// 对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性：</span></span><br><span class="line">input.val(); <span class="comment">// 'test' 取值</span></span><br><span class="line">input.val(<span class="string">'abc@example.com'</span>); <span class="comment">// 赋值</span></span><br></pre></td></tr></table></figure><h3 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加DOM</span></span><br><span class="line">ul.append(<span class="string">'&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;'</span>);  <span class="comment">// 在ul里面添加li</span></span><br><span class="line"><span class="comment">// 同级节点可以用after()或者before()方法</span></span><br><span class="line">js.after(<span class="string">'&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;'</span>);  <span class="comment">// 在js元素后面添加Lua</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line">$(<span class="string">'#test-div&gt;ul&gt;li'</span>).remove(); <span class="comment">// 所有&lt;li&gt;全被删除</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取超链接的jQuery对象:</span></span><br><span class="line"><span class="keyword">var</span> a = $(<span class="string">'#test-link'</span>);</span><br><span class="line">a.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>on方法</strong>用来绑定一个事件，我们需要传入事件名称和对应的处理函数。</p><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>click: 鼠标单击时触发；<br>dblclick：鼠标双击时触发；<br>mouseenter：鼠标进入时触发；<br>mouseleave：鼠标移出时触发；<br>mousemove：鼠标在DOM内部移动时触发；<br>hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p>键盘事件仅作用在当前焦点的DOM上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。<br>keydown：键盘按下时触发；<br>keyup：键盘松开时触发；<br>keypress：按一次键后触发。</p><h4 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h4><p>focus：当DOM获得焦点时触发；<br>blur：当DOM失去焦点时触发；<br>change：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；<br>submit：当<code>&lt;form&gt;</code>提交时触发；<br>ready：当页面被载入并且DOM树完成初始化后触发。ready仅作用于document对象。</p><p>ready方法可以避免js在DOM未加载完毕之前执行相关绑定或方法。所以我们自己的初始化代码必须放到document对象的ready事件中，保证DOM已完成初始化。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用ready方法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// on('submit', function)也可以简化:</span></span><br><span class="line">    $(<span class="string">'#testForm).submit(function () &#123;</span></span><br><span class="line"><span class="string">        alert('</span>submit!<span class="string">');</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 甚至可以省略ready</span></span><br><span class="line"><span class="string">$(function () &#123;</span></span><br><span class="line"><span class="string">    // init...</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p><strong>可以反复绑定事件处理函数，它们会依次执行</strong></p><h4 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#testMouseMoveDiv'</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  <span class="comment">// e就是时间参数</span></span><br><span class="line">        $(<span class="string">'#testMouseMoveSpan'</span>).text(<span class="string">'pageX = '</span> + e.pageX + <span class="string">', pageY = '</span> + e.pageY);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个已被绑定的事件可以解除绑定，通过off('click', function)实现，function对象必须与绑定的对象为同一个对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">a.click(hello); <span class="comment">// 绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10秒钟后解除绑定:</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a.off(<span class="string">'click'</span>, hello);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要特别注意的是，下面这种写法是无效的,两个是不同的函数对象。</span></span><br><span class="line">a.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">a.off(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">a.off(<span class="string">'click'</span>) <span class="comment">// 一次性移除已绑定的click事件的所有处理函数</span></span><br><span class="line">a.off()  <span class="comment">// 移除所有类型的事件处理函数。</span></span><br></pre></td></tr></table></figure><p>取消绑定可以实现比如拦截表单提交等操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">form.off().submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  <span class="comment">// 移除表单所有事件，并绑定新的submit事件</span></span><br><span class="line">    e.preventDefault();  <span class="comment">// 通知 Web 浏览器不要执行与事件关联的默认动作</span></span><br><span class="line">    alert(form.serialize());  <span class="comment">// 打印表格信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事件触发条件"><a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件</h4><p>一个需要注意的问题是，事件的触发总是由用户操作引发的。如果用JavaScript代码去改动文本框的值，将不会触发change事件。</p><p>有些时候，我们希望用代码触发change事件，可以直接调用无参数的change()方法来触发该事件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = $(<span class="string">'#test-input'</span>);</span><br><span class="line">input.val(<span class="string">'change it!'</span>); <span class="comment">// 通过js修改不会触发change事件</span></span><br><span class="line">input.change(); <span class="comment">// 触发change事件</span></span><br></pre></td></tr></table></figure><h4 id="浏览器安全限制"><a href="#浏览器安全限制" class="headerlink" title="浏览器安全限制"></a>浏览器安全限制</h4><p>在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button1 = $(<span class="string">'#testPopupButton1'</span>);</span><br><span class="line"><span class="keyword">var</span> button2 = $(<span class="string">'#testPopupButton2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popupTestWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button1.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    popupTestWindow();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">button2.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不立刻执行popupTestWindow()，100毫秒后执行:</span></span><br><span class="line">    setTimeout(popupTestWindow, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当用户点击button1时，click事件被触发，由于popupTestWindow()在click事件处理函数内执行，这是浏览器允许的，而button2的click事件并未立刻执行popupTestWindow()，延迟执行的popupTestWindow()将被浏览器拦截。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>用JavaScript实现动画，原理非常简单：我们只需要以固定的时间间隔（例如，0.1秒），每次把DOM元素的CSS样式修改一点（例如，高宽各增加10%），看起来就像动画了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左上角</span></span><br><span class="line">div.hide(<span class="number">3000</span>); <span class="comment">// 在3秒钟内逐渐消失</span></span><br><span class="line">div.show(<span class="string">'slow'</span>); <span class="comment">// 在0.6秒钟内逐渐显示</span></span><br><span class="line">div.toggle(<span class="string">'slow'</span>)  <span class="comment">// 根据当前状态决定是show()还是hide()。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 垂直方向</span></span><br><span class="line">div.slideUp(<span class="number">3000</span>); <span class="comment">// 在3秒钟内逐渐向上消失</span></span><br><span class="line">div.slideDown(<span class="string">'slow'</span>)</span><br><span class="line">div.slideToggle(<span class="string">'slow'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淡入淡出</span></span><br><span class="line">div.fadeOut(<span class="string">'slow'</span>)</span><br><span class="line">div.fadeIn(<span class="string">'slow'</span>)</span><br><span class="line">div.fadeToggle(<span class="string">'slow'</span>)</span><br></pre></td></tr></table></figure><h4 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h4><p><strong>animate()</strong>可以实现任意动画效果，我们需要传入的参数就是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-animate'</span>);</span><br><span class="line">div.animate(&#123;</span><br><span class="line">    opacity: <span class="number">0.25</span>,</span><br><span class="line">    width: <span class="string">'256px'</span>,</span><br><span class="line">    height: <span class="string">'256px'</span></span><br><span class="line">&#125;, <span class="number">3000</span>); <span class="comment">// 在3秒钟内CSS过渡到设定值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// animate()还可以再传入一个函数，当动画结束时，该函数将被调用</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-animate'</span>);</span><br><span class="line">div.animate(&#123;</span><br><span class="line">    opacity: <span class="number">0.25</span>,</span><br><span class="line">    width: <span class="string">'256px'</span>,</span><br><span class="line">    height: <span class="string">'256px'</span></span><br><span class="line">&#125;, <span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'动画已结束'</span>);</span><br><span class="line">    <span class="comment">// 恢复至初始状态:</span></span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'opacity'</span>, <span class="string">'1.0'</span>).css(<span class="string">'width'</span>, <span class="string">'128px'</span>).css(<span class="string">'height'</span>, <span class="string">'128px'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="串行动画"><a href="#串行动画" class="headerlink" title="串行动画"></a>串行动画</h4><p>jQuery的动画效果还可以串行执行，通过delay()方法还可以实现暂停，这样，我们可以实现更复杂的动画效果，而代码却相当简单。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-animates'</span>);</span><br><span class="line"><span class="comment">// 动画效果：slideDown - 暂停 - 放大 - 暂停 - 缩小</span></span><br><span class="line">div.slideDown(<span class="number">2000</span>)</span><br><span class="line">   .delay(<span class="number">1000</span>)</span><br><span class="line">   .animate(&#123;</span><br><span class="line">       width: <span class="string">'256px'</span>,</span><br><span class="line">       height: <span class="string">'256px'</span></span><br><span class="line">   &#125;, <span class="number">2000</span>)</span><br><span class="line">   .delay(<span class="number">1000</span>)  <span class="comment">// 延迟1秒</span></span><br><span class="line">   .animate(&#123;</span><br><span class="line">       width: <span class="string">'128px'</span>,</span><br><span class="line">       height: <span class="string">'128px'</span></span><br><span class="line">   &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#panel"</span>).stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>语法: <code>$(selector).stop(stopAll,goToEnd);</code></p><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dashboard安装</title>
      <link href="/2019/04/28/linux/dashboard-an-zhuang/"/>
      <url>/2019/04/28/linux/dashboard-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Dashboard安装"><a href="#Dashboard安装" class="headerlink" title="Dashboard安装"></a>Dashboard安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改node为NodePort模式</span></span><br><span class="line">kubectl patch svc -n kube-system kubernetes-dashboard -p '&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务(得知dashboard运行在30972端口)</span></span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 输出 ---</span></span><br><span class="line">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP,9153/TCP   7h40m</span><br><span class="line">kubernetes-dashboard   NodePort    10.111.77.210   &lt;none&gt;        443:30972/TCP            3h42m</span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 输出 ---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看dashboard运行在哪个node(得知dashboard运行在192.168.20.4)</span></span><br><span class="line">kubectl get pods -A -o wide</span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 输出 ---</span></span><br><span class="line">NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE     IP             NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-system   coredns-fb8b8dccf-rn8kd                 1/1     Running   0          7h43m   10.244.0.2     master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   coredns-fb8b8dccf-slwr4                 1/1     Running   0          7h43m   10.244.0.3     master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-master                             1/1     Running   0          7h42m   192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-master                   1/1     Running   0          7h42m   192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-master          1/1     Running   0          7h42m   192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-l8c7c             1/1     Running   0          7h3m    192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-lcmxw             1/1     Running   1          6h50m   192.168.20.4   node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-flannel-ds-amd64-pqnln             1/1     Running   1          6h5m    192.168.20.3   node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-4kcqb                        1/1     Running   0          7h43m   192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-jcqjd                        1/1     Running   0          6h5m    192.168.20.3   node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-vm9sj                        1/1     Running   0          6h50m   192.168.20.4   node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-master                   1/1     Running   0          7h42m   192.168.20.5   master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kubernetes-dashboard-5f7b999d65-2ltmv   1/1     Running   0          3h45m   10.244.1.2     node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 输出 ---</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果无法变成Running状态，可以使用以下命令排错</span></span><br><span class="line">journalctl -f -u kubelet  # 只看当前的kubelet进程日志,要到dashboard所在的node执行</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 若提示拉取镜像失败，无法翻墙的可以使用以下方法预先拉取镜像</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 请在kubernetes-dashboard的节点上操作：</span></span></span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker tag mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker rmi  mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br></pre></td></tr></table></figure><p>根据上面的信息可以得知dashboard的ip和端口，使用<strong>火狐浏览器</strong>访问<a href="https://192.168.20.4:30972（必须使用**https**，所以会提示不安全，火狐浏览器可以添加例外，谷歌浏览器不行。）" target="_blank" rel="noopener">https://192.168.20.4:30972（必须使用**https**，所以会提示不安全，火狐浏览器可以添加例外，谷歌浏览器不行。）</a></p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555422013719.png" alt="登录dashboard"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建dashboard管理用户</span></span><br><span class="line">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定用户为集群管理用户</span></span><br><span class="line">kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成tocken</span></span><br><span class="line">kubectl describe secret -n kube-system dashboard-admin-token</span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 输出如下 ---</span></span><br><span class="line">Name:         dashboard-admin-token-pb78x</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: 166aeb8d-604e-11e9-80d6-080027d8332b</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tcGI3OHgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMTY2YWViOGQtNjA0ZS0xMWU5LTgwZDYtMDgwMDI3ZDgzMzJiIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.WYV8iBXsGikehSknd4QKbbwVSHn5K0NF1DYi4JHL-wyHtLusuEFeP89s19iC_yXu_5nOsC0h4E3Q19C7XfkGtm37WwMdsJqFjzL2VjVs5NaOUGAeXAVcuHdx0Hrzo3MCu6e1t27KWxGEFwEQv0FNhHwJ9pBmEkJz5fLyGzNOmJqYh2bifL4hrtbnCduWXR4wdnNwtGvcnafGsEvl-QkYpH1h5GRc9A2qZoSKJC90LW-kIRB_0elhwqCg-UM2a0b9cOlbgbZAEseIb3gSHpxLomkziHEjYadBA5bhmSdlArRGQs3DhMcp9pFWarXZEKR5wtxrRdam5mJykXnxA-qwNg</span><br><span class="line"><span class="meta">#</span><span class="bash"> ------</span></span><br></pre></td></tr></table></figure><p>使用生成的tocken就可以登录dashboard了。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555423252759.png" alt="dashboard概况"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> centos7部署k8s集群-kubeadm</title>
      <link href="/2019/04/28/linux/centos7-bu-shu-k8s-ji-qun-kubeadm/"/>
      <url>/2019/04/28/linux/centos7-bu-shu-k8s-ji-qun-kubeadm/</url>
      
        <content type="html"><![CDATA[<h2 id="centos7-部署-k8s-集群"><a href="#centos7-部署-k8s-集群" class="headerlink" title="centos7 部署 k8s 集群"></a>centos7 部署 k8s 集群</h2><h4 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h4><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a></p><p><strong>Master、Node节点都需要安装、配置Docker</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载原来的docker</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">sudo yum update -y &amp;&amp; sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加官方yum库</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装docker</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker版本</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机启动</span></span><br><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><p>或者使用脚本一键安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL "https://get.docker.com/" | sh</span><br><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><p><strong>修改docker cgroup驱动，与k8s一致，使用systemd</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改docker cgroup驱动：native.cgroupdriver=systemd</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": &#123;</span><br><span class="line">    "max-size": "100m"</span><br><span class="line">  &#125;,</span><br><span class="line">  "storage-driver": "overlay2",</span><br><span class="line">  "storage-opts": [</span><br><span class="line">    "overlay2.override_kernel_check=true"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启使配置生效</span><br></pre></td></tr></table></figure><h3 id="安装-kubelet-kubeadm-kubectl"><a href="#安装-kubelet-kubeadm-kubectl" class="headerlink" title="安装 kubelet kubeadm kubectl"></a>安装 kubelet kubeadm kubectl</h3><p><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">官方文档</a></p><p><strong>master、node节点都需要安装kubelet kubeadm kubectl。</strong></p><p><strong>安装kubernetes的时候，需要安装kubelet, kubeadm等包，但k8s官网给的yum源是packages.cloud.google.com，国内访问不了，此时我们可以使用阿里云的yum仓库镜像。</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭SElinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装kubelet kubeadm kubectl</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">systemctl enable --now kubelet  # 开机启动kubelet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos7用户还需要设置路由：</span></span><br><span class="line">yum install -y bridge-utils.x86_64</span><br><span class="line">modprobe  br_netfilter  # 加载br_netfilter模块，使用lsmod查看开启的模块</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 重新加载所有配置文件</span><br><span class="line"></span><br><span class="line">systemctl disable --now firewalld  # 关闭防火墙</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> k8s要求关闭swap</span></span><br><span class="line">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0  # 关闭swap</span><br><span class="line">sed -ri '/^[^#]*swap/s@^@#@' /etc/fstab  # 取消开机挂载swap</span><br></pre></td></tr></table></figure><p><strong>使用虚拟机的可以做完以上步骤后，进行克隆。实验环境为1 Master，2 Node</strong></p><h4 id="创建集群准备工作"><a href="#创建集群准备工作" class="headerlink" title="创建集群准备工作"></a>创建集群准备工作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Master端：</span></span><br><span class="line">kubeadm config images pull # 拉取集群所需镜像，这个需要翻墙</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 不能翻墙可以尝试以下办法 ---</span></span><br><span class="line">kubeadm config images list # 列出所需镜像</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据所需镜像名字先拉取国内资源</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker pull coredns/coredns:1.3.1  # 这个在mirrorgooglecontainers中没有</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改镜像tag</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-apiserver:v1.14.1 k8s.gcr.io/kube-apiserver:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-controller-manager:v1.14.1 k8s.gcr.io/kube-controller-manager:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-scheduler:v1.14.1 k8s.gcr.io/kube-scheduler:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag mirrorgooglecontainers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10</span><br><span class="line">docker tag coredns/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把所需的镜像下载好，init的时候就不会再拉镜像，由于无法连接google镜像库导致出错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原来的镜像</span></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker rmi coredns/coredns:1.3.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Node端：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据所需镜像名字先拉取国内资源</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改镜像tag</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原来的镜像</span></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --- 不能翻墙可以尝试使用 ---</span></span><br></pre></td></tr></table></figure><h3 id="使用kubeadm创建集群"><a href="#使用kubeadm创建集群" class="headerlink" title="使用kubeadm创建集群"></a>使用kubeadm创建集群</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一次初始化过程中/etc/kubernetes/admin.conf该文件存在，是空文件（我自己手多创建的），会报错：panic: runtime error: invalid memory address or nil pointer dereference</span></span><br><span class="line">ls /etc/kubernetes/admin.conf &amp;&amp; mv /etc/kubernetes/admin.conf&#123;,.bak&#125; # 移走备份</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化Master（Master需要至少2核）</span></span><br><span class="line">kubeadm init --apiserver-advertise-address 192.168.20.5 --pod-network-cidr 10.244.0.0/16 # --kubernetes-version 1.14.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> --apiserver-advertise-address 指定与其它节点通信的接口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --pod-network-cidr 指定pod网络子网，10.244.0.0与fannel网络对应</span></span><br></pre></td></tr></table></figure><ul><li>运行初始化，程序会检验环境一致性，可以根据实际错误提示进一步修复问题。</li><li>程序会访问<a href="https://dl.k8s.io/release/stable-1.txt获取最新的k8s版本，访问这个连接需要FQ，如果无法访问，则会使用kubeadm" target="_blank" rel="noopener">https://dl.k8s.io/release/stable-1.txt获取最新的k8s版本，访问这个连接需要FQ，如果无法访问，则会使用kubeadm</a> client的版本作为安装的版本号，使用kubeadm version查看client版本。也可以使用–kubernetes-version明确指定版本。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化结果：</span><br><span class="line">[init] Using Kubernetes version: v1.14.1</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Using existing etcd/ca certificate authority</span><br><span class="line">[certs] Using existing etcd/server certificate and key on disk</span><br><span class="line">[certs] Using existing etcd/peer certificate and key on disk</span><br><span class="line">[certs] Using existing etcd/healthcheck-client certificate and key on disk</span><br><span class="line">[certs] Using existing apiserver-etcd-client certificate and key on disk</span><br><span class="line">[certs] Using existing ca certificate authority</span><br><span class="line">[certs] Using existing apiserver certificate and key on disk</span><br><span class="line">[certs] Using existing apiserver-kubelet-client certificate and key on disk</span><br><span class="line">[certs] Using existing front-proxy-ca certificate authority</span><br><span class="line">[certs] Using existing front-proxy-client certificate and key on disk</span><br><span class="line">[certs] Using the existing &quot;sa&quot; key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 21.503375 seconds</span><br><span class="line">[upload-config] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.14&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --experimental-upload-certs</span><br><span class="line">[mark-control-plane] Marking the node master as control-plane by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class="line">[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: w2i0mh.5fxxz8vk5k8db0wq</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252</span><br></pre></td></tr></table></figure><h4 id="普通用户设置权限"><a href="#普通用户设置权限" class="headerlink" title="普通用户设置权限"></a>普通用户设置权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h4 id="应用flannel网络"><a href="#应用flannel网络" class="headerlink" title="应用flannel网络"></a>应用flannel网络</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master：</span></span><br><span class="line">cat ~/.kube/config</span><br><span class="line"><span class="meta">#</span><span class="bash"> node：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制master的config内容</span></span><br><span class="line">vim ~/.kube/config  # 把master的内容拷贝到node中，这样就可以在node节点中找到apiserver，使用kubectl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> master：</span></span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">vim kube-flannel.yml  # kube-flannel中添加args指定通信接口ip（可以使用正则），添加iface-regex参数，如下面的图所示（不需要使用引号引住！！！）。</span><br><span class="line">kubectl apply -f kube-flannel.yml  # 应用flannel网络</span><br><span class="line">ps -ef | grep flannel  # 确保master和node都有flannel进程，如果node节点没有flannel进程，可以尝试在node也按上述步骤apply一次。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555594899541.png" alt="修改kube-flannel.yml"></p><p><strong>这里需要指定master与节点之间通信的接口，如果有多网卡，默认是使用默认路由的网卡，所以必须要在此明确指定，否则会导致pod相互不通的问题。</strong></p><h3 id="node加入机器"><a href="#node加入机器" class="headerlink" title="node加入机器"></a>node加入机器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据master初始化的提示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> node1:</span></span><br><span class="line">kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252</span><br><span class="line"><span class="meta">#</span><span class="bash"> node2:</span></span><br><span class="line">kubeadm join 192.168.20.5:6443 --token w2i0mh.5fxxz8vk5k8db0wq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:65e82e987f50908f3640df7e05c7a91f390a02726c9142808faa739d4dc24252</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with &apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.14&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &apos;kubectl get nodes&apos; on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master：</span></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"><span class="meta">#</span><span class="bash"> ---输出信息（全部ready才是正常的）---</span></span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-fb8b8dccf-rn8kd          1/1     Running   0          170m</span><br><span class="line">kube-system   coredns-fb8b8dccf-slwr4          1/1     Running   0          170m</span><br><span class="line">kube-system   etcd-master                      1/1     Running   0          169m</span><br><span class="line">kube-system   kube-apiserver-master            1/1     Running   0          169m</span><br><span class="line">kube-system   kube-controller-manager-master   1/1     Running   0          169m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-l8c7c      1/1     Running   0          130m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-lcmxw      1/1     Running   1          117m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-pqnln      1/1     Running   1          72m</span><br><span class="line">kube-system   kube-proxy-4kcqb                 1/1     Running   0          170m</span><br><span class="line">kube-system   kube-proxy-jcqjd                 1/1     Running   0          72m</span><br><span class="line">kube-system   kube-proxy-vm9sj                 1/1     Running   0          117m</span><br><span class="line">kube-system   kube-scheduler-master            1/1     Running   0          169m</span><br><span class="line"><span class="meta">#</span><span class="bash"> ---输出信息---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> ---输出信息（全部ready才是正常的）---</span></span><br><span class="line">NAME     STATUS   ROLES    AGE    VERSION</span><br><span class="line">master   Ready    master   171m   v1.14.1</span><br><span class="line">node1    Ready    &lt;none&gt;   118m   v1.14.1</span><br><span class="line">node2    Ready    &lt;none&gt;   74m    v1.14.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> ---输出信息---</span></span><br></pre></td></tr></table></figure><p><strong>排错</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以在master和node节点上查看日志</span></span><br><span class="line">journalctl -f  # 当前输出日志</span><br><span class="line">journalctl -f -u kubelet  # 只看当前的kubelet进程日志</span><br></pre></td></tr></table></figure><p>kubectl命令补全</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source &lt;(kubectl completion zsh)  # zsh为我使用的shell，请根据实际填</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Mysql备份</title>
      <link href="/2019/04/28/linux/mysql-bei-fen/"/>
      <url>/2019/04/28/linux/mysql-bei-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql备份"><a href="#Mysql备份" class="headerlink" title="Mysql备份"></a>Mysql备份</h1><h4 id="使用mysqldump做逻辑备份"><a href="#使用mysqldump做逻辑备份" class="headerlink" title="使用mysqldump做逻辑备份"></a>使用mysqldump做逻辑备份</h4><hr><h4 id="备份基本命令"><a href="#备份基本命令" class="headerlink" title="备份基本命令"></a>备份基本命令</h4><p>mysqldump -u user -p DATABASES TABLE1 TABLE2… &gt; backup.sql</p><h5 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h5><ul><li>mysqldump 默认是锁表的，如果不需要锁表，请使用 <strong>–skip-lock-tables</strong></li><li>备份所有数据库使用 <strong>–all-databases</strong></li><li>排除数据表 <strong>–ignore-table=dbname.tablename</strong></li><li>备份前刷新binlog日志 <strong>–flush-logs</strong></li><li>只导出数据结构 <strong>–no-data, -d</strong></li><li>导出时，包括创建数据库语句 <strong>-B</strong> 或 <strong>–databases</strong></li></ul><h4 id="恢复命令"><a href="#恢复命令" class="headerlink" title="恢复命令"></a>恢复命令</h4><p>mysql -u user -p -e “source backup.sql” DATABASES</p><h5 id="选项说明-1"><a href="#选项说明-1" class="headerlink" title="选项说明"></a>选项说明</h5><ul><li>进入数据库执行命令　-e</li></ul><h3 id="通过binlog恢复"><a href="#通过binlog恢复" class="headerlink" title="通过binlog恢复"></a>通过binlog恢复</h3><p><strong>出现问题后先备份binlog，不要直接还原（会引入新binlog）</strong></p><p>恢复命令的语法格式：(<strong>binlog里面包含了所有的数据库的日志</strong>)<br>mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名</p><p>常用参数选项解释：<br>–start-position=875 起始pos点<br>–stop-position=954 结束pos点<br>–start-datetime=”2016-9-25 22:01:08” 起始时间点<br>–stop-datetime=”2019-9-25 22:09:46” 结束时间点<br>–database=zyyshop 指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志)</p><h5 id="如何查找pos-每个binlog都是独立的pos，对于多个binlog，可以使用时间恢复，但使用pos更精准"><a href="#如何查找pos-每个binlog都是独立的pos，对于多个binlog，可以使用时间恢复，但使用pos更精准" class="headerlink" title="如何查找pos(每个binlog都是独立的pos，对于多个binlog，可以使用时间恢复，但使用pos更精准)"></a>如何查找pos(每个binlog都是独立的pos，对于多个binlog，可以使用时间恢复，但使用pos更精准)</h5><ol><li>先查看配置，查找binlog文件位置：vim /etc/my.cnf</li><li>查看当前binlog位置：show master status;</li><li>根据特征SQL语句过滤binlog：<strong>mysql -e “show binlog events in ‘mysql-bin.000003’\G;” | grep ‘drop database xxxx’ -A20 -B 30</strong></li></ol><p><a href="https://www.cnblogs.com/kevingrace/p/5907254.html" target="_blank" rel="noopener">参考文章</a></p><h4 id="使用XtraBackup做物理备份"><a href="#使用XtraBackup做物理备份" class="headerlink" title="使用XtraBackup做物理备份"></a>使用XtraBackup做物理备份</h4><hr><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>依赖：yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL rsync perl perl-Digest-MD5</li><li>获取包：wget <a href="https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.13/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm" target="_blank" rel="noopener">https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.13/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm</a></li><li>安装：rpm -ivh percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm</li></ol><h4 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h4><p>命令：</p><ul><li>innobackupex –user=XXX –password=XXX  全量备份目录 –no-timestamp</li></ul><p>参数：</p><ul><li>不使用时间戳 –no-timestamp（默认会自动在备份目录下生成时间戳文件夹，格式如：2019-02-22_10-55-47）</li></ul><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>命令：</p><ul><li>innobackupex –user=XXX –password=XXX –incremental-basedir  增量备份目录 –incremental 全量备份目录  –no-timestamp</li></ul><h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><p>命令：</p><ul><li>service mysqld stop # 先停止mysql</li><li>mv /var/lib/mysql /var/lib/mysql.bak &amp;&amp; mkdir /var/lib/mysql  # 备份原来的mysql目录(视my.cnf配置文件而定)</li><li>cd /usr/bin/  # 可能没有命令环境变量，需要进入目录使用命令</li><li>innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/  # 先应用全量备份</li><li>innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/ –incremental-dir=/data/backup/2017-02-23/13/  # 添加增量备份，顺序不能错。</li><li>innobackupex –apply-log –redo-only /data/backup/2017-02-23/12/ –incremental-dir=/data/backup/2017-02-23/14/  # 添加增量备份，顺序不能错。</li><li>innobackupex –apply-log /data/backup/2017-02-23/12/  # 最后使用这个整合所有备份</li><li>innobackupex  –copy-back /data/backup/2017-02-23/12/  # 复制回mysql数据目录</li><li>chown -R mysql.mysql /var/lib/mysql  # 修改数据库权限</li><li>/etc/init.d/mysqld start  # 开启Mysql服务</li></ul><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><ul><li><p>恢复数据后mysql启动不了，提示Can’t open and lock privilege tables: Table ‘mysql.host’ doesn’t exist，使用如下命令就可以了：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_install_db</span><br></pre></td></tr></table></figure></li><li><p>恢复后的mysql忘记密码，在配置文件中加入skip-grant-tables=1 跳过权限验证。</p></li><li><p>在恢复的mysql数据目录中，有xtrabackup_binlog_pos_innodb文件记录着binlog文件和开始节点，后续再利用binlog恢复。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> centos7搭建Harbor企业级docker仓库</title>
      <link href="/2019/04/28/linux/centos7-da-jian-harbor-qi-ye-ji-docker-cang-ku/"/>
      <url>/2019/04/28/linux/centos7-da-jian-harbor-qi-ye-ji-docker-cang-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7搭建Harbor企业级docker仓库"><a href="#centos7搭建Harbor企业级docker仓库" class="headerlink" title="centos7搭建Harbor企业级docker仓库"></a>centos7搭建Harbor企业级docker仓库</h1><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL "https://get.docker.com/" | sh</span><br><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br><span class="line">yum install python-pip</span><br><span class="line">pip install --upgrade setuptools  # 可能由于setuptools版本过低报错</span><br><span class="line">pip install docker-compose  # 如果报错可以试试 --ignore-installed</span><br></pre></td></tr></table></figure><h3 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -P /usr/local/src/     https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-online-installer-v1.7.5.tgz  # 在线安装</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最新版本请查看https://github.com/goharbor/harbor/releases/</span></span><br><span class="line"></span><br><span class="line">cd /usr/local/src/</span><br><span class="line">tar zxf harbor-online-installer-v1.7.5.tgz  -C /usr/local/</span><br><span class="line">cd /usr/local/harbor/</span><br><span class="line">bash install.sh # 使用--with-clair添加镜像漏洞扫描功能</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/harbor/harbor.cfg  # harbor配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到以下项目并且修改</span></span><br><span class="line">hostname = test.com  # 修改访问域名，如果使用其它端口，请在后面添加端口号，如test.com:8080</span><br><span class="line"><span class="meta">#</span><span class="bash">邮箱配置（根据实际账号配置）</span></span><br><span class="line">email_server = smtp.qq.com</span><br><span class="line">email_server_port = 465</span><br><span class="line">email_username = test@qq.com</span><br><span class="line">email_password = 123456</span><br><span class="line">email_from = test@qq.com  # 经测试发现必须要和email_username相同才可以发邮件</span><br><span class="line">email_ssl = true  # 开启ssl保护，使用端口465，关闭使用端口25</span><br><span class="line"><span class="meta">#</span><span class="bash">禁止用户注册</span></span><br><span class="line">self_registration = off</span><br><span class="line"><span class="meta">#</span><span class="bash">设置只有管理员可以创建项目</span></span><br><span class="line">project_creation_restriction = adminonly</span><br><span class="line"><span class="meta">#</span><span class="bash">设置管理员密码</span></span><br><span class="line">harbor_admin_password = 123456</span><br></pre></td></tr></table></figure><h3 id="容器集群管理"><a href="#容器集群管理" class="headerlink" title="容器集群管理"></a>容器集群管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/harbor/</span><br><span class="line">docker-compose ps  # 查看harbor集群容器，安装后已经启动</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------- 控制 ----------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 必须要在/usr/<span class="built_in">local</span>/harbor/目录下，或者-f指定docker-compose.yml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Harbor</span></span><br><span class="line">docker-compose start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止Harbor</span></span><br><span class="line">docker-comose stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Harbor</span></span><br><span class="line">docker-compose restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除Harbor</span></span><br><span class="line">docker-compose down -v  # -v 参数移除vloume</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新创建并启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------- 控制 ----------</span></span><br></pre></td></tr></table></figure><h4 id="修改nginx端口（如有需要）"><a href="#修改nginx端口（如有需要）" class="headerlink" title="修改nginx端口（如有需要）"></a>修改nginx端口（如有需要）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/harbor/docker-compose.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把proxy下的80:80改为8080:80则为使用8080访问harbor</span></span><br><span class="line">docker-compose stop proxy  # proxy其实就是nginx</span><br><span class="line">docker-compose up -d proxy  # 重新开启nginx</span><br><span class="line">netstat -lntp # 查看本地打开端口，如果有docker-proxy为8080则修改成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有安全组防火墙，记得先放行对应端口</span></span><br></pre></td></tr></table></figure><h3 id="访问网页"><a href="#访问网页" class="headerlink" title="访问网页"></a>访问网页</h3><p>使用账号admin，默认密码Harbor12345，如果修改了配置文件的密码，则使用上面修改的密码。</p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555394389198.png" alt="登录界面"></p><ul><li>默认是所有人可以创建用户登录的，只是上面安装配置中禁止了用户注册。</li></ul><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555394437899.png" alt="功能面板"></p><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555394503239.png" alt="系统配置"></p><ul><li>系统配置中可以设置邮箱配置，认证配置、垃圾清理等，但是不可以设置web打开的端口。</li></ul><p><img src="https://raw.githubusercontent.com/FreezeJ/FreezeJ.github.io.static/master/1555394579735.png" alt="漏洞扫描功能"></p><ul><li>通过漏洞扫描，可以分析出镜像存在的一些漏洞缺陷编码，并且提供修复建议。</li></ul><h3 id="上传、下载镜像"><a href="#上传、下载镜像" class="headerlink" title="上传、下载镜像"></a>上传、下载镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 由于使用80端口需要备案，harbor页面已经修改为8080端口（注意修改harbor.cfg的hostname后需要重新执行install.sh）</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 <span class="string">"insecure-registries"</span>:[<span class="string">"test.com:8080"</span>] &#125;</span></span><br><span class="line">docker login test.com:8080  # 尝试登录</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile</span></span><br><span class="line">mkdir ~/test_harbor &amp;&amp; cd ~/test_harbor</span><br><span class="line">cat &lt;&lt; EOF &gt; Dockerfile</span><br><span class="line">FROM nginx:latest</span><br><span class="line">MAINTAINER test "test@qq.com"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">ENV LANG=C.UTF-8 TZ=Asia/Shanghai</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> build镜像</span></span><br><span class="line">docker build -t test.com:8080/library/nginx:latest .</span><br><span class="line"><span class="meta">#</span><span class="bash"> push镜像到远程仓库</span></span><br><span class="line">docker push test.com:8080/library/nginx:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库拉取镜像</span></span><br><span class="line">docker pull test.com:8080/library/nginx:latest</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pangguoping/p/7650014.html" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://blog.csdn.net/jessise_zhan/article/details/80130104" target="_blank" rel="noopener">为什么有了Docker registry还需要Harbor？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 阿里云磁盘分区与扩容</title>
      <link href="/2019/04/28/linux/a-li-yun-ci-pan-fen-qu-yu-kuo-rong/"/>
      <url>/2019/04/28/linux/a-li-yun-ci-pan-fen-qu-yu-kuo-rong/</url>
      
        <content type="html"><![CDATA[<h2 id="使用parted磁盘分区"><a href="#使用parted磁盘分区" class="headerlink" title="使用parted磁盘分区"></a>使用parted磁盘分区</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install parted</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一行执行：</span></span><br><span class="line">parted  /dev/vdb mklabel  GPT "YES"  mkpart "vdb1" "ext4"   "0" "100%" "I"  # 建议使用命令parted /dev/vdb分步执行</span><br><span class="line">mkfs.ext4 /dev/vdb1 &gt; /dev/null  # ext4文件系统</span><br><span class="line">tune2fs -c -1 -i -1  /dev/vdb1  &gt; /dev/null  # 定义自检周期,-1表示关闭自检</span><br><span class="line">mkdir -p /data/</span><br><span class="line">mount /dev/vdb1 /data  # 挂载到目录</span><br><span class="line">blkid | awk /vdb1/'&#123;print $2" /data ext4 defaults 0 0"&#125;' &gt;&gt; /etc/fstab  # 添加开机启动挂载</span><br></pre></td></tr></table></figure><h2 id="阿里云数据盘扩容"><a href="#阿里云数据盘扩容" class="headerlink" title="阿里云数据盘扩容"></a>阿里云数据盘扩容</h2><p>yum install -y lsof</p><p>lsof /data  # 检查磁盘被什么程序占用</p><p>umount /data/  # 卸载磁盘</p><p>parted /dev/vdb “p” “F” “rm 1” “unit s” “mkpart vdb1 ext4 0 100%” “Yes” “I” # CentOS</p><p>parted /dev/vdb “rm 1” “mkpart vdb1 ext4 0 100%” “Yes” “I”   # debian</p><p>parted /dev/vdb</p><p>p<br>Warning: Not all of the space available to /dev/vdb appears to be used, you can fix the GPT to use all of the space (an extra 104857600 blocks) or continue with the current setting?<br>Fix/Ignore? F  # 通常检测到磁盘大写变化才会有这个提示，如果没有可能需要重启！<br>rm 1<br>unit s<br>mkpart vdb1 ext4 0 100% # yes<br>I<br>quit</p><p>e2fsck -f /dev/vdb1<br>resize2fs /dev/vdb1<br>mount  /dev/vdb1 /data/</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> python面向对象概述</title>
      <link href="/2019/04/28/python/python-mian-xiang-dui-xiang-gai-shu/"/>
      <url>/2019/04/28/python/python-mian-xiang-dui-xiang-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程概述"><a href="#面向对象编程概述" class="headerlink" title="面向对象编程概述"></a>面向对象编程概述</h1><p>对象具有以下特征：</p><ol><li>万物皆对象</li><li>每个对象唯一</li><li>对象具有属性和行为</li><li>对象具有状态（属性的取值）</li><li>对象分为类对象和实例对象两大类</li></ol><p>面向对象编程的步骤：</p><ol><li>抽象出类对象</li><li>抽象出类对象的属性</li><li>抽象出类对象的方法</li><li>根基类对象创建实例对象</li><li>通过实例对象访问属性和方法</li></ol><p>Python是动态语言，所以可以对类动态地绑定类方法，在实例对象创建之后，也可以对其动态地绑定实例方法。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态绑定方法</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_name</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">cat = Animal(<span class="string">'cat'</span>)</span><br><span class="line">dog.say_name = MethodType(say_name, dog)  <span class="comment"># 动态绑定实例方法</span></span><br><span class="line">Animal.say_name = say_name  <span class="comment"># 动态绑定类方法</span></span><br><span class="line">dog.say_name()</span><br><span class="line">cat.say_name()</span><br></pre></td></tr></table></figure></p><p><strong>在类对象中定义方法的几种方式。</strong></p><ol><li><p>静态方法使用@staticmethod装饰，只是一个普通的函数，便于管理。</p></li><li><p>类方法使用@classmethod装饰，需要传入形参cls。</p></li><li>实例方法不需要使用装饰器，需要传入形参self。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态方法、类方法、实例方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'hi'</span>)</span><br><span class="line">        cls.say_hello()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        self.say_hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">dog.say_hello()</span><br><span class="line">dog.say_hi()</span><br><span class="line">dog.say_name()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> python类属性和方法的访问控制</title>
      <link href="/2019/04/28/python/python-lei-shu-xing-he-fang-fa-de-fang-wen-kong-zhi/"/>
      <url>/2019/04/28/python/python-lei-shu-xing-he-fang-fa-de-fang-wen-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="类属性和方法的访问控制"><a href="#类属性和方法的访问控制" class="headerlink" title="类属性和方法的访问控制"></a>类属性和方法的访问控制</h1><p>控制类对象的属性和方法在类对象外部是否可以直接访问。<br>在属性或方法前加两个下划线__，那么这个属性就不能从外部访问。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私有变量和私有方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    __qq = <span class="number">123123</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__print_qq</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__qq)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_qq</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__qq)</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">dog.print_qq()  <span class="comment"># 可以输出</span></span><br><span class="line">dog.__print_qq()  <span class="comment"># AttributeError: 'Animal' object has no attribute '__print_qq'</span></span><br><span class="line">dog.__qq()  <span class="comment"># AttributeError: 'Animal' object has no attribute '__qq'</span></span><br></pre></td></tr></table></figure><p>之所以不能在类对象的外部直接访问以双划线开头的属性和方法，是因为python解析器对外把属性或方法__xxx改成了另外一个名字：<strong>_类名__xxx</strong></p><p>而在外部动态绑定一个__开头的属性或方法，与在类中定义的是不同的，不会被python解析器转换，可以直接调用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在外部绑定__属性，不会转换</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    __qq = <span class="number">123123</span></span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">dog.__ww = <span class="number">456456</span></span><br><span class="line">print(dog.__ww)  <span class="comment"># 可以输出</span></span><br><span class="line">print(dog.__qq)  <span class="comment"># AttributeError: 'Animal' object has no attribute '__qq'</span></span><br></pre></td></tr></table></figure><p> _xx 以单下划线开头的表示的是<strong>protected</strong>类型的变量。即保护类型只能允许其本身与子类进行访问，也表明最好不要通过外部访问。</p><p>若内部变量标示，如： 当使用“from M import”时，不会将以一个下划线开头的对象引入 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> python封装、继承和多态</title>
      <link href="/2019/04/28/python/python-feng-zhuang-ji-cheng-he-duo-tai/"/>
      <url>/2019/04/28/python/python-feng-zhuang-ji-cheng-he-duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="封装、继承和多态"><a href="#封装、继承和多态" class="headerlink" title="封装、继承和多态"></a>封装、继承和多态</h1><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装的两方面含义：</p><ol><li>将数据（属性）和行为（方法）包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂程度。</li><li>在类对象的内部通过访问控制把某些属性和方法隐藏起来，不允许类对象的外部直接访问，而是在类对象的内部对外提供公开的接口方法（例如getter和setter）以访问隐藏的信息。这样，就对隐藏的信息进行了保护。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__score = <span class="number">0</span>  <span class="comment"># 把内部属性隐藏起来，不允许直接访问</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__score)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span>  <span class="comment"># 在方法内部对属性进行操作。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">100</span> &gt;= score &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__score = score</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'输出数值错误！'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Student()</span><br><span class="line">xiaoming.set_score(<span class="number">60</span>)  <span class="comment"># 在类对象的外部调用方法。</span></span><br><span class="line">xiaoming.get_score()</span><br><span class="line">xiaoming.set_score(<span class="number">85</span>)</span><br><span class="line">xiaoming.get_score()</span><br></pre></td></tr></table></figure><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是实现代码复用的重要手段。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s drink water'</span> % self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s eat some thing'</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span>  <span class="comment"># 继承Animal的属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s swim'</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span><span class="comment"># 继承Animal的属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s fly'</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Dog(<span class="string">'dog'</span>)</span><br><span class="line">bird = Bird(<span class="string">'bird'</span>)</span><br><span class="line">dog.drink()</span><br><span class="line">bird.drink()</span><br><span class="line">dog.swim()</span><br><span class="line">bird.fly()</span><br></pre></td></tr></table></figure><p>Python中的所有类对象都继承自一个统一的基类：object。</p><p>子类只有一个直接父类时，称为==单继承==。子类有多个直接父类时，称为==多继承==。</p><p>子类会继承所有父类（包括直接父类和所有间接父类）的所有属性和方法。</p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>在子类中定义与父类同名的属性或方法，就可以重写该属性或方法。</p><p>子类重写父类方法后，通过子类或其实例对象只能调用子类中重写后的方法，而无法调用父类中被重写分方法。</p><p>子类可以通过<strong>super().xxx()</strong>调用父类中的方法。</p><p>==Python3.x 和 Python2.x 的一个区别是: Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx :==</p><p>Python3.x 实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        super().add(x)</span><br></pre></td></tr></table></figure><p>Python2.x 实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>   <span class="comment"># Python2.x 记得继承 object</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        super(B, self).add(x)</span><br></pre></td></tr></table></figure><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>简单的说，多态就是“具有多种形态”。</p><p>多态可以理解为同样一件事情，不同的人做，会有不同的效果。</p><p>一个方法，传递不同的实例对象，执行对应实例的不同方法，产生不同的效果。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Animal'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">' eat'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Dog'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">' bark'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Bird'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">' fly'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animal_eat</span><span class="params">(animal)</span>:</span>  <span class="comment"># 实现多态的函数</span></span><br><span class="line">    animal.eat()</span><br><span class="line"></span><br><span class="line">animal = Animal()</span><br><span class="line">dog = Dog()</span><br><span class="line">bird = Bird()</span><br><span class="line">animal_eat(animal)</span><br><span class="line">animal_eat(dog)</span><br><span class="line">animal_eat(bird)</span><br></pre></td></tr></table></figure><p>python是动态语言，在调用函数时不会检查参数的类型，从而导致与静态语言（如Java）的多态是有区别的。对于静态语言，实现多态有三个必要的条件：</p><ol><li>继承</li><li>重写</li><li>父类类型的变量引用父类或子类类型的实例对象</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> python调用C动态链接库</title>
      <link href="/2019/04/28/python/python-diao-yong-c-dong-tai-lian-jie-ku/"/>
      <url>/2019/04/28/python/python-diao-yong-c-dong-tai-lian-jie-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="python调用C动态链接库"><a href="#python调用C动态链接库" class="headerlink" title="python调用C动态链接库"></a>python调用C动态链接库</h1><h2 id="c-dll-c"><a href="#c-dll-c" class="headerlink" title="c_dll.c"></a>c_dll.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;=num; i++)&#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C从1到%d累加的计算结果为%ld"</span>,num,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译C文件，生成so文件：</p><p>==gcc c_dll.c -shared -o c_dll.so -fPIC==</p><h2 id="add-py"><a href="#add-py" class="headerlink" title="add.py"></a>add.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! coding:utf-8</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python调用C动态链接库处理计算密集操作。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input(<span class="string">"请输入整数值:"</span>))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    result = cdll.LoadLibrary(<span class="string">"./c_dll.so"</span>)   <span class="comment"># 这里调用的是C源码编译后生成的动态链接库</span></span><br><span class="line">    print(dir(result.my_add))</span><br><span class="line">    result.my_add(num)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    print(<span class="string">"总共用时%s"</span>%(end_time-start_time))</span><br><span class="line">    p_start_time = time.time()</span><br><span class="line">    p_result = sum(xrange(num+<span class="number">1</span>))</span><br><span class="line">    p_end_time = time.time()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">20</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Python从1到%s累加的计算结果为%s'</span>%(num,p_result)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'总共用时%s'</span>%(p_end_time-p_start_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python c_add.py</span><br><span class="line">请输入整数值:1000000000</span><br><span class="line">C语言从1到1000000000累加的计算结果为500000000500000000</span><br><span class="line">总共用时3.15723800659</span><br><span class="line">--------------------</span><br><span class="line">P从1到1000000000累加的计算结果为500000000500000000</span><br><span class="line">总共用时11.5007269382</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRO方法解析顺序</title>
      <link href="/2019/04/28/python/mro-fang-fa-jie-xi-shun-xu/"/>
      <url>/2019/04/28/python/mro-fang-fa-jie-xi-shun-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="MRO-方法解析顺序"><a href="#MRO-方法解析顺序" class="headerlink" title="MRO 方法解析顺序"></a>MRO 方法解析顺序</h1><p>MRO的全称是Method Resolution Order（方法解析顺序），它指的是一颗类继承树，==当调用最底层类对象所对应实例对象的方法时，Python解析器在类继承树上搜索方法的顺序。==</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MRO 方法解析顺序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'C hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.say_hi()  <span class="comment"># B hi!</span></span><br><span class="line">print(D.mro())</span><br><span class="line"><span class="comment"># (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"></span><br><span class="line">print(D.__mro__)</span><br><span class="line"><span class="comment"># [&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;]</span></span><br></pre></td></tr></table></figure><p>可以通过类对象.mro()或者特殊方法__mro__来查看类对象的方法解析顺序。</p><p>直接使用super()方法来调用父类的方法时，也遵循mro。但是可以给super()方法传递参数，从而调用指定父类的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># super() 与 MRO</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'C hi!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(B, self).say_hi()  <span class="comment"># 调用MRO中B后面那个类的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.say_hi()  <span class="comment"># C hi!</span></span><br><span class="line">print(D.mro())</span><br><span class="line"><span class="comment"># (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python特殊方法</title>
      <link href="/2019/04/28/python/python-te-shu-fang-fa/"/>
      <url>/2019/04/28/python/python-te-shu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-特殊方法"><a href="#Python-特殊方法" class="headerlink" title="Python 特殊方法"></a>Python 特殊方法</h1><p>以双下划线开头和结尾的方法称为特殊方法，__xxxx__。</p><p>在定义类对象时，经常会重写一个或多个特殊方法，例如__init__。通常特殊方法都是自动调用的。</p><hr><h2 id="dict-获取对象信息"><a href="#dict-获取对象信息" class="headerlink" title="__dict__ 获取对象信息"></a>__dict__ 获取对象信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __dict__  查看对象信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Animal'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'eat'</span>)</span><br><span class="line">animal = Animal()</span><br><span class="line">print(Animal.__dict__)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    '__module__': '__main__',</span></span><br><span class="line"><span class="string">    '__init__': &lt;function Animal.__init__ at 0x000001CE58A28D90&gt;, </span></span><br><span class="line"><span class="string">    'eat': &lt;function Animal.eat at 0x000001CE58A28E18&gt;, </span></span><br><span class="line"><span class="string">    '__dict__': &lt;attribute '__dict__' of 'Animal' objects&gt;, </span></span><br><span class="line"><span class="string">    '__weakref__': &lt;attribute '__weakref__' of 'Animal' objects&gt;,</span></span><br><span class="line"><span class="string">    '__doc__': None</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(animal.__dict__)</span><br><span class="line"><span class="comment"># &#123;'name': 'Animal'&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="len-获取实例对象长度"><a href="#len-获取实例对象长度" class="headerlink" title="__len__ 获取实例对象长度"></a>__len__ 获取实例对象长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __len__ 返回对象长度</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.name)</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">elephant = Animal(<span class="string">'elephant'</span>)</span><br><span class="line">print(len(dog))  <span class="comment"># 3</span></span><br><span class="line">print(len(elephant))  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><hr><h2 id="iter-和-next-使实例对象可迭代"><a href="#iter-和-next-使实例对象可迭代" class="headerlink" title="__iter__ 和 __next__ 使实例对象可迭代"></a>__iter__ 和 __next__ 使实例对象可迭代</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __iter__ 和 __next__ 使实例对象可迭代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.book = [<span class="string">'Math'</span>,<span class="string">'English'</span>,<span class="string">'Chinese'</span>,<span class="string">'Physical'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.book_list_len = len(self.book)</span><br><span class="line">        <span class="keyword">return</span> self  <span class="comment"># 通常返回的是self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.count &lt; self.book_list_len:</span><br><span class="line">            book_name = self.book[self.count]</span><br><span class="line">            self.count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> book_name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration  <span class="comment"># 停止迭代</span></span><br><span class="line">xiaoming = Student()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xiaoming:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><hr><h2 id="add-运算符重载"><a href="#add-运算符重载" class="headerlink" title="__add__ 运算符重载"></a>__add__ 运算符重载</h2><p>算术运算符可以用于自定义类对象的实例对象，必须在自定义类对象中实现标准算术运算符对应的以下特殊方法：</p><ol><li>+对应的特殊方法是__add__()和__radd__();</li><li>-对应的特殊方法是__sub__()和__rsub__();</li><li>*对应的特殊方法是__mul__()和__rmul__();</li><li>/对应的特殊方法是__truediv__()和__rtruediv__();</li><li>//对应的特殊方法是__floordiv__()和__rfloordiv__()</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例对象实现加法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span>  <span class="comment"># other指的是加号右边的对象</span></span><br><span class="line">        <span class="keyword">return</span> self.data + other.data</span><br><span class="line">a = Myclass(<span class="number">10</span>)</span><br><span class="line">b = Myclass(<span class="number">20</span>)</span><br><span class="line">print(a + b)</span><br></pre></td></tr></table></figure><hr><h2 id="str-和-repr-输出字符"><a href="#str-和-repr-输出字符" class="headerlink" title="__str__和__repr__ 输出字符"></a>__str__和__repr__ 输出字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __str__ 和 __repr__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"></span><br><span class="line">a = Myclass(<span class="string">'123'</span>)</span><br><span class="line">print(a)  <span class="comment"># 123</span></span><br><span class="line">print(str(a))  <span class="comment"># 123</span></span><br><span class="line">print(repr(a))  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure><p>str()和repr()都返回对象字符串，其区别在于：</p><ol><li>str()是给用户看的，显示更加友好。</li><li>repr()是给程序开发者看的，为调试服务的。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="string">'Hello!\nWorld'</span>)</span><br><span class="line"><span class="string">'Hello!\nWorld'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(<span class="string">'Hello!\nWorld'</span>))</span><br><span class="line">Hello!</span><br><span class="line">World</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(<span class="string">'Hello!\nWorld'</span>)</span><br><span class="line"><span class="string">"'Hello!\\nWorld'"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(repr(<span class="string">'Hello!\nWorld'</span>))</span><br><span class="line"><span class="string">'Hello!\nWorld'</span></span><br></pre></td></tr></table></figure><h2 id="new-创建实例方法"><a href="#new-创建实例方法" class="headerlink" title="__new__ 创建实例方法"></a>__new__ 创建实例方法</h2><p>当使用“类名（实参）”创建实例对象时，python解析器的主要处理过程包括：</p><ol><li>调用特殊方法__new__()创建实例对象。</li><li>调用特殊方法__init__()对创建的实例对象进行初始化。</li></ol><p>__init__中接收的self其实就是__new__中返回的对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __new__ 创建实例调用方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        new_object = object.__new__(cls)</span><br><span class="line">        print(<span class="string">'New object id is %s'</span> % id(new_object))</span><br><span class="line">        <span class="keyword">return</span> new_object</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'Init object id is %s'</span> % id(self))</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">New object id is 2650305182240</span></span><br><span class="line"><span class="string">Init object id is 2650305182240</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h2 id="del-对象删除方法"><a href="#del-对象删除方法" class="headerlink" title="__del__ 对象删除方法"></a>__del__ 对象删除方法</h2><p>可以定义__del__来执行当对象被删除时所需的操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __del__ 删除方法</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s对象被删除！'</span> % self.name)</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">print(dog.name)</span><br><span class="line">print(<span class="string">'dog对象会在3秒后被删除'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 程序结束，必定会删除对象</span></span><br></pre></td></tr></table></figure><p>==当引用计数器为0时，对象不会立即被销毁（垃圾回收），所以__del__执行的时间也是不确定的。==</p><hr><h2 id="getattr-获取对象属性或方法"><a href="#getattr-获取对象属性或方法" class="headerlink" title="__getattr__ 获取对象属性或方法"></a>__getattr__ 获取对象属性或方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __getattr__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">'name'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.name</span><br><span class="line">        <span class="keyword">elif</span> item == <span class="string">'say_name'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.say_hi</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'No attribute "%s"'</span> % item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(<span class="string">'Hi %s!'</span> % value)</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'dog'</span>)</span><br><span class="line">print(dog.name)  <span class="comment"># dog</span></span><br><span class="line">dog.say_hi(<span class="string">'cat'</span>)  <span class="comment"># Hi cat!</span></span><br><span class="line">print(dog.age)  <span class="comment"># AttributeError: No attribute "age"</span></span><br></pre></td></tr></table></figure><hr><h2 id="getitem-、-setitem-、-deltitem-索引设置"><a href="#getitem-、-setitem-、-deltitem-索引设置" class="headerlink" title="__getitem__、__setitem__、__deltitem__ 索引设置"></a>__getitem__、__setitem__、__deltitem__ 索引设置</h2><p>使实例对象实现像列表或者字典索引操作的三个方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __getitem__、__setitem__、__delitem__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data.get(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.data[key] = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.data[key]</span><br><span class="line">dog = Animal()</span><br><span class="line">dog[<span class="string">'name'</span>] = <span class="string">'dog'</span></span><br><span class="line">print(dog[<span class="string">'name'</span>])</span><br><span class="line"><span class="keyword">del</span> dog[<span class="string">'name'</span>]</span><br><span class="line">print(dog[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure><hr><h2 id="call-函数调用"><a href="#call-函数调用" class="headerlink" title="__call__ 函数调用"></a>__call__ 函数调用</h2><p>使实例对象可以像函数一样被调用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __call__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(args)</span><br><span class="line">        print(kwargs)</span><br><span class="line">dog = Animal()</span><br><span class="line">dog(<span class="number">18</span>, <span class="string">'yellow'</span>, name=<span class="string">'dog'</span>)</span><br><span class="line">print(callable(dog))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">(18, 'yellow')</span></span><br><span class="line"><span class="string">&#123;'name': 'dog'&#125;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>==可以通过函数callable()来判断对象是否可以被调用。==</p><hr><h2 id="doc-文档字符串"><a href="#doc-文档字符串" class="headerlink" title="__doc__ 文档字符串"></a>__doc__ 文档字符串</h2><p>与函数的文档字符串类似，类对象的第一行字符串表示文档字符串。它是对类对象的功能的简要描述。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __call__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''这是一个动物类'''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dog = Animal()</span><br><span class="line">print(Animal.__doc__)</span><br><span class="line">print(dog.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">这是一个动物类</span></span><br><span class="line"><span class="string">这是一个动物类</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h2 id="slots-限制实例对象属性或方法"><a href="#slots-限制实例对象属性或方法" class="headerlink" title="__slots__ 限制实例对象属性或方法"></a>__slots__ 限制实例对象属性或方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __slots__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'animal'</span></span><br><span class="line">    __slots__ = (<span class="string">'age'</span>, <span class="string">'eat'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">dog = Animal()</span><br><span class="line">print(dog.name)  <span class="comment"># animal</span></span><br><span class="line">dog.age = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'%s eat!'</span> % self.name)</span><br><span class="line">Animal.eat = eat</span><br><span class="line">dog.eat()  <span class="comment"># animal eat!</span></span><br><span class="line">Animal.color = <span class="string">'withe'</span>  <span class="comment"># 对于类对象没有影响</span></span><br><span class="line">dog.color = <span class="string">'withe'</span>  <span class="comment"># AttributeError: 'Animal' object has no attribute 'color'</span></span><br></pre></td></tr></table></figure><p>__slots__对于子类的实例对象是不生效的，如果子类也有__slots__，那么子类的对象可用实例属性或方法则为父类__slots__加子类__slots__。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pthon小知识点</title>
      <link href="/2019/04/28/python/python-xiao-zhi-shi-dian/"/>
      <url>/2019/04/28/python/python-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p>issubclass() 用于判断两个类对象之间的关系（是否有继承关系）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># issubclass()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(issubclass(B, A))  <span class="comment"># True</span></span><br><span class="line">print(issubclass(B, C))  <span class="comment"># False</span></span><br><span class="line">print(issubclass(B, (A, C)))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><hr><p>isinstance() 用于判断实例对象与类对象的关系（是否有创造关系），</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># isinstance()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = B()</span><br><span class="line">c = C()</span><br><span class="line">print(isinstance(a, A))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(b, A))  <span class="comment"># True  包括继承关系产生的实例对象</span></span><br><span class="line">print(isinstance(c, A))  <span class="comment"># False</span></span><br><span class="line">print(isinstance(c, (A, C)))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance() 可以用于判断变量的类型</span></span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="string">'123'</span></span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">2</span>, <span class="number">3</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(isinstance(a, int))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(b, str))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(c, list))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(d, dict))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><hr><p>type() 用于获取对象的类型。类对象的类型是type</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(type(A))  <span class="comment"># &lt;class 'type'&gt;</span></span><br></pre></td></tr></table></figure><hr><p>可以使用运算符==判断某个对象的类型。对于基本数据类型，可以直接使用其类名；如果不是基本数据类型，需要使用标准库types中的定义的变量。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断非基本数据类型</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type(say_hi) == types.FunctionType:  <span class="comment"># 判断函数</span></span><br><span class="line">    print(<span class="string">'This is a function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type(<span class="keyword">print</span>) == types.BuiltinFunctionType:  <span class="comment"># 判断内置函数</span></span><br><span class="line">    print(<span class="string">'This is a built-in-function'</span>)</span><br></pre></td></tr></table></figure><hr><p>查看某个对象的引用sys.getrefcount()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象引用计数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 引用计数加一的4中情况</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 第一个引用</span></span><br><span class="line">b = [a, <span class="number">4</span>]  <span class="comment"># 第二个引用</span></span><br><span class="line">c = a <span class="comment"># 第三个引用</span></span><br><span class="line">print(sys.getrefcount(a))  <span class="comment"># 第四个引用（作为实参）</span></span><br><span class="line"><span class="comment"># 当函数执行完后，a的引用计数自动减一</span></span><br></pre></td></tr></table></figure><hr><p>pprint模块中的pprint可以使字典打印更加美观。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">pprint.pprint(Animal.__dict__)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">mappingproxy(&#123;'__dict__': &lt;attribute '__dict__' of 'Animal' objects&gt;,</span></span><br><span class="line"><span class="string">              '__doc__': None,</span></span><br><span class="line"><span class="string">              '__module__': '__main__',</span></span><br><span class="line"><span class="string">              '__weakref__': &lt;attribute '__weakref__' of 'Animal' objects&gt;&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><p>列表使用insert插入元素到某个索引，可以使用del 来直接删除某个索引元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.insert(<span class="number">1</span>, <span class="number">9</span>)  <span class="comment"># 在索引1中插入元素9，后面元素往后挪一位</span></span><br><span class="line">print(a)  <span class="comment"># [1, 9, 2, 3]</span></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]  <span class="comment"># 删除索引2的元素，后面元素往前挪一位</span></span><br><span class="line">print(a)  <span class="comment"># [1, 9, 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pthon反射</title>
      <link href="/2019/04/28/python/python-fan-she/"/>
      <url>/2019/04/28/python/python-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Python反射"><a href="#Python反射" class="headerlink" title="Python反射"></a>Python反射</h1><p>所谓“反射”，指的是以字符串的形式来操作（包括：增删改查）对象的属性和方法 。</p><p>用于“反射”的内置函数有以下四个：</p><ol><li>hasattr</li><li>getattr</li><li>setattr</li><li>delattr</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反射的四个内置方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'animal'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s eat'</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Animal()</span><br><span class="line">print(hasattr(dog, <span class="string">'name'</span>))  <span class="comment"># True</span></span><br><span class="line">print(getattr(dog, <span class="string">'name'</span>))  <span class="comment"># animal</span></span><br><span class="line">setattr(dog, <span class="string">'name'</span>,<span class="string">'dog'</span>)  <span class="comment"># 相当于dog.name = dog</span></span><br><span class="line">print(getattr(dog, <span class="string">'name'</span>))  <span class="comment"># dog</span></span><br><span class="line">delattr(dog, <span class="string">'name'</span>)  <span class="comment"># 相当于del dog.name</span></span><br><span class="line">print(hasattr(dog, <span class="string">'name'</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>只有在不知道对象信息的情况下，才会去获取对象信息。</p><p>举个例子：别的程序传给你一个变量var，这个变量是一个字符串，并且这个字符串对应某个模块下的某个函数名，如果你通过变量var直接导入该模块下的该函数，肯定是不行的，因为var是个变量，这时就可以使用反射，例如：var=”xxx” f=getattr(module,var)，这样，就得到了var对应的模块中的函数f，接下来就可以调用f了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pthon模块</title>
      <link href="/2019/04/28/python/python-mo-kuai/"/>
      <url>/2019/04/28/python/python-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="pthon模块"><a href="#pthon模块" class="headerlink" title="pthon模块"></a>pthon模块</h1><p>为什么使用模块？</p><ol><li>代码重用</li><li>避免属性冲突</li></ol><p>为了更好地组织和管理模块，python引入了包，在某个目录下添加模块__init__.py后，该目录就变成了包。目录支持嵌套，所以包也支持嵌套，包中还可以有子包。</p><hr><h2 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h2><p>使用相对路径导入模块时，其中，一个.表示当前目录，两个..表示当前目录的父目录。当直接运行某个模块时，该模块就变成了主模块。主模块位于最顶层，与同目录下的其它模块无法形成相对关系。因此，当直接运行某个模块时，该模块不能相对导入。</p><hr><h2 id="import语句的执行流程"><a href="#import语句的执行流程" class="headerlink" title="import语句的执行流程"></a>import语句的执行流程</h2><p>当使用import语句导入模块时，解析器会根据sys模块的modules属性值来查找模块是否已经导入了。</p><ol><li><p>如果模块已经被导入，解析器不做任何操作。</p></li><li><p>如果模块没有被导入，</p><p>（1）解析器按照某种路径搜索模块；</p><p>（2）讲搜索到的模块编译为pyc字节码文件；（可选）</p><p>（3）执行编译生成的字节码文件从而运行模块。</p></li></ol><p>解析器搜索模块的路径：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">pprint(sys.path)</span><br></pre></td></tr></table></figure><p>搜索路径主要由三部分组成：</p><ol><li>当前目录</li><li>标准库目录</li><li>第三方库安装目录</li></ol><p>修改解析器搜索模块的路径</p><ol><li>直接修改sys.path，但是在代码运行后失效。</li><li>直接修改PYTHON_PATH</li></ol><hr><h2 id="重新加载模块"><a href="#重新加载模块" class="headerlink" title="重新加载模块"></a>重新加载模块</h2><p>当使用import导入模块之后，模块被修改，如果再次使用import导入模块，是不会生效的。</p><p>需要使用importlib中的reload()方法，重新加载模块。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module, time</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    importlib.reload(my_module)  <span class="comment"># 动态重新加载模块</span></span><br><span class="line">    print(my_module.a)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="模块访问控制"><a href="#模块访问控制" class="headerlink" title="模块访问控制"></a>模块访问控制</h2><p>当某个模块前加单下划线_时，不能通过import *导入，但是可以通过import _xxx导入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
